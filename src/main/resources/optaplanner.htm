<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory">OptaPlanner User Guide</title><link rel="stylesheet" href="css/jbossorg.css" type="text/css"/><meta xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" name="generator" content="DocBook XSL-NS Stylesheets V1.74.0"/><meta xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" http-equiv="Content-Type" content="text/html; charset=UTF-8"/></head><body><div class="book" lang="en-US"><div class="titlepage"><div><p xmlns:d="http://docbook.org/ns/docbook" id="title"><a href="http://www.jboss.org" class="site_href"><strong>JBoss.org</strong></a><a href="http://docs.jboss.org/" class="doc_href"><strong>Community Documentation</strong></a></p><div><h1 class="title"><a id="d0e1"/>OptaPlanner User Guide</h1></div><div><div xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="authorgroup"><div class="authors">by <span xmlns="http://www.w3.org/1999/xhtml" class="orgname"><a class="link" href="http://www.optaplanner.org/community/team.html" target="">The OptaPlanner team</a></span></div><div class="editors"/><div class="others"/></div></div><div><p class="releaseinfo">Version 6.0.0.CR4</p></div></div><hr/></div><div class="toc"><dl><dt><span class="preface"><a href="#d0e19"/></span></dt><dt><span class="chapter"><a href="#plannerIntroduction">1. Planner introduction</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e26">1.1. What is OptaPlanner?</a></span></dt><dt><span class="section"><a href="#d0e120">1.2. What is a planning problem?</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e123">1.2.1. A planning problem is NP-complete</a></span></dt><dt><span class="section"><a href="#d0e165">1.2.2. A planning problem has (hard and soft) constraints</a></span></dt><dt><span class="section"><a href="#d0e214">1.2.3. A planning problem has a huge search space</a></span></dt></dl></dd><dt><span class="section"><a href="#downloadAndRunTheExamples">1.3. Download and run the examples</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e257">1.3.1. Get the release zip and run the examples</a></span></dt><dt><span class="section"><a href="#runTheExamplesInAnIDE">1.3.2. Run the examples in an IDE (IntelliJ, Eclipse, NetBeans)</a></span></dt><dt><span class="section"><a href="#useWithMavenGradleEtc">1.3.3. Use OptaPlanner with Maven, Gradle, Ivy, Buildr or ANT</a></span></dt><dt><span class="section"><a href="#buildFromSource">1.3.4. Build OptaPlanner from source</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e453">1.4. Status of OptaPlanner</a></span></dt><dt><span class="section"><a href="#compatibility">1.5. Compatibility</a></span></dt><dt><span class="section"><a href="#d0e473">1.6. Questions, issues and blog</a></span></dt></dl></dd><dt><span class="chapter"><a href="#quickStart">2. Quick start</a></span></dt><dd><dl><dt><span class="section"><a href="#cloudBalancingTutorial">2.1. Cloud balancing tutorial</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e517">2.1.1. Problem statement</a></span></dt><dt><span class="section"><a href="#d0e563">2.1.2. Problem size</a></span></dt><dt><span class="section"><a href="#d0e568">2.1.3. Domain model diagram</a></span></dt><dt><span class="section"><a href="#d0e625">2.1.4. Main method</a></span></dt><dt><span class="section"><a href="#d0e675">2.1.5. Solver configuration</a></span></dt><dt><span class="section"><a href="#d0e714">2.1.6. Domain model implementation</a></span></dt><dt><span class="section"><a href="#d0e816">2.1.7. Score configuration</a></span></dt><dt><span class="section"><a href="#d0e907">2.1.8. Beyond this tutorial</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#useCasesAndExamples">3. Use cases and examples</a></span></dt><dd><dl><dt><span class="section"><a href="#examplesOverview">3.1. Examples overview</a></span></dt><dt><span class="section"><a href="#d0e1343">3.2. Basic examples</a></span></dt><dd><dl><dt><span class="section"><a href="#nQueens">3.2.1. N queens</a></span></dt><dt><span class="section"><a href="#cloudBalancing">3.2.2. Cloud balancing</a></span></dt><dt><span class="section"><a href="#tsp">3.2.3. Traveling salesman (TSP - Traveling salesman problem)</a></span></dt><dt><span class="section"><a href="#manners2009">3.2.4. Manners 2009</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e1596">3.3. Real examples</a></span></dt><dd><dl><dt><span class="section"><a href="#curriculumCourse">3.3.1. Course timetabling (ITC 2007 track 3 - Curriculum course scheduling)</a></span></dt><dt><span class="section"><a href="#machineReassignment">3.3.2. Machine reassignment (Google ROADEF 2012)</a></span></dt><dt><span class="section"><a href="#vehicleRouting">3.3.3. Vehicle routing</a></span></dt><dt><span class="section"><a href="#projectJobScheduling">3.3.4. Project job scheduling</a></span></dt><dt><span class="section"><a href="#pas">3.3.5. Hospital bed planning (PAS - Patient admission scheduling)</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e1864">3.4. Difficult examples</a></span></dt><dd><dl><dt><span class="section"><a href="#examination">3.4.1. Exam timetabling (ITC 2007 track 1 - Examination)</a></span></dt><dt><span class="section"><a href="#nurseRostering">3.4.2. Employee rostering (INRC 2010 - Nurse rostering)</a></span></dt><dt><span class="section"><a href="#travelingTournament">3.4.3. Sport scheduling (TTP - Traveling tournament problem)</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#plannerConfiguration">4. Planner configuration</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e2064">4.1. Overview</a></span></dt><dt><span class="section"><a href="#d0e2124">4.2. Solver configuration</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e2127">4.2.1. Solver configuration by XML file</a></span></dt><dt><span class="section"><a href="#d0e2165">4.2.2. Solver configuration by Java API</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e2187">4.3. Model your planning problem</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e2190">4.3.1. Is this class a problem fact or planning entity?</a></span></dt><dt><span class="section"><a href="#problemFact">4.3.2. Problem fact</a></span></dt><dt><span class="section"><a href="#planningEntity">4.3.3. Planning entity</a></span></dt><dt><span class="section"><a href="#planningVariable">4.3.4. Planning variable</a></span></dt><dt><span class="section"><a href="#d0e2564">4.3.5. Planning value and planning value ranges</a></span></dt><dt><span class="section"><a href="#d0e2943">4.3.6. Planning problem and planning solution</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e3332">4.4. Use the Solver</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e3337">4.4.1. The Solver interface</a></span></dt><dt><span class="section"><a href="#d0e3358">4.4.2. Solving a problem</a></span></dt><dt><span class="section"><a href="#environmentMode">4.4.3. Environment mode: Are there bugs in my code?</a></span></dt><dt><span class="section"><a href="#logging">4.4.4. Logging level: What is the Solver doing?</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#scoreCalculation">5. Score calculation</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e3669">5.1. Score terminology</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e3672">5.1.1. What is a score?</a></span></dt><dt><span class="section"><a href="#d0e3725">5.1.2. Score constraint signum (positive or negative)</a></span></dt><dt><span class="section"><a href="#d0e3750">5.1.3. Score constraint weight</a></span></dt><dt><span class="section"><a href="#d0e3771">5.1.4. Score level</a></span></dt><dt><span class="section"><a href="#d0e3808">5.1.5. Pareto scoring (AKA multi-objective optimization scoring)</a></span></dt><dt><span class="section"><a href="#d0e3851">5.1.6. Combining score techniques</a></span></dt><dt><span class="section"><a href="#d0e3859">5.1.7. The Score interface</a></span></dt><dt><span class="section"><a href="#avoidFloatingPointNumbersInScoreCalculation">5.1.8. Avoid floating point numbers in score calculation</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e3982">5.2. Choose a Score definition</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e3999">5.2.1. SimpleScore</a></span></dt><dt><span class="section"><a href="#d0e4065">5.2.2. HardSoftScore (recommended)</a></span></dt><dt><span class="section"><a href="#d0e4134">5.2.3. HardMediumSoftScore</a></span></dt><dt><span class="section"><a href="#d0e4156">5.2.4. BendableScore</a></span></dt><dt><span class="section"><a href="#customScore">5.2.5. Implementing a custom Score</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e4207">5.3. Calculate the Score</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e4212">5.3.1. Score calculation types</a></span></dt><dt><span class="section"><a href="#d0e4260">5.3.2. Simple Java score calculation</a></span></dt><dt><span class="section"><a href="#d0e4311">5.3.3. Incremental Java score calculation</a></span></dt><dt><span class="section"><a href="#d0e4387">5.3.4. Drools score calculation</a></span></dt><dt><span class="section"><a href="#d0e4585">5.3.5. Detecting invalid scores</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e4628">5.4. Score calculation performance tricks</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e4631">5.4.1. Overview</a></span></dt><dt><span class="section"><a href="#d0e4639">5.4.2. Average calculation count per second</a></span></dt><dt><span class="section"><a href="#incrementalScoreCalculation">5.4.3. Incremental score calculation (with delta's)</a></span></dt><dt><span class="section"><a href="#d0e4696">5.4.4. Avoid calling remote services during score calculation</a></span></dt><dt><span class="section"><a href="#d0e4712">5.4.5. Unused constraint</a></span></dt><dt><span class="section"><a href="#buildInHardConstraint">5.4.6. Build-in hard constraint</a></span></dt><dt><span class="section"><a href="#d0e4763">5.4.7. Other performance tricks</a></span></dt><dt><span class="section"><a href="#scoreTrap">5.4.8. Score trap</a></span></dt><dt><span class="section"><a href="#d0e4842">5.4.9. stepLimit benchmark</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e4847">5.5. Reusing the score calculation outside the Solver</a></span></dt></dl></dd><dt><span class="chapter"><a href="#optimizationAlgorithms">6. Optimization algorithms</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e4892">6.1. Search space size in the real world</a></span></dt><dt><span class="section"><a href="#d0e4944">6.2. Does Planner find the optimal solution?</a></span></dt><dt><span class="section"><a href="#d0e4975">6.3. Architecture overview</a></span></dt><dt><span class="section"><a href="#d0e4996">6.4. Optimization algorithms overview</a></span></dt><dt><span class="section"><a href="#d0e5257">6.5. Which optimization algorithms should I use?</a></span></dt><dt><span class="section"><a href="#d0e5314">6.6. SolverPhase</a></span></dt><dt><span class="section"><a href="#scopeOverview">6.7. Scope overview</a></span></dt><dt><span class="section"><a href="#d0e5378">6.8. Termination</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e5414">6.8.1. TimeMillisSpendTermination</a></span></dt><dt><span class="section"><a href="#d0e5449">6.8.2. ScoreAttainedTermination</a></span></dt><dt><span class="section"><a href="#d0e5468">6.8.3. StepCountTermination</a></span></dt><dt><span class="section"><a href="#d0e5486">6.8.4. UnimprovedStepCountTermination</a></span></dt><dt><span class="section"><a href="#d0e5506">6.8.5. Combining multiple Terminations</a></span></dt><dt><span class="section"><a href="#d0e5519">6.8.6. Asynchronous termination from another thread</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e5546">6.9. SolverEventListener</a></span></dt><dt><span class="section"><a href="#d0e5567">6.10. Custom SolverPhase</a></span></dt></dl></dd><dt><span class="chapter"><a href="#moveAndNeighborhoodSelection">7. Move and neighborhood selection</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e5665">7.1. Move and neighborhood introduction</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e5670">7.1.1. What is a Move?</a></span></dt><dt><span class="section"><a href="#d0e5748">7.1.2. What is a MoveSelector?</a></span></dt><dt><span class="section"><a href="#d0e5774">7.1.3. Subselecting of entities, values and other moves</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e5820">7.2. General Selector features</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e5826">7.2.1. CacheType: Create moves ahead of time or Just In Time</a></span></dt><dt><span class="section"><a href="#d0e5932">7.2.2. SelectionOrder: original, sorted, random, shuffled or probabilistic</a></span></dt><dt><span class="section"><a href="#d0e6076">7.2.3. Recommended combinations of CacheType and SelectionOrder</a></span></dt><dt><span class="section"><a href="#filteredSelection">7.2.4. Filtered selection</a></span></dt><dt><span class="section"><a href="#sortedSelection">7.2.5. Sorted selection</a></span></dt><dt><span class="section"><a href="#probabilisticSelection">7.2.6. Probabilistic selection</a></span></dt><dt><span class="section"><a href="#mimicSelection">7.2.7. Mimic selection (record/replay)</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e6394">7.3. Generic MoveSelectors</a></span></dt><dd><dl><dt><span class="section"><a href="#changeMoveSelector">7.3.1. changeMoveSelector</a></span></dt><dt><span class="section"><a href="#swapMoveSelector">7.3.2. swapMoveSelector</a></span></dt><dt><span class="section"><a href="#pillarSwapMoveSelector">7.3.3. pillarSwapMoveSelector</a></span></dt><dt><span class="section"><a href="#subChainChangeMoveSelector">7.3.4. subChainChangeMoveSelector</a></span></dt><dt><span class="section"><a href="#subChainSwapMoveSelector">7.3.5. subChainSwapMoveSelector</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e6579">7.4. Combining multiple MoveSelectors</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e6585">7.4.1. unionMoveSelector</a></span></dt><dt><span class="section"><a href="#d0e6654">7.4.2. cartesianProductMoveSelector</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e6708">7.5. EntitySelector</a></span></dt><dt><span class="section"><a href="#d0e6724">7.6. ValueSelector</a></span></dt><dt><span class="section"><a href="#d0e6740">7.7. Custom moves</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e6743">7.7.1. Which move types might be missing in my implementation?</a></span></dt><dt><span class="section"><a href="#d0e6756">7.7.2. Custom moves introduction</a></span></dt><dt><span class="section"><a href="#d0e6795">7.7.3. The interface Move</a></span></dt><dt><span class="section"><a href="#d0e6967">7.7.4. MoveListFactory: the easy way to generate custom moves</a></span></dt><dt><span class="section"><a href="#d0e7017">7.7.5. MoveIteratorFactory: generate custom moves just in time</a></span></dt><dt><span class="section"><a href="#d0e7093">7.7.6. Move generation through DRL</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#constructionHeuristics">8. Construction heuristics</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7101">8.1. Overview</a></span></dt><dt><span class="section"><a href="#firstFit">8.2. First Fit</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7114">8.2.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7130">8.2.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#firstFitDecreasing">8.3. First Fit Decreasing</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7164">8.3.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7186">8.3.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#bestFit">8.4. Best Fit</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7199">8.4.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7218">8.4.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#bestFitDecreasing">8.5. Best Fit Decreasing</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7231">8.5.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7262">8.5.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#cheapestInsertion">8.6. Cheapest insertion</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7275">8.6.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7280">8.6.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#regretInsertion">8.7. Regret insertion</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7288">8.7.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7293">8.7.2. Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#localSearch">9. Local search</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7301">9.1. Overview</a></span></dt><dt><span class="section"><a href="#hillClimbing">9.2. Hill Climbing (Simple Local Search)</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7315">9.2.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#tabuSearch">9.3. Tabu Search</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7335">9.3.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#simulatedAnnealing">9.4. Simulated Annealing</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7356">9.4.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#lateAcceptance">9.5. Late Acceptance</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7369">9.5.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#lateSimulatedAnnealing">9.6. Late Simulated Annealing (experimental)</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7388">9.6.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e7395">9.7. About neighborhoods, moves and steps</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7398">9.7.1. Move generation tips</a></span></dt><dt><span class="section"><a href="#d0e7407">9.7.2. A step</a></span></dt><dt><span class="section"><a href="#d0e7483">9.7.3. Getting stuck in local optima</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e7506">9.8. Deciding the next step</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7556">9.8.1. Acceptor</a></span></dt><dt><span class="section"><a href="#d0e7687">9.8.2. Forager</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e7758">9.9. Using a custom Termination, MoveSelector, EntitySelector, ValueSelector or Acceptor</a></span></dt></dl></dd><dt><span class="chapter"><a href="#evolutionaryAlgorithms">10. Evolutionary algorithms</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7846">10.1. Overview</a></span></dt><dt><span class="section"><a href="#evolutionaryStrategies">10.2. Evolutionary Strategies</a></span></dt><dt><span class="section"><a href="#geneticAlgorithms">10.3. Genetic algorithms</a></span></dt></dl></dd><dt><span class="chapter"><a href="#hyperheuristics">11. Hyperheuristics</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7864">11.1. Overview</a></span></dt></dl></dd><dt><span class="chapter"><a href="#exactMethods">12. Exact methods</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7874">12.1. Overview</a></span></dt><dt><span class="section"><a href="#bruteForce">12.2. Brute Force</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7882">12.2.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7901">12.2.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#depthFirstSearch">12.3. Depth-first search</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7911">12.3.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7931">12.3.2. Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#benchmarkingAndTweaking">13. Benchmarking and tweaking</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7939">13.1. Finding the best Solver configuration</a></span></dt><dt><span class="section"><a href="#d0e7952">13.2. Doing a benchmark</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7955">13.2.1. Adding a dependency on optaplanner-benchmark</a></span></dt><dt><span class="section"><a href="#d0e7983">13.2.2. Building and running a PlannerBenchmark</a></span></dt><dt><span class="section"><a href="#problemIO">13.2.3. ProblemIO: input and output of Solution files</a></span></dt><dt><span class="section"><a href="#writingTheOutputSolutionOfTheBenchmarkRuns">13.2.4. Writing the output solution of the benchmark runs</a></span></dt><dt><span class="section"><a href="#d0e8160">13.2.5. Warming up the HotSpot compiler</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e8171">13.3. Benchmark report</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e8174">13.3.1. HTML report</a></span></dt><dt><span class="section"><a href="#d0e8207">13.3.2. Summary statistics</a></span></dt><dt><span class="section"><a href="#d0e8290">13.3.3. Statistic per data set (graph and CSV)</a></span></dt><dt><span class="section"><a href="#d0e8428">13.3.4. Ranking the Solvers</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e8487">13.4. Advanced benchmarking</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e8490">13.4.1. Benchmarking performance tricks</a></span></dt><dt><span class="section"><a href="#d0e8552">13.4.2. Template based benchmarking and matrix benchmarking</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#repeatedPlanning">14. Repeated planning</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e8601">14.1. Introduction to repeated planning</a></span></dt><dt><span class="section"><a href="#backupPlanning">14.2. Backup planning</a></span></dt><dt><span class="section"><a href="#continuousPlanning">14.3. Continuous planning (windowed planning)</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e8661">14.3.1. Immovable planning entities</a></span></dt></dl></dd><dt><span class="section"><a href="#realTimePlanning">14.4. Real-time planning (event based planning)</a></span></dt></dl></dd></dl></div><div class="preface" lang="en-US"><div class="titlepage"/><div class="mediaobject"><img src="images/Chapter-Planner_introduction/optaPlannerLogo.png"/></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="plannerIntroduction"/>Chapter 1. Planner introduction</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e26">1.1. What is OptaPlanner?</a></span></dt><dt><span class="section"><a href="#d0e120">1.2. What is a planning problem?</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e123">1.2.1. A planning problem is NP-complete</a></span></dt><dt><span class="section"><a href="#d0e165">1.2.2. A planning problem has (hard and soft) constraints</a></span></dt><dt><span class="section"><a href="#d0e214">1.2.3. A planning problem has a huge search space</a></span></dt></dl></dd><dt><span class="section"><a href="#downloadAndRunTheExamples">1.3. Download and run the examples</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e257">1.3.1. Get the release zip and run the examples</a></span></dt><dt><span class="section"><a href="#runTheExamplesInAnIDE">1.3.2. Run the examples in an IDE (IntelliJ, Eclipse, NetBeans)</a></span></dt><dt><span class="section"><a href="#useWithMavenGradleEtc">1.3.3. Use OptaPlanner with Maven, Gradle, Ivy, Buildr or ANT</a></span></dt><dt><span class="section"><a href="#buildFromSource">1.3.4. Build OptaPlanner from source</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e453">1.4. Status of OptaPlanner</a></span></dt><dt><span class="section"><a href="#compatibility">1.5. Compatibility</a></span></dt><dt><span class="section"><a href="#d0e473">1.6. Questions, issues and blog</a></span></dt></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e26"/>1.1. What is OptaPlanner?</h2></div></div></div><p><span class="bold"><strong><a class="link" href="http://www.optaplanner.org" target="">OptaPlanner</a> is a lightweight,
    embeddable planning engine that optimizes planning problems.</strong></span> It solves use cases, such as:</p><div class="itemizedlist"><ul><li><p><span class="bold"><strong>Employee shift rostering</strong></span>: timetabling nurses, repairmen, ...</p></li><li><p><span class="bold"><strong>Agenda scheduling</strong></span>: scheduling meetings, appointments, maintenance jobs,
        advertisements, ...</p></li><li><p><span class="bold"><strong>Educational timetabling</strong></span>: scheduling lessons, courses, exams, conference
        presentations, ...</p></li><li><p><span class="bold"><strong>Vehicle routing</strong></span>: planning vehicles (trucks, trains, boats, airplanes,
        ...) with freight and/or people</p></li><li><p><span class="bold"><strong>Bin packing</strong></span>: filling containers, trucks, ships and storage warehouses,
        but also cloud computers nodes, ...</p></li><li><p><span class="bold"><strong>Job shop scheduling</strong></span>: planning car assembly lines, machine queue planning,
        workforce task planning, ...</p></li><li><p><span class="bold"><strong>Cutting stock</strong></span>: minimizing waste while cutting paper, steel, carpet,
        ...</p></li><li><p><span class="bold"><strong>Sport scheduling</strong></span>: planning football leagues, baseball leagues, ...</p></li><li><p><span class="bold"><strong>Financial optimization</strong></span>: investment portfolio optimization, risk
        spreading, ...</p></li></ul></div><div class="mediaobject"><img src="images/Chapter-Planner_introduction/useCaseOverview.png"/></div><p>Every organization faces planning problems: provide products or services with a limited set of
    <span class="emphasis"><em>constrained</em></span> resources (employees, assets, time and money). OptaPlanner optimizes such planning
    to do more business with less resources. This is known as <span class="emphasis"><em>Constraint Satisfaction Programming</em></span>
    (which is part of the discipline <span class="emphasis"><em>Operations Research</em></span>).</p><p>OptaPlanner helps normal Java<sup>TM</sup> programmers solve constraint satisfaction problems
    efficiently. Under the hood, it combines optimization heuristics and metaheuristics with very efficient score
    calculation.</p><p>OptaPlanner is <span class="emphasis"><em>open source</em></span> software, released under <a class="link" href="http://www.apache.org/licenses/LICENSE-2.0.html" target="">the Apache Software License 2.0</a>. This license is
    very liberal and allows reuse for commercial purposes. Read <a class="link" href="http://www.apache.org/foundation/licence-FAQ.html#WhatDoesItMEAN" target="">the layman's explanation</a>.
    OptaPlanner is 100% pure Java<sup>TM</sup>, runs on <a class="link" href="compatibility" target="">any JVM</a>
    and is available in <a class="link" href="#useWithMavenGradleEtc" title="1.3.3. Use OptaPlanner with Maven, Gradle, Ivy, Buildr or ANT">the Maven Central Repository</a> too.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e120"/>1.2. What is a planning problem?</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e123"/>1.2.1. A planning problem is NP-complete</h3></div></div></div><p>All the use cases above are <span class="emphasis"><em>probably</em></span> <a class="link" href="http://en.wikipedia.org/wiki/NP-complete" target="">NP-complete</a>. In layman's terms, this means:</p><div class="itemizedlist"><ul><li><p>It's easy to verify a given solution to a problem in reasonable time.</p></li><li><p>There is no silver bullet to find the optimal solution of a problem in reasonable time (*).</p></li></ul></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>(*) At least, none of the smartest computer scientists in the world have found such a silver bullet yet.
        But if they find one for 1 NP-complete problem, it will work for every NP-complete problem.</p><p>In fact, there's a $ 1,000,000 reward for anyone that proves if <a class="link" href="http://en.wikipedia.org/wiki/P_%3D_NP_problem" target="">such a silver bullet actually exists or
        not</a>.</p></div><p>The implication of this is pretty dire: solving your problem is probably harder than you anticipated,
      because the 2 common techniques won't suffice:</p><div class="itemizedlist"><ul><li><p>A brute force algorithm (even a smarter variant) will take too long.</p></li><li><p>A quick algorithm, for example in bin packing, <span class="emphasis"><em>putting in the largest items first</em></span>,
          will return a solution that is usually far from optimal.</p></li></ul></div><p>By using advanced optimization algorithms, <span class="bold"><strong>Planner does find a good solution in
      reasonable time for such planning problems.</strong></span></p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e165"/>1.2.2. A planning problem has (hard and soft) constraints</h3></div></div></div><p>Usually, a planning problem has at least 2 levels of constraints:</p><div class="itemizedlist"><ul><li><p>A <span class="emphasis"><em>(negative) hard constraint</em></span> must not be broken. For example: <span class="emphasis"><em>1 teacher
          can not teach 2 different lessons at the same time</em></span>.</p></li><li><p>A <span class="emphasis"><em>(negative) soft constraint</em></span> should not be broken if it can be avoided. For
          example: <span class="emphasis"><em>Teacher A does not like to teach on Friday afternoon</em></span>.</p></li></ul></div><p>Some problems have positive constraints too:</p><div class="itemizedlist"><ul><li><p>A <span class="emphasis"><em>positive soft constraint (or reward)</em></span> should be fulfilled if possible. For
          example: <span class="emphasis"><em>Teacher B likes to teach on Monday morning</em></span>.</p></li></ul></div><p>Some basic problems (such as N Queens) only have hard constraints. Some problems have 3 or more levels of
      constraints, for example hard, medium and soft constraints.</p><p>These constraints define the <span class="emphasis"><em>score calculation</em></span> (AKA <span class="emphasis"><em>fitness
      function</em></span>) of a planning problem. Each solution of a planning problem can be graded with a score.
      <span class="bold"><strong>With Planner, score constraints are written in an Object Orientated language, such as Java
      code or Drools rules</strong></span>. Such code is easy, flexible and scalable.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e214"/>1.2.3. A planning problem has a huge search space</h3></div></div></div><p>A planning problem has a number of <span class="emphasis"><em>solutions</em></span>. There are several categories of
      solutions:</p><div class="itemizedlist"><ul><li><p>A <span class="emphasis"><em>possible solution</em></span> is any solution, whether or not it breaks any number of
          constraints. Planning problems tend to have an incredibly large number of possible solutions. Many of those
          solutions are worthless.</p></li><li><p>A <span class="emphasis"><em>feasible solution</em></span> is a solution that does not break any (negative) hard
          constraints. The number of feasible solutions tends to be relative to the number of possible solutions.
          Sometimes there are no feasible solutions. Every feasible solution is a possible solution.</p></li><li><p>An <span class="emphasis"><em>optimal solution</em></span> is a solution with the highest score. Planning problems tend to
          have 1 or a few optimal solutions. There is always at least 1 optimal solution, even in the case that there
          are no feasible solutions and the optimal solution isn't feasible.</p></li><li><p>The <span class="emphasis"><em>best solution found</em></span> is the solution with the highest score found by an
          implementation in a given amount of time. The best solution found is likely to be feasible and, given enough
          time, it's an optimal solution.</p></li></ul></div><p>Counterintuitively, the number of possible solutions is huge (if calculated correctly), even with a small
      dataset. As you can see in the examples, most instances have a lot more possible solutions than the minimal number
      of atoms in the known universe (10^80). Because there is no silver bullet to find the optimal solution, any
      implementation is forced to evaluate at least a subset of all those possible solutions.</p><p>OptaPlanner supports several optimization algorithms to efficiently wade through that incredibly large
      number of possible solutions. Depending on the use case, some optimization algorithms perform better than others,
      but it's impossible to tell in advance. <span class="bold"><strong>With Planner, it is easy to switch the optimization
      algorithm</strong></span>, by changing the solver configuration in a few lines of XML or code.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="downloadAndRunTheExamples"/>1.3. Download and run the examples</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e257"/>1.3.1. Get the release zip and run the examples</h3></div></div></div><p>To try it now:</p><div class="itemizedlist"><ul><li><p>Download a release zip of OptaPlanner from <a class="link" href="http://www.optaplanner.org" target="">the OptaPlanner
          website</a>.</p></li><li><p>Unzip it.</p></li><li><p>Open the directory <code class="filename">examples</code> and run the script.</p><p>Linux or Mac:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">$ cd examples
$ ./runExamples.sh</pre><p>Windows:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">$ cd examples
$ runExamples.bat</pre></li></ul></div><div class="mediaobject"><img src="images/Chapter-Planner_introduction/distributionZip.png"/></div><p>The Examples GUI application will open. Just pick an example:</p><div class="mediaobject"><img src="images/Chapter-Planner_introduction/plannerExamplesAppScreenshot.png"/></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Planner itself has no GUI dependencies. It runs just as well on a server or a mobile JVM as it does on the
        desktop.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="runTheExamplesInAnIDE"/>1.3.2. Run the examples in an IDE (IntelliJ, Eclipse, NetBeans)</h3></div></div></div><p>To run the examples in your favorite IDE:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p>Configure your IDE:</p><div class="itemizedlist"><ul><li><p>In IntelliJ and NetBeans, just open the file <code class="filename">examples/sources/pom.xml</code> as a new
              project, the maven integration will take care of the rest.</p></li><li><p>In Eclipse, open a new project for the directory <code class="filename">examples/sources</code>.</p><div class="itemizedlist"><ul><li><p>Add all the jars to the classpath from the directory <code class="filename">binaries</code> and the
                  directory <code class="filename">examples/binaries</code>, except for the file
                  <code class="filename">examples/binaries/optaplanner-examples-*.jar</code>.</p></li><li><p>Add the Java source directory <code class="filename">src/main/java</code> and the Java resources
                  directory <code class="filename">src/main/resources</code>.</p></li></ul></div></li></ul></div></li><li><p>Create a run configuration:</p><div class="itemizedlist"><ul><li><p>Main class: <code class="literal">org.optaplanner.examples.app.OptaPlannerExamplesApp</code></p></li><li><p>VM parameters (optional): <code class="literal">-Xmx512M -server</code></p></li><li><p>Working directory: <code class="literal">examples</code> (this is the directory that contains the directory
              <code class="literal">data</code>)</p></li></ul></div></li><li><p>Run that run configuration.</p></li></ol></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="useWithMavenGradleEtc"/>1.3.3. Use OptaPlanner with Maven, Gradle, Ivy, Buildr or ANT</h3></div></div></div><p>The OptaPlanner jars are also available in <a class="link" href="http://search.maven.org/#search|ga|1|org.optaplanner" target="">the central maven repository</a> (and also in
      <a class="link" href="https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.optaplanner~~~~" target="">the JBoss
      maven repository</a>).</p><p>If you use Maven, add a dependency to <code class="literal">optaplanner-core</code> in your project's
      <code class="filename">pom.xml</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">optaplanner-core</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>This is similar for Gradle, Ivy and Buildr. To identify the latest version, check <a class="link" href="http://search.maven.org/#search|ga|1|org.optaplanner" target="">the central maven repository</a>.</p><p>Because you might end up using other optaplanner modules too, it's recommended to import the
      <code class="literal">optaplanner-bom</code> in Maven's <code class="literal">dependencyManagement</code> so the optaplanner version
      is specified only once:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">dependencyManagement</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">dependencies</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">optaplanner-bom</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">type</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">pom</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">type</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">version</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">version</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scope</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">import</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scope</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">dependencies</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">dependencyManagement</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>If you're still using ANT (without Ivy), copy all the jars from the download zip's
      <code class="filename">binaries</code> directory and manually verify that your classpath doesn't contain duplicate
      jars.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>The download zip's <code class="filename">binaries</code> directory contains far more jars then
        <code class="literal">optaplanner-core</code> actually uses. It also contains the jars used by other modules, such as
        <code class="literal">optaplanner-benchmark</code>.</p><p>Check the maven repository <code class="filename">pom.xml</code> files to determine the minimal dependency set for
        a specific version of a specific module.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="buildFromSource"/>1.3.4. Build OptaPlanner from source</h3></div></div></div><p>You can also easily build OptaPlanner from source yourself.</p><p><a class="link" href="http://help.github.com/set-up-git-redirect" target="">Set up Git</a> and clone
      <code class="literal">optaplanner</code> from GitHub (or alternatively, download <a class="link" href="https://github.com/droolsjbpm/optaplanner/zipball/master" target="">the zipball</a>):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">$ git clone git@github.com:droolsjbpm/optaplanner.git optaplanner
...</pre><p>Then do a <a class="link" href="http://maven.apache.org/" target="">Maven 3</a> build:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">$ cd optaplanner
$ mvn clean install -DskipTests
...</pre><p>After that, you can run any example directly from the command line, just run this command and pick an
      example:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">$ cd optaplanner-examples
$ mvn exec:exec
...</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e453"/>1.4. Status of OptaPlanner</h2></div></div></div><p>OptaPlanner is production ready. The API is almost stable but backward incompatible changes can occur. With
    the recipe called <a class="link" href="https://github.com/droolsjbpm/optaplanner/blob/master/optaplanner-distribution/src/main/assembly/filtered-resources/UpgradeFromPreviousVersionRecipe.txt" target=""><code class="filename">UpgradeFromPreviousVersionRecipe.txt</code></a>
    you can easily upgrade to a newer version and quickly deal with any backwards incompatible changes. That recipe file
    is included in every release.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="compatibility"/>1.5. Compatibility</h2></div></div></div><p>OptaPlanner is 100% pure Java<sup>TM</sup> and runs on any JVM 1.6 or higher.</p><div class="mediaobject"><img src="images/Chapter-Planner_introduction/compatibility.png"/></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e473"/>1.6. Questions, issues and blog</h2></div></div></div><p>Your questions and comments are welcome on <a class="link" href="http://www.jboss.org/drools/lists.html" target="">the user
    mailing list</a>. Start the subject of your mail with <code class="literal">[planner]</code>. You can read/write to the
    user mailing list without littering your mailbox through <a class="link" href="http://drools.46999.n3.nabble.com/Drools-User-forum-f47000.html" target="">this web forum</a> or <a class="link" href="nntp://news.gmane.org/gmane.comp.java.drools.user" target="">this newsgroup</a>.</p><p>Feel free to report an issue (such as a bug, improvement or a new feature request) for the OptaPlanner code or
    for this manual to <a class="link" href="https://issues.jboss.org/browse/PLANNER" target="">our issue tracker</a>.</p><p>Pull requests are very welcome and get priority treatment! By open sourcing your improvements, you 'll benefit
    from our peer review and from our improvements made upon your improvements.</p><p>Check <a class="link" href="http://blog.athico.com/search/label/planner" target="">our blog</a>, Google+ (<a class="link" href="https://plus.google.com/112724449845406009021" target="">OptaPlanner</a>, <a class="link" href="https://plus.google.com/112811208792575157490" target="">Geoffrey De Smet</a>) and twitter (<a class="link" href="http://twitter.com/geoffreydesmet" target="">Geoffrey De Smet</a>) for news and articles. If OptaPlanner helps
    you solve your problem, don't forget to blog or tweet about it!</p></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="quickStart"/>Chapter 2. Quick start</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#cloudBalancingTutorial">2.1. Cloud balancing tutorial</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e517">2.1.1. Problem statement</a></span></dt><dt><span class="section"><a href="#d0e563">2.1.2. Problem size</a></span></dt><dt><span class="section"><a href="#d0e568">2.1.3. Domain model diagram</a></span></dt><dt><span class="section"><a href="#d0e625">2.1.4. Main method</a></span></dt><dt><span class="section"><a href="#d0e675">2.1.5. Solver configuration</a></span></dt><dt><span class="section"><a href="#d0e714">2.1.6. Domain model implementation</a></span></dt><dt><span class="section"><a href="#d0e816">2.1.7. Score configuration</a></span></dt><dt><span class="section"><a href="#d0e907">2.1.8. Beyond this tutorial</a></span></dt></dl></dd></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="cloudBalancingTutorial"/>2.1. Cloud balancing tutorial</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e517"/>2.1.1. Problem statement</h3></div></div></div><p>Suppose your company owns a number of cloud computers and needs to run a number of processes on those
      computers. Assign each process to a computer under the following 4 constraints.</p><p>Hard constraints which must be fulfilled:</p><div class="itemizedlist"><ul><li><p>Every computer must be able to handle the minimum hardware requirements of the sum of its
          processes:</p><div class="itemizedlist"><ul><li><p>The CPU power of a computer must be at least the sum of the CPU power required by the processes
              assigned to that computer.</p></li><li><p>The RAM memory of a computer must be at least the sum of the RAM memory required by the processes
              assigned to that computer.</p></li><li><p>The network bandwidth of a computer must be at least the sum of the network bandwidth required by
              the processes assigned to that computer.</p></li></ul></div></li></ul></div><p>Soft constraints which should be optimized:</p><div class="itemizedlist"><ul><li><p>Each computer that has one or more processes assigned, incurs a maintenance cost (which is fixed per
          computer).</p><div class="itemizedlist"><ul><li><p>Minimize the total maintenance cost.</p></li></ul></div></li></ul></div><p>How would you do that? This problem is a form of <span class="emphasis"><em>bin packing</em></span>. Here's a simplified
      example where we assign 4 processes to 2 computers with 2 constraints (CPU and RAM) with a simple
      algorithm:</p><div class="mediaobject"><img src="images/Chapter-Quick_start/cloudBalanceUseCase.png"/></div><p>The simple algorithm used here is the <span class="emphasis"><em>First Fit Decreasing</em></span> algorithm, which assigns the
      bigger processes first and assigns the smaller processes to the remaining space. As you can see, it's not optimal,
      because it does not leave enough room to assign the yellow process D.</p><p>OptaPlanner does find the more optimal solution fast, by using additional, smarter algorithms. And it scales
      too: both in data (more processes, more computers) and constraints (more hardware requirements, other
      constraints). So let's take a look how we can use Planner for this.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e563"/>2.1.2. Problem size</h3></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">2computers-6processes      has   2 computers and    6 processes with a search space of      64.
3computers-9processes      has   3 computers and    9 processes with a search space of    10^4.
4computers-012processes    has   4 computers and   12 processes with a search space of    10^7.
100computers-300processes  has 100 computers and  300 processes with a search space of  10^600.
200computers-600processes  has 200 computers and  600 processes with a search space of 10^1380.
400computers-1200processes has 400 computers and 1200 processes with a search space of 10^3122.
800computers-2400processes has 800 computers and 2400 processes with a search space of 10^6967.</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e568"/>2.1.3. Domain model diagram</h3></div></div></div><p>Let's start by taking a look at the domain model. It's pretty simple:</p><div class="itemizedlist"><ul><li><p><code class="literal">Computer</code>: represents a computer with certain hardware (CPU power, RAM memory, network
          bandwidth) and maintenance cost.</p></li><li><p><code class="literal">Process</code>: represents a process with a demand. Needs to be assigned to a
          <code class="literal">Computer</code> by Planner.</p></li><li><p><code class="literal">CloudBalance</code>: represents a problem. Contains every <code class="literal">Computer</code> and
          <code class="literal">Process</code> for a certain data set.</p></li></ul></div><div class="mediaobject"><img src="images/Chapter-Quick_start/cloudBalanceClassDiagram.png"/></div><p>In the UML class diagram above, the Planner concepts are already annotated:</p><div class="itemizedlist"><ul><li><p>Planning entity: the class (or classes) that changes during planning. In this example that's the class
          <code class="literal">Process</code>.</p></li><li><p>Planning variable: the property (or properties) of a planning entity class that changes during planning.
          In this examples, that's the property <code class="literal">computer</code> on the class
          <code class="literal">Process</code>.</p></li><li><p>Solution: the class that represents a data set and contains all planning entities. In this example
          that's the class <code class="literal">CloudBalance</code>.</p></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e625"/>2.1.4. Main method</h3></div></div></div><p>Try it yourself. <a class="link" href="#downloadAndRunTheExamples" title="1.3. Download and run the examples">Download and configure the examples in your
      favorite IDE.</a> Run <code class="literal">org.optaplanner.examples.cloudbalancing.app.CloudBalancingHelloWorld</code>.
      By default, it is configured to run for 120 seconds. It will execute this code:</p><div class="example"><a id="d0e636"/><p class="title"><b>Example 2.1. CloudBalancingHelloWorld.java</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudBalancingHelloWorld</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">static</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;main</span><span class="java_separator">(</span><span class="java_type">String</span><span class="java_separator">[]</span><span class="java_plain">&nbsp;args</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Build</span><span class="java_plain">&nbsp;the&nbsp;</span><span class="java_type">Solver</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">SolverFactory</span><span class="java_plain">&nbsp;solverFactory&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">XmlSolverFactory</span><span class="java_separator">(</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_literal">&quot;/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingSolverConfig.xml&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solver</span><span class="java_plain">&nbsp;solver&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;solverFactory</span><span class="java_separator">.</span><span class="java_plain">buildSolver</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Load</span><span class="java_plain">&nbsp;a&nbsp;problem&nbsp;with&nbsp;</span><span class="java_literal">400</span><span class="java_plain">&nbsp;computers&nbsp;and&nbsp;</span><span class="java_literal">1200</span><span class="java_plain">&nbsp;processes</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">CloudBalance</span><span class="java_plain">&nbsp;unsolvedCloudBalance&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudBalancingGenerator</span><span class="java_separator">().</span><span class="java_plain">createCloudBalance</span><span class="java_separator">(</span><span class="java_literal">400</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">1200</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Solve</span><span class="java_plain">&nbsp;the&nbsp;problem</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">setPlanningProblem</span><span class="java_separator">(</span><span class="java_plain">unsolvedCloudBalance</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">solve</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">CloudBalance</span><span class="java_plain">&nbsp;solvedCloudBalance&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">CloudBalance</span><span class="java_separator">)</span><span class="java_plain">&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">getBestSolution</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Display</span><span class="java_plain">&nbsp;the&nbsp;result</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">System</span><span class="java_separator">.</span><span class="java_plain">out</span><span class="java_separator">.</span><span class="java_plain">println</span><span class="java_separator">(</span><span class="java_literal">&quot;\nSolved&nbsp;cloudBalance&nbsp;with&nbsp;400&nbsp;computers&nbsp;and&nbsp;1200&nbsp;processes:\n&quot;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">+</span><span class="java_plain">&nbsp;toDisplayString</span><span class="java_separator">(</span><span class="java_plain">solvedCloudBalance</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre></div></div><br class="example-break"/><p>The code above does this:</p><div class="itemizedlist"><ul><li><p>Build the <code class="literal">Solver</code> based on a solver configuration (in this case an XML file).</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">SolverFactory</span><!-- <br/> --><span class="java_plain">&nbsp;solverFactory&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">new</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">XmlSolverFactory</span><!-- <br/> --><span class="java_separator">(</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_literal">&quot;/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingSolverConfig.xml&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solver</span><span class="java_plain">&nbsp;solver&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;solverFactory</span><span class="java_separator">.</span><span class="java_plain">buildSolver</span><span class="java_separator">();</span></pre></li><li><p>Load the problem. <code class="literal">CloudBalancingGenerator</code> generates a random problem: you'll replace
          this with a class that loads a real problem, for example from a database.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">CloudBalance</span><!-- <br/> --><span class="java_plain">&nbsp;unsolvedCloudBalance&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">new</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudBalancingGenerator</span><!-- <br/> --><span class="java_separator">().</span><!-- <br/> --><span class="java_plain">createCloudBalance</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_literal">400</span><!-- <br/> --><span class="java_separator">,</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">1200</span><!-- <br/> --><span class="java_separator">);</span></pre></li><li><p>Solve the problem.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solver</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">setPlanningProblem</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">unsolvedCloudBalance</span><!-- <br/> --><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">solve</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">CloudBalance</span><span class="java_plain">&nbsp;solvedCloudBalance&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">CloudBalance</span><span class="java_separator">)</span><span class="java_plain">&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">getBestSolution</span><span class="java_separator">();</span></pre></li><li><p>Display the result.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">System</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">out</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">println</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_literal">&quot;\nSolved&nbsp;cloudBalance&nbsp;with&nbsp;400&nbsp;computers&nbsp;and&nbsp;1200&nbsp;processes:\n&quot;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">+</span><span class="java_plain">&nbsp;toDisplayString</span><span class="java_separator">(</span><span class="java_plain">solvedCloudBalance</span><span class="java_separator">));</span></pre></li></ul></div><p>The only non-obvious part is building the <code class="literal">Solver</code>. Let's examine that.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e675"/>2.1.5. Solver configuration</h3></div></div></div><p>Take a look at the solver configuration:</p><div class="example"><a id="d0e680"/><p class="title"><b>Example 2.2. cloudBalancingSolverConfig.xml</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_processing_instruction">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&lt;environmentMode&gt;FAST_ASSERT&lt;/environmentMode&gt;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Domain&nbsp;model&nbsp;configuration&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.cloudbalancing.domain.CloudBalance</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.cloudbalancing.domain.CloudProcess</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Score&nbsp;configuration&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">HARD_SOFT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.cloudbalancing.solver.score.CloudBalancingSimpleScoreCalculator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&lt;scoreDrl&gt;/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl&lt;/scoreDrl&gt;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Optimization&nbsp;algorithms&nbsp;configuration&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">120</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_FIT_DECREASING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_NON_DETERIORATING_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--/forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">7</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1000</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><br class="example-break"/><p>This solver configuration consists out of 3 parts:</p><div class="itemizedlist"><ul><li><p><span class="bold"><strong>Domain model configuration</strong></span>: What can Planner change? We need to make
          Planner aware of our domain classes:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.cloudbalancing.domain.CloudBalance</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.cloudbalancing.domain.CloudProcess</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><span class="bold"><strong>Score configuration</strong></span>: How should Planner optimize the planning
          variables? Since we have hard and soft constraints, we use a <code class="literal">HardSoftScore</code>. But we also
          need to tell Planner how to calculate such the score, depending on our business requirements. Further down, we
          'll look into 2 alternatives to calculate the score: using a simple Java implementation or using Drools
          DRL.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">HARD_SOFT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.cloudbalancing.solver.score.CloudBalancingSimpleScoreCalculator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&lt;scoreDrl&gt;/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl&lt;/scoreDrl&gt;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><span class="bold"><strong>Optimization algorithms configuration</strong></span>: How should Planner optimize it?
          Don't worry about this for now: this is a good default configuration that works on most planning problems. It
          will already surpass human planners and most in-house implementations. Using the Planner benchmark toolkit,
          you can tweak it to get even better results.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">120</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_FIT_DECREASING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_NON_DETERIORATING_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--/forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">7</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1000</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li></ul></div><p>Let's examine the domain model classes and the score configuration.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e714"/>2.1.6. Domain model implementation</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e717"/>2.1.6.1. The class <code class="literal">Computer</code></h4></div></div></div><p>The class <code class="literal">Computer</code> is a POJO (Plain Old Java Object), nothing special. Usually, you'll
        have more of these kind of classes.</p><div class="example"><a id="d0e727"/><p class="title"><b>Example 2.3. CloudComputer.java</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudComputer</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">...</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;cpuPower</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;memory</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;networkBandwidth</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;cost</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;getters</span>
<!--  --><br/><span class="java_separator">}</span></pre></div></div><br class="example-break"/></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e732"/>2.1.6.2. The class <code class="literal">Process</code></h4></div></div></div><p>The class <code class="literal">Process</code> is a little bit special. We need to tell Planner that it can change
        the field <code class="literal">computer</code>, so we annotate the class with <code class="literal">@PlanningEntity</code> and the
        getter <code class="literal">getComputer</code> with <code class="literal">@PlanningVariable</code>:</p><div class="example"><a id="d0e754"/><p class="title"><b>Example 2.4. CloudProcess.java</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span><!-- <br/> --><span class="java_separator">(...)</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;requiredCpuPower</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;requiredMemory</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;requiredNetworkBandwidth</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;getters</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">PlanningVariable</span><span class="java_separator">(</span><span class="java_plain">valueRangeProviderRefs&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span><span class="java_literal">&quot;computerRange&quot;</span><span class="java_separator">})</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;getComputer</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setComputer</span><span class="java_separator">(</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;computer&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_operator">************************************************************************</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Complex</span><span class="java_plain">&nbsp;methods</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_operator">************************************************************************</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre></div></div><br class="example-break"/><p>The values that Planner can choose from for the field <code class="literal">computer</code>, are retrieved from a
        method on the <code class="literal">Solution</code> implementation: <code class="literal">CloudBalance.getComputerList()</code>
        which returns a list of all computers in the current data set. We tell Planner about this by using the
        <code class="literal">valueRangeProviderRefs</code> property.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e773"/>2.1.6.3. The class <code class="literal">CloudBalance</code></h4></div></div></div><p>The class <code class="literal">CloudBalance</code> implements the <code class="filename">Solution</code> interface. It holds
        a list of all computers and processes. We need to tell Planner how to retrieve the collection of process which
        it can change, so we need to annotate the getter <code class="literal">getProcessList</code> with
        <code class="literal">@PlanningEntityCollectionProperty</code>.</p><p>The <code class="literal">CloudBalance</code> class also has a property <code class="literal">score</code> which is the
        <code class="literal">Score</code> of that <code class="literal">Solution</code> instance in it's current state:</p><div class="example"><a id="d0e806"/><p class="title"><b>Example 2.5. CloudBalance.java</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudBalance</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">...</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">HardSoftScore</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">CloudComputer</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;computerList</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">CloudProcess</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;processList</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">HardSoftScore</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">ValueRangeProvider</span><span class="java_separator">(</span><span class="java_plain">id&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;computerRange&quot;</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">CloudComputer</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getComputerList</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;computerList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">PlanningEntityCollectionProperty</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">CloudProcess</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getProcessList</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;processList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">HardSoftScore</span><span class="java_plain">&nbsp;getScore</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setScore</span><span class="java_separator">(</span><span class="java_type">HardSoftScore</span><span class="java_plain">&nbsp;score</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_operator">************************************************************************</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Complex</span><span class="java_plain">&nbsp;methods</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_operator">************************************************************************</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Collection</span><span class="java_operator">&lt;?</span><span class="java_plain">&nbsp;</span><span class="java_keyword">extends</span><span class="java_plain">&nbsp;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getProblemFacts</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;facts&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facts</span><span class="java_separator">.</span><span class="java_plain">addAll</span><span class="java_separator">(</span><span class="java_plain">computerList</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Do</span><span class="java_plain">&nbsp;not&nbsp;add&nbsp;the&nbsp;planning&nbsp;entity's&nbsp;</span><span class="java_separator">(</span><span class="java_plain">processList</span><span class="java_separator">)</span><span class="java_plain">&nbsp;because&nbsp;that&nbsp;will&nbsp;be&nbsp;done&nbsp;automatically</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;facts</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre></div></div><br class="example-break"/><p>The method <code class="literal">getProblemFacts()</code> is only needed for score calculation with Drools. It's not
        needed for the other score calculation types.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e816"/>2.1.7. Score configuration</h3></div></div></div><p>Planner will search for the <code class="literal">Solution</code> with the highest <code class="literal">Score</code>. We're
      using a <code class="literal">HardSoftScore</code>, which means Planner will look for the solution with no hard constraints
      broken (fulfill hardware requirements) and as little as possible soft constraints broken (minimize maintenance
      cost).</p><div class="mediaobject"><img src="images/Chapter-Quick_start/cloudBalanceScoreCalculation.png"/></div><p>Of course, Planner needs to be told about these domain-specific score constraints. There are several ways to
      implement such a score function:</p><div class="itemizedlist"><ul><li><p>Simple Java</p></li><li><p>Incremental Java</p></li><li><p>Drools</p></li></ul></div><p>Let's take a look at 2 different implementations:</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e847"/>2.1.7.1. Simple Java score configuration</h4></div></div></div><p>One way to define a score function is to implement the interface <code class="literal">SimpleScoreCalculator</code>
        in plain Java.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">HARD_SOFT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.cloudbalancing.solver.score.CloudBalancingSimpleScoreCalculator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Just implement the method <code class="literal">calculateScore(Solution)</code> to return a
        <code class="literal">HardSoftScore</code> instance.</p><div class="example"><a id="d0e865"/><p class="title"><b>Example 2.6. CloudBalancingSimpleScoreCalculator.java</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudBalancingSimpleScoreCalculator</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SimpleScoreCalculator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">CloudBalance</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_javadoc_comment">/**</span>
<!--  --><br/><span class="java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;A&nbsp;very&nbsp;simple&nbsp;implementation.&nbsp;The&nbsp;double&nbsp;loop&nbsp;can&nbsp;easily&nbsp;be&nbsp;removed&nbsp;by&nbsp;using&nbsp;Maps&nbsp;as&nbsp;shown&nbsp;in</span>
<!--  --><br/><span class="java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;{</span><span class="java_javadoc_tag">@link</span><span class="java_javadoc_comment">&nbsp;CloudBalancingMapBasedSimpleScoreCalculator#calculateScore(CloudBalance)}.</span>
<!--  --><br/><span class="java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">HardSoftScore</span><span class="java_plain">&nbsp;calculateScore</span><span class="java_separator">(</span><span class="java_type">CloudBalance</span><span class="java_plain">&nbsp;cloudBalance</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;hardScore&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;softScore&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;computer&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;cloudBalance</span><span class="java_separator">.</span><span class="java_plain">getComputerList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;cpuPowerUsage&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;memoryUsage&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;networkBandwidthUsage&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;used&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">false</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Calculate</span><span class="java_plain">&nbsp;usage</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;process&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;cloudBalance</span><span class="java_separator">.</span><span class="java_plain">getProcessList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">computer</span><span class="java_separator">.</span><span class="java_plain">equals</span><span class="java_separator">(</span><span class="java_plain">process</span><span class="java_separator">.</span><span class="java_plain">getComputer</span><span class="java_separator">()))</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpuPowerUsage&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;process</span><span class="java_separator">.</span><span class="java_plain">getRequiredCpuPower</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memoryUsage&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;process</span><span class="java_separator">.</span><span class="java_plain">getRequiredMemory</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;networkBandwidthUsage&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;process</span><span class="java_separator">.</span><span class="java_plain">getRequiredNetworkBandwidth</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">true</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Hard</span><span class="java_plain">&nbsp;constraints</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;cpuPowerAvailable&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">.</span><span class="java_plain">getCpuPower</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">-</span><span class="java_plain">&nbsp;cpuPowerUsage</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">cpuPowerAvailable&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hardScore&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;cpuPowerAvailable</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;memoryAvailable&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">.</span><span class="java_plain">getMemory</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">-</span><span class="java_plain">&nbsp;memoryUsage</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">memoryAvailable&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hardScore&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;memoryAvailable</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;networkBandwidthAvailable&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">.</span><span class="java_plain">getNetworkBandwidth</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">-</span><span class="java_plain">&nbsp;networkBandwidthUsage</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">networkBandwidthAvailable&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hardScore&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;networkBandwidthAvailable</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Soft</span><span class="java_plain">&nbsp;constraints</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">used</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;softScore&nbsp;</span><span class="java_operator">-=</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">.</span><span class="java_plain">getCost</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_type">HardSoftScore</span><span class="java_separator">.</span><span class="java_plain">valueOf</span><span class="java_separator">(</span><span class="java_plain">hardScore</span><span class="java_separator">,</span><span class="java_plain">&nbsp;softScore</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre></div></div><br class="example-break"/><p>Even if we optimize the code above to use <code class="literal">Map</code>s to iterate through the
        <code class="literal">processList</code> only once, <span class="bold"><strong>it is still slow</strong></span> because it doesn't
        do incremental score calculation. To fix that, either use an incremental Java score function or a Drools score
        function. Let's take a look at the latter.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e881"/>2.1.7.2. Drools score configuration</h4></div></div></div><p>To use the Drools rule engine as a score function, simply add a <code class="literal">scoreDrl</code> resource in
        the classpath:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">HARD_SOFT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>First, we want to make sure that all computers have enough CPU, RAM and network bandwidth to support all
        their processes, so we make these hard constraints:</p><div class="example"><a id="d0e893"/><p class="title"><b>Example 2.7. cloudBalancingScoreRules.drl - hard constraints</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">...

import org.optaplanner.examples.cloudbalancing.domain.CloudBalance;
import org.optaplanner.examples.cloudbalancing.domain.CloudComputer;
import org.optaplanner.examples.cloudbalancing.domain.CloudProcess;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "requiredCpuPowerTotal"
    when
        $computer : CloudComputer($cpuPower : cpuPower)
        $requiredCpuPowerTotal : Number(intValue &gt; $cpuPower) from accumulate(
            CloudProcess(
                computer == $computer,
                $requiredCpuPower : requiredCpuPower),
            sum($requiredCpuPower)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $cpuPower - $requiredCpuPowerTotal.intValue());
end

rule "requiredMemoryTotal"
    ...
end

rule "requiredNetworkBandwidthTotal"
    ...
end</pre></div></div><br class="example-break"/><p>Next, if those constraints are met, we want to minimize the maintenance cost, so we add that as a soft
        constraint:</p><div class="example"><a id="d0e900"/><p class="title"><b>Example 2.8. cloudBalancingScoreRules.drl - soft constraints</b></p><div class="example-contents"><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">// ############################################################################
// Soft constraints
// ############################################################################

rule "computerCost"
    when
        $computer : CloudComputer($cost : cost)
        exists CloudProcess(computer == $computer)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end</pre></div></div><br class="example-break"/><p>If you use the Drools rule engine for score calculation, you can integrate with other Drools technologies,
        such as decision tables (XLS or web based), the Guvnor rule repository, ...</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e907"/>2.1.8. Beyond this tutorial</h3></div></div></div><p>Now that this simple example works, try going further. Enrich the domain model and add extra constraints
      such as these:</p><div class="itemizedlist"><ul><li><p>Each <code class="literal">Process</code> belongs to a <code class="literal">Service</code>. A computer can crash, so
          processes running the same service should be assigned to different computers.</p></li><li><p>Each <code class="literal">Computer</code> is located in a <code class="literal">Building</code>. A building can burn down,
          so processes of the same services should be assigned to computers in different buildings.</p></li></ul></div></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="useCasesAndExamples"/>Chapter 3. Use cases and examples</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#examplesOverview">3.1. Examples overview</a></span></dt><dt><span class="section"><a href="#d0e1343">3.2. Basic examples</a></span></dt><dd><dl><dt><span class="section"><a href="#nQueens">3.2.1. N queens</a></span></dt><dt><span class="section"><a href="#cloudBalancing">3.2.2. Cloud balancing</a></span></dt><dt><span class="section"><a href="#tsp">3.2.3. Traveling salesman (TSP - Traveling salesman problem)</a></span></dt><dt><span class="section"><a href="#manners2009">3.2.4. Manners 2009</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e1596">3.3. Real examples</a></span></dt><dd><dl><dt><span class="section"><a href="#curriculumCourse">3.3.1. Course timetabling (ITC 2007 track 3 - Curriculum course scheduling)</a></span></dt><dt><span class="section"><a href="#machineReassignment">3.3.2. Machine reassignment (Google ROADEF 2012)</a></span></dt><dt><span class="section"><a href="#vehicleRouting">3.3.3. Vehicle routing</a></span></dt><dt><span class="section"><a href="#projectJobScheduling">3.3.4. Project job scheduling</a></span></dt><dt><span class="section"><a href="#pas">3.3.5. Hospital bed planning (PAS - Patient admission scheduling)</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e1864">3.4. Difficult examples</a></span></dt><dd><dl><dt><span class="section"><a href="#examination">3.4.1. Exam timetabling (ITC 2007 track 1 - Examination)</a></span></dt><dt><span class="section"><a href="#nurseRostering">3.4.2. Employee rostering (INRC 2010 - Nurse rostering)</a></span></dt><dt><span class="section"><a href="#travelingTournament">3.4.3. Sport scheduling (TTP - Traveling tournament problem)</a></span></dt></dl></dd></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="examplesOverview"/>3.1. Examples overview</h2></div></div></div><p>OptaPlanner has several examples. In this manual we explain OptaPlanner mainly using the n queens example. So
    it's advisable to read at least the section about that example.</p><p>The source code of all these examples is available in the distribution zip under
    <code class="filename">examples/sources</code> and also in git under
    <code class="filename">optaplanner/optaplanner-examples</code>.</p><div class="table"><a id="d0e947"/><p class="title"><b>Table 3.1. Examples overview</b></p><div class="table-contents"><table summary="Examples overview" border="1"><colgroup><col align="left"/><col align="left"/><col align="left"/><col align="left"/><col align="left"/><col align="left"/></colgroup><thead><tr><th align="left">Example</th><th align="left">Domain</th><th align="left">Entity size</th><th align="left">Value size</th><th align="left">Search space</th><th align="left">Competition?</th></tr></thead><tbody><tr><td align="left"><a class="link" href="#nQueens" title="3.2.1. N queens">N queens</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">256</code></td><td align="left">&lt;= <code class="literal">256</code></td><td align="left">&lt;= <code class="literal">10^616</code></td><td align="left">Pointless</td></tr><tr><td align="left"><a class="link" href="#cloudBalancing" title="3.2.2. Cloud balancing">Cloud balancing</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">2400</code></td><td align="left">&lt;= <code class="literal">800</code></td><td align="left">&lt;= <code class="literal">10^6967</code></td><td align="left">No</td></tr><tr><td align="left"><a class="link" href="#tsp" title="3.2.3. Traveling salesman (TSP - Traveling salesman problem)">Traveling salesman</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 chained variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">980</code></td><td align="left">&lt;= <code class="literal">980</code></td><td align="left">&lt;= <code class="literal">10^2927</code></td><td align="left">Unrealistic</td></tr><tr><td align="left"><a class="link" href="#manners2009" title="3.2.4. Manners 2009">Manners 2009</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">144</code></td><td align="left">&lt;= <code class="literal">144</code></td><td align="left">&lt;= <code class="literal">10^310</code></td><td align="left">Unrealistic</td></tr><tr><td align="left"><a class="link" href="#curriculumCourse" title="3.3.1. Course timetabling (ITC 2007 track 3 - Curriculum course scheduling)">Course timetabling</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>2 variables</p></li></ul></div></td><td align="left">&lt;= <code class="literal">434</code></td><td align="left">&lt;= 25 and &lt;= <code class="literal">20</code></td><td align="left">&lt;= <code class="literal">10^1171</code></td><td align="left">Realistic</td></tr><tr><td align="left"><a class="link" href="#machineReassignment" title="3.3.2. Machine reassignment (Google ROADEF 2012)">Machine reassignment</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">50000</code></td><td align="left">&lt;= <code class="literal">5000</code></td><td align="left">&lt;= <code class="literal">10^184948</code></td><td align="left">Nearly realistic</td></tr><tr><td align="left"><a class="link" href="#vehicleRouting" title="3.3.3. Vehicle routing">Vehicle routing</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 chained variable</p></li><li><p>1 shadow entity class</p></li><li><p>1 automatic shadow variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">134</code></td><td align="left">&lt;= <code class="literal">141</code></td><td align="left">&lt;= <code class="literal">10^285</code></td><td align="left">Unrealistic</td></tr><tr><td align="left"><a class="link" href="#vehicleRouting" title="3.3.3. Vehicle routing">Vehicle routing</a> with time windows</td><td align="left"><p>Extra on Vehicle Routing:</p><div class="itemizedlist"><ul><li><p>1 shadow variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">250</code></td><td align="left">&lt;= <code class="literal">1250</code></td><td align="left">&lt;= <code class="literal">10^3000</code></td><td align="left">Unrealistic</td></tr><tr><td align="left"><a class="link" href="#projectJobScheduling" title="3.3.4. Project job scheduling">Project job scheduling</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>2 variables</p></li><li><p>1 shadow variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">640</code></td><td align="left">&lt;= ? and &lt;= <code class="literal">?</code></td><td align="left">&lt;= ?</td><td align="left">Nearly realistic</td></tr><tr><td align="left"><a class="link" href="#pas" title="3.3.5. Hospital bed planning (PAS - Patient admission scheduling)">Hospital bed planning</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">2750</code></td><td align="left">&lt;= <code class="literal">471</code></td><td align="left">&lt;= <code class="literal">10^6851</code></td><td align="left">Realistic</td></tr><tr><td align="left"><a class="link" href="#examination" title="3.4.1. Exam timetabling (ITC 2007 track 1 - Examination)">Exam timetabling</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>2 variables</p></li></ul></div></td><td align="left">&lt;= <code class="literal">1096</code></td><td align="left">&lt;= 80 and &lt;= <code class="literal">49</code></td><td align="left">&lt;= <code class="literal">10^3374</code></td><td align="left">Realistic</td></tr><tr><td align="left"><a class="link" href="#nurseRostering" title="3.4.2. Employee rostering (INRC 2010 - Nurse rostering)">Employee rostering</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">752</code></td><td align="left">&lt;= <code class="literal">50</code></td><td align="left">&lt;= <code class="literal">10^1277</code></td><td align="left">Realistic</td></tr><tr><td align="left"><a class="link" href="#travelingTournament" title="3.4.3. Sport scheduling (TTP - Traveling tournament problem)">Sport scheduling</a></td><td align="left"><div class="itemizedlist"><ul><li><p>1 entity class</p></li><li><p>1 variable</p></li></ul></div></td><td align="left">&lt;= <code class="literal">1560</code></td><td align="left">&lt;= <code class="literal">78</code></td><td align="left">&lt;= <code class="literal">10^2951</code></td><td align="left">Unrealistic</td></tr></tbody></table></div></div><br class="table-break"/><p>A <span class="emphasis"><em>realistic competition</em></span> is <span class="bold"><strong>an official, independent
    competition</strong></span>:</p><div class="itemizedlist"><ul><li><p>that clearly defines a real-word use case</p></li><li><p>with real-world constraints</p></li><li><p>with multiple, real-world datasets</p></li><li><p>that expects reproducible results within a specific time limit on specific hardware</p></li><li><p>that has had serious participation from the academic and/or enterprise Operations Research
        community</p></li></ul></div><p>These realistic competitions provide an objective comparison of OptaPlanner with competitive software and academic
    research.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e1343"/>3.2. Basic examples</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="nQueens"/>3.2.1. N queens</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1349"/>3.2.1.1. Problem statement</h4></div></div></div><p>Place n queens on a n sized chessboard so no 2 queens can attach each other. The most common n queens
        puzzle is the 8 queens puzzle, with <span class="emphasis"><em>n = 8</em></span>:</p><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/screenshotNQueens.png"/></div><p>Constraints:</p><div class="itemizedlist"><ul><li><p>Use a chessboard of <span class="emphasis"><em>n</em></span> columns and <span class="emphasis"><em>n</em></span> rows.</p></li><li><p>Place <span class="emphasis"><em>n</em></span> queens on the chessboard.</p></li><li><p>No 2 queens can attack each other. A queen can attack any other queen on the same horizontal, vertical
            or diagonal line.</p></li></ul></div><p>This documentation heavily uses the 4 queens puzzle as the primary example.</p><p>A proposed solution could be:</p><div class="figure"><a id="d0e1385"/><div class="figure-contents"><div class="mediaobject" align="center"><img src="images/Chapter-Use_cases_and_examples/partiallySolvedNQueens04Explained.png" align="middle" alt="A wrong solution for the 4 queens puzzle"/></div></div><p class="title"><b>Figure 3.1. A wrong solution for the 4 queens puzzle</b></p></div><br class="figure-break"/><p>The above solution is wrong because queens <code class="literal">A1</code> and <code class="literal">B0</code> can attack each
        other (so can queens <code class="literal">B0</code> and <code class="literal">D0</code>). Removing queen <code class="literal">B0</code>
        would respect the "no 2 queens can attack each other" constraint, but would break the "place n queens"
        constraint.</p><p>Below is a correct solution:</p><div class="figure"><a id="d0e1410"/><div class="figure-contents"><div class="mediaobject" align="center"><img src="images/Chapter-Use_cases_and_examples/solvedNQueens04.png" align="middle" alt="A correct solution for the 4 queens puzzle"/></div></div><p class="title"><b>Figure 3.2. A correct solution for the 4 queens puzzle</b></p></div><br class="figure-break"/><p>All the constraints have been met, so the solution is correct. Note that most n queens puzzles have
        multiple correct solutions. We'll focus on finding a single correct solution for a given n, not on finding the
        number of possible correct solutions for a given n.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1418"/>3.2.1.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">4queens   has   4 queens with a search space of    256.
8queens   has   8 queens with a search space of   10^7.
16queens  has  16 queens with a search space of  10^19.
32queens  has  32 queens with a search space of  10^48.
64queens  has  64 queens with a search space of 10^115.
256queens has 256 queens with a search space of 10^616.</pre><p>The implementation of the N queens example has not been optimized because it functions as a beginner
        example. Nevertheless, it can easily handle 64 queens. With a few changes it has been shown to easily handle
        5000 queens and more.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1425"/>3.2.1.3. Domain model</h4></div></div></div><p>Use a good domain model: it will be easier to understand and solve your planning problem. This is the
        domain model for the n queens example:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Column</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;index</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters&nbsp;and&nbsp;setters</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Row</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;index</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters&nbsp;and&nbsp;setters</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Queen</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Column</span><span class="java_plain">&nbsp;column</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;row</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;getAscendingDiagonalIndex</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{...}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;getDescendingDiagonalIndex</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{...}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters&nbsp;and&nbsp;setters</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>A <code class="literal">Queen</code> instance has a <code class="literal">Column</code> (for example: 0 is column A, 1 is
        column B, ...) and a <code class="literal">Row</code> (its row, for example: 0 is row 0, 1 is row 1, ...). Based on the
        column and the row, the ascending diagonal line as well as the descending diagonal line can be calculated. The
        column and row indexes start from the upper left corner of the chessboard.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">SimpleScore</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;n</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Column</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;columnList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Row</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;rowList</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;queenList</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">SimpleScore</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters&nbsp;and&nbsp;setters</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>A single <code class="literal">NQueens</code> instance contains a list of all <code class="literal">Queen</code> instances. It
        is the <code class="literal">Solution</code> implementation which will be supplied to, solved by and retrieved from the
        Solver. Notice that in the 4 queens example, NQueens's <code class="literal">getN()</code> method will always return
        4.</p><div class="table"><a id="d0e1463"/><p class="title"><b>Table 3.2. A solution for 4 queens shown in the domain model</b></p><div class="table-contents"><table summary="A solution for 4 queens shown in the domain model" border="1"><colgroup><col/><col/><col/><col/><col/><col/></colgroup><thead><tr><th align="center">A solution</th><th align="center">Queen</th><th>columnIndex</th><th>rowIndex</th><th>ascendingDiagonalIndex (columnIndex + rowIndex)</th><th>descendingDiagonalIndex (columnIndex - rowIndex)</th></tr></thead><tbody><tr><td rowspan="4"><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/partiallySolvedNQueens04Explained.png"/></div></td><td>A1</td><td>0</td><td>1</td><td><span class="bold"><strong>1 (**)</strong></span></td><td>-1</td></tr><tr><td>B0</td><td>1</td><td><span class="bold"><strong>0 (*)</strong></span></td><td><span class="bold"><strong>1 (**)</strong></span></td><td>1</td></tr><tr><td>C2</td><td>2</td><td>2</td><td>4</td><td>0</td></tr><tr><td>D0</td><td>3</td><td><span class="bold"><strong>0 (*)</strong></span></td><td>3</td><td>3</td></tr></tbody></table></div></div><br class="table-break"/><p>When 2 queens share the same column, row or diagonal line, such as (*) and (**), they can attack each
        other.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="cloudBalancing"/>3.2.2. Cloud balancing</h3></div></div></div><p>This example is explained in <a class="link" href="#cloudBalancingTutorial" title="2.1. Cloud balancing tutorial">a tutorial</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="tsp"/>3.2.3. Traveling salesman (TSP - Traveling salesman problem)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1547"/>3.2.3.1. Problem statement</h4></div></div></div><p>Given a list of cities, find the shortest tour for a salesman that visits each city exactly once.</p><p>The problem is defined by <a class="link" href="http://en.wikipedia.org/wiki/Travelling_salesman_problem" target="">Wikipedia</a>. It is <a class="link" href="http://www.tsp.gatech.edu/" target="">one of the most intensively studied problems</a> in computational
        mathematics. Yet, in the real world, it's often only part of a planning problem, along with other constraints,
        such as employee shift rostering constraints.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1560"/>3.2.3.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">dj38     has  38 cities with a search space of   10^58.
europe40 has  40 cities with a search space of   10^62.
st70     has  70 cities with a search space of  10^126.
pcb442   has 442 cities with a search space of 10^1166.
lu980    has 980 cities with a search space of 10^2927.</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="manners2009"/>3.2.4. Manners 2009</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1568"/>3.2.4.1. Problem statement</h4></div></div></div><p>In Manners 2009, miss Manners is throwing a party again.</p><div class="itemizedlist"><ul><li><p>This time she invited 144 guests and prepared 12 round tables with 12 seats each.</p></li><li><p>Every guest should sit next to someone (left and right) of the opposite gender.</p></li><li><p>And that neighbour should have at least one hobby in common with the guest.</p></li><li><p>Also, this time there should be 2 politicians, 2 doctors, 2 socialites, 2 sports stars, 2 teachers and
            2 programmers at each table.</p></li><li><p>And the 2 politicians, 2 doctors, 2 sports stars and 2 programmers shouldn't be the same kind.</p></li></ul></div><p>Drools Expert also has the normal miss Manners examples (which is much smaller) and employs a brute force
        heuristic to solve it. OptaPlanner's implementation is far more scalable because it uses heuristics to find the
        best solution and Drools Expert to calculate the score of each solution.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1591"/>3.2.4.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">geoffrey1              has 18 jobs, 144 guests, 288 hobby practicians, 12 tables and 144 seats with a search space of 10^310.
james1WithGenderChange has 18 jobs, 144 guests, 432 hobby practicians, 12 tables and 144 seats with a search space of 10^310.</pre></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e1596"/>3.3. Real examples</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="curriculumCourse"/>3.3.1. Course timetabling (ITC 2007 track 3 - Curriculum course scheduling)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1602"/>3.3.1.1. Problem statement</h4></div></div></div><p>Schedule each lecture into a timeslot and into a room.</p><p>Hard constraints:</p><div class="itemizedlist"><ul><li><p>Teacher conflict: A teacher must not have 2 lectures in the same period.</p></li><li><p>Curriculum conflict: A curriculum must not have 2 lectures in the same period.</p></li><li><p>Room occupancy: 2 lectures must not be in the same room in the same period.</p></li><li><p>Unavailable period (specified per dataset): A specific lecture must not be assigned to a specific
            period.</p></li></ul></div><p>Soft constraints:</p><div class="itemizedlist"><ul><li><p>Room capacity: A room's capacity should not be less than the number of students in its lecture.</p></li><li><p>Minimum working days: Lectures of the same course should be spread into a minimum number of
            days.</p></li><li><p>Curriculum compactness: Lectures belonging to the same curriculum should be adjacent to each other (so
            in consecutive periods).</p></li><li><p>Room stability: Lectures of the same course should be assigned the same room.</p></li></ul></div><p>The problem is defined by <a class="link" href="http://www.cs.qub.ac.uk/itc2007/curriculmcourse/course_curriculm_index.htm" target="">the International
        Timetabling Competition 2007 track 3</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1642"/>3.3.1.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">comp01 has 24 teachers,  14 curricula,  30 courses, 160 lectures, 30 periods,  6 rooms and   53 unavailable period constraints with a search space of  10^360.
comp02 has 71 teachers,  70 curricula,  82 courses, 283 lectures, 25 periods, 16 rooms and  513 unavailable period constraints with a search space of  10^736.
comp03 has 61 teachers,  68 curricula,  72 courses, 251 lectures, 25 periods, 16 rooms and  382 unavailable period constraints with a search space of  10^653.
comp04 has 70 teachers,  57 curricula,  79 courses, 286 lectures, 25 periods, 18 rooms and  396 unavailable period constraints with a search space of  10^758.
comp05 has 47 teachers, 139 curricula,  54 courses, 152 lectures, 36 periods,  9 rooms and  771 unavailable period constraints with a search space of  10^381.
comp06 has 87 teachers,  70 curricula, 108 courses, 361 lectures, 25 periods, 18 rooms and  632 unavailable period constraints with a search space of  10^957.
comp07 has 99 teachers,  77 curricula, 131 courses, 434 lectures, 25 periods, 20 rooms and  667 unavailable period constraints with a search space of 10^1171.
comp08 has 76 teachers,  61 curricula,  86 courses, 324 lectures, 25 periods, 18 rooms and  478 unavailable period constraints with a search space of  10^859.
comp09 has 68 teachers,  75 curricula,  76 courses, 279 lectures, 25 periods, 18 rooms and  405 unavailable period constraints with a search space of  10^740.
comp10 has 88 teachers,  67 curricula, 115 courses, 370 lectures, 25 periods, 18 rooms and  694 unavailable period constraints with a search space of  10^981.
comp11 has 24 teachers,  13 curricula,  30 courses, 162 lectures, 45 periods,  5 rooms and   94 unavailable period constraints with a search space of  10^381.
comp12 has 74 teachers, 150 curricula,  88 courses, 218 lectures, 36 periods, 11 rooms and 1368 unavailable period constraints with a search space of  10^566.
comp13 has 77 teachers,  66 curricula,  82 courses, 308 lectures, 25 periods, 19 rooms and  468 unavailable period constraints with a search space of  10^824.
comp14 has 68 teachers,  60 curricula,  85 courses, 275 lectures, 25 periods, 17 rooms and  486 unavailable period constraints with a search space of  10^722.</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1647"/>3.3.1.3. Domain model</h4></div></div></div><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/curriculumCourseClassDiagram.png"/></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="machineReassignment"/>3.3.2. Machine reassignment (Google ROADEF 2012)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1656"/>3.3.2.1. Problem statement</h4></div></div></div><p>Assign each process to a machine. All processes already have an original (unoptimized) assignment. Each
        process requires an amount of each resource (such as CPU, RAM, ...). This is more complex version of the Cloud
        Balancing example.</p><p>Hard constraints:</p><div class="itemizedlist"><ul><li><p>Maximum capacity: The maximum capacity for each resource for each machine must not be exceeded.</p></li><li><p>Conflict: Processes of the same service must run on distinct machines.</p></li><li><p>Spread: Processes of the same service must be spread across locations.</p></li><li><p>Dependency: The processes of a service depending on another service must run in the neighborhood of a
            process of the other service.</p></li><li><p>Transient usage: Some resources are transient and count towards the maximum capacity of both the
            original machine as the newly assigned machine.</p></li></ul></div><p>Soft constraints:</p><div class="itemizedlist"><ul><li><p>Load: The safety capacity for each resource for each machine should not be exceeded.</p></li><li><p>Balance: Leave room for future assignments by balancing the available resources on each
            machine.</p></li><li><p>Process move cost: A process has a move cost.</p></li><li><p>Service move cost: A service has a move cost.</p></li><li><p>Machine move cost: Moving a process from machine A to machine B has another A-B specific move
            cost.</p></li></ul></div><p>The problem is defined by <a class="link" href="http://challenge.roadef.org/2012/en/" target="">the Google ROADEF/EURO
        Challenge 2012</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1702"/>3.3.2.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">model_a1_1 has  2 resources,  1 neighborhoods,   4 locations,    4 machines,    79 services,   100 processes and 1 balancePenalties with a search space of     10^60.
model_a1_2 has  4 resources,  2 neighborhoods,   4 locations,  100 machines,   980 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a1_3 has  3 resources,  5 neighborhoods,  25 locations,  100 machines,   216 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a1_4 has  3 resources, 50 neighborhoods,  50 locations,   50 machines,   142 services,  1000 processes and 1 balancePenalties with a search space of   10^1698.
model_a1_5 has  4 resources,  2 neighborhoods,   4 locations,   12 machines,   981 services,  1000 processes and 1 balancePenalties with a search space of   10^1079.
model_a2_1 has  3 resources,  1 neighborhoods,   1 locations,  100 machines,  1000 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a2_2 has 12 resources,  5 neighborhoods,  25 locations,  100 machines,   170 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a2_3 has 12 resources,  5 neighborhoods,  25 locations,  100 machines,   129 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a2_4 has 12 resources,  5 neighborhoods,  25 locations,   50 machines,   180 services,  1000 processes and 1 balancePenalties with a search space of   10^1698.
model_a2_5 has 12 resources,  5 neighborhoods,  25 locations,   50 machines,   153 services,  1000 processes and 0 balancePenalties with a search space of   10^1698.
model_b_1  has 12 resources,  5 neighborhoods,  10 locations,  100 machines,  2512 services,  5000 processes and 0 balancePenalties with a search space of  10^10000.
model_b_2  has 12 resources,  5 neighborhoods,  10 locations,  100 machines,  2462 services,  5000 processes and 1 balancePenalties with a search space of  10^10000.
model_b_3  has  6 resources,  5 neighborhoods,  10 locations,  100 machines, 15025 services, 20000 processes and 0 balancePenalties with a search space of  10^40000.
model_b_4  has  6 resources,  5 neighborhoods,  50 locations,  500 machines,  1732 services, 20000 processes and 1 balancePenalties with a search space of  10^53979.
model_b_5  has  6 resources,  5 neighborhoods,  10 locations,  100 machines, 35082 services, 40000 processes and 0 balancePenalties with a search space of  10^80000.
model_b_6  has  6 resources,  5 neighborhoods,  50 locations,  200 machines, 14680 services, 40000 processes and 1 balancePenalties with a search space of  10^92041.
model_b_7  has  6 resources,  5 neighborhoods,  50 locations, 4000 machines, 15050 services, 40000 processes and 1 balancePenalties with a search space of 10^144082.
model_b_8  has  3 resources,  5 neighborhoods,  10 locations,  100 machines, 45030 services, 50000 processes and 0 balancePenalties with a search space of 10^100000.
model_b_9  has  3 resources,  5 neighborhoods, 100 locations, 1000 machines,  4609 services, 50000 processes and 1 balancePenalties with a search space of 10^150000.
model_b_10 has  3 resources,  5 neighborhoods, 100 locations, 5000 machines,  4896 services, 50000 processes and 1 balancePenalties with a search space of 10^184948.</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="vehicleRouting"/>3.3.3. Vehicle routing</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1710"/>3.3.3.1. Problem statement</h4></div></div></div><p>Using a fleet of vehicles, pick up the objects of each customer and bring them to the depot. Each vehicle
        can service multiple customers, but it has a limited capacity.</p><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/vehicleRoutingUseCase.png"/></div><p>Besides the basic case (CVRP), there is also a variant with time windows (CVRPTW).</p><p>Hard constraints:</p><div class="itemizedlist"><ul><li><p>Vehicle capacity: a vehicle cannot carry more items then its capacity.</p></li><li><p>Time windows (only in CVRPTW):</p><div class="itemizedlist"><ul><li><p>Travel time: Traveling from one location to another takes time.</p></li><li><p>Customer service duration: a vehicle must stay at the customer for the length of the service
                duration.</p></li><li><p>Customer ready time: a vehicle may arrive before the customer's ready time, but it must wait until
                the ready time before servicing.</p></li><li><p>Customer due time: a vehicle must arrive in time, before the customer's due time.</p></li></ul></div></li></ul></div><p>Soft constraints:</p><div class="itemizedlist"><ul><li><p>Total distance: minimize the total distance driven (fuel consumption) of all vehicles.</p></li></ul></div><p>The capacitated vehicle routing problem (CVRP) and it's timewindowed variant (CVRPTW) are defined by <a class="link" href="http://neo.lcc.uma.es/vrp/" target="">the VRP web</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1753"/>3.3.3.2. Problem size</h4></div></div></div><p>CVRP instances (without time windows):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">A-n32-k5  has 1 depots,  5 vehicles and  31 customers with a search space of  10^46.
A-n33-k5  has 1 depots,  5 vehicles and  32 customers with a search space of  10^48.
A-n33-k6  has 1 depots,  6 vehicles and  32 customers with a search space of  10^48.
A-n34-k5  has 1 depots,  5 vehicles and  33 customers with a search space of  10^50.
A-n36-k5  has 1 depots,  5 vehicles and  35 customers with a search space of  10^54.
A-n37-k5  has 1 depots,  5 vehicles and  36 customers with a search space of  10^56.
A-n37-k6  has 1 depots,  6 vehicles and  36 customers with a search space of  10^56.
A-n38-k5  has 1 depots,  5 vehicles and  37 customers with a search space of  10^58.
A-n39-k5  has 1 depots,  5 vehicles and  38 customers with a search space of  10^60.
A-n39-k6  has 1 depots,  6 vehicles and  38 customers with a search space of  10^60.
A-n44-k7  has 1 depots,  7 vehicles and  43 customers with a search space of  10^70.
A-n45-k6  has 1 depots,  6 vehicles and  44 customers with a search space of  10^72.
A-n45-k7  has 1 depots,  7 vehicles and  44 customers with a search space of  10^72.
A-n46-k7  has 1 depots,  7 vehicles and  45 customers with a search space of  10^74.
A-n48-k7  has 1 depots,  7 vehicles and  47 customers with a search space of  10^78.
A-n53-k7  has 1 depots,  7 vehicles and  52 customers with a search space of  10^89.
A-n54-k7  has 1 depots,  7 vehicles and  53 customers with a search space of  10^91.
A-n55-k9  has 1 depots,  9 vehicles and  54 customers with a search space of  10^93.
A-n60-k9  has 1 depots,  9 vehicles and  59 customers with a search space of 10^104.
A-n61-k9  has 1 depots,  9 vehicles and  60 customers with a search space of 10^106.
A-n62-k8  has 1 depots,  8 vehicles and  61 customers with a search space of 10^108.
A-n63-k10 has 1 depots, 10 vehicles and  62 customers with a search space of 10^111.
A-n63-k9  has 1 depots,  9 vehicles and  62 customers with a search space of 10^111.
A-n64-k9  has 1 depots,  9 vehicles and  63 customers with a search space of 10^113.
A-n65-k9  has 1 depots,  9 vehicles and  64 customers with a search space of 10^115.
A-n69-k9  has 1 depots,  9 vehicles and  68 customers with a search space of 10^124.
A-n80-k10 has 1 depots, 10 vehicles and  79 customers with a search space of 10^149.
F-n135-k7 has 1 depots,  7 vehicles and 134 customers with a search space of 10^285.
F-n45-k4  has 1 depots,  4 vehicles and  44 customers with a search space of  10^72.
F-n72-k4  has 1 depots,  4 vehicles and  71 customers with a search space of 10^131.</pre><p>CVRPTW instances (with time windows):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">Solomon_025_C101       has 1 depots,  25 vehicles and   25 customers with a search space of   10^34.
Solomon_025_C201       has 1 depots,  25 vehicles and   25 customers with a search space of   10^34.
Solomon_025_R101       has 1 depots,  25 vehicles and   25 customers with a search space of   10^34.
Solomon_025_R201       has 1 depots,  25 vehicles and   25 customers with a search space of   10^34.
Solomon_025_RC101      has 1 depots,  25 vehicles and   25 customers with a search space of   10^34.
Solomon_025_RC201      has 1 depots,  25 vehicles and   25 customers with a search space of   10^34.
Solomon_100_C101       has 1 depots,  25 vehicles and  100 customers with a search space of  10^200.
Solomon_100_C201       has 1 depots,  25 vehicles and  100 customers with a search space of  10^200.
Solomon_100_R101       has 1 depots,  25 vehicles and  100 customers with a search space of  10^200.
Solomon_100_R201       has 1 depots,  25 vehicles and  100 customers with a search space of  10^200.
Solomon_100_RC101      has 1 depots,  25 vehicles and  100 customers with a search space of  10^200.
Solomon_100_RC201      has 1 depots,  25 vehicles and  100 customers with a search space of  10^200.
Homberger_0200_C1_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^460.
Homberger_0200_C2_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^460.
Homberger_0200_R1_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^460.
Homberger_0200_R2_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^460.
Homberger_0200_RC1_2_1 has 1 depots,  50 vehicles and  200 customers with a search space of  10^460.
Homberger_0200_RC2_2_1 has 1 depots,  50 vehicles and  200 customers with a search space of  10^460.
Homberger_0400_C1_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of 10^1040.
Homberger_0400_C2_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of 10^1040.
Homberger_0400_R1_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of 10^1040.
Homberger_0400_R2_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of 10^1040.
Homberger_0400_RC1_4_1 has 1 depots, 100 vehicles and  400 customers with a search space of 10^1040.
Homberger_0400_RC2_4_1 has 1 depots, 100 vehicles and  400 customers with a search space of 10^1040.
Homberger_0600_C1_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1666.
Homberger_0600_C2_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1666.
Homberger_0600_R1_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1666.
Homberger_0600_R2_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1666.
Homberger_0600_RC1_6_1 has 1 depots, 150 vehicles and  600 customers with a search space of 10^1666.
Homberger_0600_RC2_6_1 has 1 depots, 150 vehicles and  600 customers with a search space of 10^1666.
Homberger_0800_C1_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2322.
Homberger_0800_C2_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2322.
Homberger_0800_R1_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2322.
Homberger_0800_R2_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2322.
Homberger_0800_RC1_8_1 has 1 depots, 200 vehicles and  800 customers with a search space of 10^2322.
Homberger_0800_RC2_8_1 has 1 depots, 200 vehicles and  800 customers with a search space of 10^2322.
Homberger_1000_C110_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^3000.
Homberger_1000_C210_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^3000.
Homberger_1000_R110_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^3000.
Homberger_1000_R210_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^3000.
Homberger_1000_RC110_1 has 1 depots, 250 vehicles and 1000 customers with a search space of 10^3000.
Homberger_1000_RC210_1 has 1 depots, 250 vehicles and 1000 customers with a search space of 10^3000.</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="projectJobScheduling"/>3.3.4. Project job scheduling</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1767"/>3.3.4.1. Problem statement</h4></div></div></div><p>Schedule all jobs in time and execution mode to minimize project delays. Each job is part of a project. A
        job can be executed in different ways: each way is an execution mode that implies a different duration but also
        different resource usages. This is a form of flexible <span class="emphasis"><em>job shop scheduling</em></span>.</p><p>Hard constraints:</p><div class="itemizedlist"><ul><li><p>Job precedence: a job can only start when all its predecessor jobs are finished.</p></li><li><p>Resource capacity: do not use more resources then available.</p><div class="itemizedlist"><ul><li><p>Resources are local (shared between jobs of the same project) or global (shared between all
                jobs)</p></li><li><p>Resource are renewable (capacity available per day) or nonrenewable (capacity available for all
                days)</p></li></ul></div></li></ul></div><p>Medium constraints:</p><div class="itemizedlist"><ul><li><p>Total project delay: minimize the duration (makespan) of each project.</p></li></ul></div><p>Soft constraints:</p><div class="itemizedlist"><ul><li><p>Total makespan: minimize the duration of the whole multi-project schedule.</p></li></ul></div><p>The problem is defined by <a class="link" href="http://allserv.kahosl.be/mista2013challenge/" target="">the MISTA 2013
        challenge</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1808"/>3.3.4.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">Schedule A-1  has  2 projects,  24 jobs,   64 execution modes,  7 resources and  150 resource requirements.
Schedule A-2  has  2 projects,  44 jobs,  124 execution modes,  7 resources and  420 resource requirements.
Schedule A-3  has  2 projects,  64 jobs,  184 execution modes,  7 resources and  630 resource requirements.
Schedule A-4  has  5 projects,  60 jobs,  160 execution modes, 16 resources and  390 resource requirements.
Schedule A-5  has  5 projects, 110 jobs,  310 execution modes, 16 resources and  900 resource requirements.
Schedule A-6  has  5 projects, 160 jobs,  460 execution modes, 16 resources and 1440 resource requirements.
Schedule A-7  has 10 projects, 120 jobs,  320 execution modes, 22 resources and  900 resource requirements.
Schedule A-8  has 10 projects, 220 jobs,  620 execution modes, 22 resources and 1860 resource requirements.
Schedule A-9  has 10 projects, 320 jobs,  920 execution modes, 31 resources and 2880 resource requirements.
Schedule A-10 has 10 projects, 320 jobs,  920 execution modes, 31 resources and 2970 resource requirements.
Schedule B-1  has 10 projects, 120 jobs,  320 execution modes, 31 resources and  900 resource requirements.
Schedule B-2  has 10 projects, 220 jobs,  620 execution modes, 22 resources and 1740 resource requirements.
Schedule B-3  has 10 projects, 320 jobs,  920 execution modes, 31 resources and 3060 resource requirements.
Schedule B-4  has 15 projects, 180 jobs,  480 execution modes, 46 resources and 1530 resource requirements.
Schedule B-5  has 15 projects, 330 jobs,  930 execution modes, 46 resources and 2760 resource requirements.
Schedule B-6  has 15 projects, 480 jobs, 1380 execution modes, 46 resources and 4500 resource requirements.
Schedule B-7  has 20 projects, 240 jobs,  640 execution modes, 61 resources and 1710 resource requirements.
Schedule B-8  has 20 projects, 440 jobs, 1240 execution modes, 42 resources and 3180 resource requirements.
Schedule B-9  has 20 projects, 640 jobs, 1840 execution modes, 61 resources and 5940 resource requirements.
Schedule B-10 has 20 projects, 460 jobs, 1300 execution modes, 42 resources and 4260 resource requirements.</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="pas"/>3.3.5. Hospital bed planning (PAS - Patient admission scheduling)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1816"/>3.3.5.1. Problem statement</h4></div></div></div><p>Assign each patient (that will come to the hospital) into a bed for each night that the patient will stay
        in the hospital. Each bed belongs to a room and each room belongs to a department. The arrival and departure
        dates of the patients is fixed: only a bed needs to be assigned for each night.</p><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/patientAdmissionScheduleUseCase.png"/></div><p>Hard constraints:</p><div class="itemizedlist"><ul><li><p>2 patients must not be assigned to the same bed in the same night.</p></li><li><p>A room can have a gender limitation: only females, only males, the same gender in the same night or no
            gender limitation at all.</p></li><li><p>A department can have a minimum or maximum age.</p></li><li><p>A patient can require a room with specific equipment(s).</p></li></ul></div><p>Soft constraints:</p><div class="itemizedlist"><ul><li><p>A patient can prefer a maximum room size, for example if he/she want a single room.</p></li><li><p>A patient is best assigned to a department that specializes in his/her problem.</p></li><li><p>A patient is best assigned to a room that specializes in his/her problem.</p></li><li><p>A patient can prefer a room with specific equipment(s).</p></li></ul></div><p>The problem is defined on <a class="link" href="http://allserv.kahosl.be/~peter/pas/" target="">this webpage</a> and
        the test data comes from real world hospitals.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1859"/>3.3.5.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">testdata01 has 4 specialisms, 2 equipments, 4 departments,  98 rooms, 286 beds, 14 nights,  652 patients and  652 admissions with a search space of 10^1601.
testdata02 has 6 specialisms, 2 equipments, 6 departments, 151 rooms, 465 beds, 14 nights,  755 patients and  755 admissions with a search space of 10^2013.
testdata03 has 5 specialisms, 2 equipments, 5 departments, 131 rooms, 395 beds, 14 nights,  708 patients and  708 admissions with a search space of 10^1838.
testdata04 has 6 specialisms, 2 equipments, 6 departments, 155 rooms, 471 beds, 14 nights,  746 patients and  746 admissions with a search space of 10^1994.
testdata05 has 4 specialisms, 2 equipments, 4 departments, 102 rooms, 325 beds, 14 nights,  587 patients and  587 admissions with a search space of 10^1474.
testdata06 has 4 specialisms, 2 equipments, 4 departments, 104 rooms, 313 beds, 14 nights,  685 patients and  685 admissions with a search space of 10^1709.
testdata07 has 6 specialisms, 4 equipments, 6 departments, 162 rooms, 472 beds, 14 nights,  519 patients and  519 admissions with a search space of 10^1387.
testdata08 has 6 specialisms, 4 equipments, 6 departments, 148 rooms, 441 beds, 21 nights,  895 patients and  895 admissions with a search space of 10^2366.
testdata09 has 4 specialisms, 4 equipments, 4 departments, 105 rooms, 310 beds, 28 nights, 1400 patients and 1400 admissions with a search space of 10^3487.
testdata10 has 4 specialisms, 4 equipments, 4 departments, 104 rooms, 308 beds, 56 nights, 1575 patients and 1575 admissions with a search space of 10^3919.
testdata11 has 4 specialisms, 4 equipments, 4 departments, 107 rooms, 318 beds, 91 nights, 2514 patients and 2514 admissions with a search space of 10^6291.
testdata12 has 4 specialisms, 4 equipments, 4 departments, 105 rooms, 310 beds, 84 nights, 2750 patients and 2750 admissions with a search space of 10^6851.
testdata13 has 5 specialisms, 4 equipments, 5 departments, 125 rooms, 368 beds, 28 nights,  907 patients and 1109 admissions with a search space of 10^2845.</pre></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e1864"/>3.4. Difficult examples</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="examination"/>3.4.1. Exam timetabling (ITC 2007 track 1 - Examination)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1870"/>3.4.1.1. Problem statement</h4></div></div></div><p>Schedule each exam into a period and into a room. Multiple exams can share the same room during the same
        period.</p><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/examinationTimetablingUseCase.png"/></div><p>Hard constraints:</p><div class="itemizedlist"><ul><li><p>Exam conflict: 2 exams that share students must not occur in the same period.</p></li><li><p>Room capacity: A room's seating capacity must suffice at all times.</p></li><li><p>Period duration: A period's duration must suffice for all of its exams.</p></li><li><p>Period related hard constraints (specified per dataset):</p><div class="itemizedlist"><ul><li><p>Coincidence: 2 specified exams must use the same period (but possibly another room).</p></li><li><p>Exclusion: 2 specified exams must not use the same period.</p></li><li><p>After: A specified exam must occur in a period after another specified exam's period.</p></li></ul></div></li><li><p>Room related hard constraints (specified per dataset):</p><div class="itemizedlist"><ul><li><p>Exclusive: 1 specified exam should not have to share its room with any other exam.</p></li></ul></div></li></ul></div><p>Soft constraints (each of which has a parametrized penalty):</p><div class="itemizedlist"><ul><li><p>The same student should not have 2 exams in a row.</p></li><li><p>The same student should not have 2 exams on the same day.</p></li><li><p>Period spread: 2 exams that share students should be a number of periods apart.</p></li><li><p>Mixed durations: 2 exams that share a room should not have different durations.</p></li><li><p>Front load: Large exams should be scheduled earlier in the schedule.</p></li><li><p>Period penalty (specified per dataset): Some periods have a penalty when used.</p></li><li><p>Room penalty (specified per dataset): Some rooms have a penalty when used.</p></li></ul></div><p>It uses large test data sets of real-life universities.</p><p>The problem is defined by <a class="link" href="http://www.cs.qub.ac.uk/itc2007/examtrack/exam_track_index.htm" target="">the International Timetabling
        Competition 2007 track 1</a>. Geoffrey De Smet finished 4th in that competition with a very early version of
        OptaPlanner. Many improvements have been made since then.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1941"/>3.4.1.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">exam_comp_set1 has  7883 students,  607 exams, 54 periods,  7 rooms,  12 period constraints and  0 room constraints with a search space of 10^1564.
exam_comp_set2 has 12484 students,  870 exams, 40 periods, 49 rooms,  12 period constraints and  2 room constraints with a search space of 10^2864.
exam_comp_set3 has 16365 students,  934 exams, 36 periods, 48 rooms, 168 period constraints and 15 room constraints with a search space of 10^3023.
exam_comp_set4 has  4421 students,  273 exams, 21 periods,  1 rooms,  40 period constraints and  0 room constraints with a search space of  10^360.
exam_comp_set5 has  8719 students, 1018 exams, 42 periods,  3 rooms,  27 period constraints and  0 room constraints with a search space of 10^2138.
exam_comp_set6 has  7909 students,  242 exams, 16 periods,  8 rooms,  22 period constraints and  0 room constraints with a search space of  10^509.
exam_comp_set7 has 13795 students, 1096 exams, 80 periods, 15 rooms,  28 period constraints and  0 room constraints with a search space of 10^3374.
exam_comp_set8 has  7718 students,  598 exams, 80 periods,  8 rooms,  20 period constraints and  1 room constraints with a search space of 10^1678.</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1946"/>3.4.1.3. Domain model</h4></div></div></div><p>Below you can see the main examination domain classes:</p><div class="figure"><a id="d0e1951"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/examinationDomainDiagram.png" alt="Examination domain class diagram"/></div></div><p class="title"><b>Figure 3.3. Examination domain class diagram</b></p></div><br class="figure-break"/><p>Notice that we've split up the exam concept into an <code class="literal">Exam</code> class and a
        <code class="literal">Topic</code> class. The <code class="literal">Exam</code> instances change during solving (this is the
        planning entity class), when their period or room property changes. The <code class="literal">Topic</code>,
        <code class="literal">Period</code> and <code class="literal">Room</code> instances never change during solving (these are problem
        facts, just like some other classes).</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="nurseRostering"/>3.4.2. Employee rostering (INRC 2010 - Nurse rostering)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1980"/>3.4.2.1. Problem statement</h4></div></div></div><p>For each shift, assign a nurse to work that shift.</p><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/employeeShiftRosteringUseCase.png"/></div><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/employeeShiftRosteringHardConstraints.png"/></div><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/employeeShiftRosteringSoftConstraints.png"/></div><p>The problem is defined by <a class="link" href="http://www.kuleuven-kortrijk.be/nrpcompetition" target="">the
        International Nurse Rostering Competition 2010</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e1999"/>3.4.2.2. Problem size</h4></div></div></div><p>There are 3 dataset types:</p><div class="itemizedlist"><ul><li><p>sprint: must be solved in seconds.</p></li><li><p>medium: must be solved in minutes.</p></li><li><p>long: must be solved in hours.</p></li></ul></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">toy1          has 1 skills, 3 shiftTypes, 2 patterns, 1 contracts,  6 employees,  7 shiftDates,  35 shiftAssignments and   0 requests with a search space of   10^27.
toy2          has 1 skills, 3 shiftTypes, 3 patterns, 2 contracts, 20 employees, 28 shiftDates, 180 shiftAssignments and 140 requests with a search space of  10^234.

sprint01      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint02      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint03      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint04      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint05      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint06      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint07      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint08      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint09      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint10      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_hint01 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_hint02 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_hint03 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late01 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late02 has 1 skills, 3 shiftTypes, 4 patterns, 3 contracts, 10 employees, 28 shiftDates, 144 shiftAssignments and 139 requests with a search space of  10^144.
sprint_late03 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 160 shiftAssignments and 150 requests with a search space of  10^160.
sprint_late04 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 160 shiftAssignments and 150 requests with a search space of  10^160.
sprint_late05 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late06 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late07 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late08 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and   0 requests with a search space of  10^152.
sprint_late09 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and   0 requests with a search space of  10^152.
sprint_late10 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.

medium01      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium02      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium03      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium04      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium05      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium_hint01 has 1 skills, 4 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_hint02 has 1 skills, 4 shiftTypes, 7 patterns, 3 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_hint03 has 1 skills, 4 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_late01 has 1 skills, 4 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 424 shiftAssignments and 390 requests with a search space of  10^626.
medium_late02 has 1 skills, 4 shiftTypes, 7 patterns, 3 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_late03 has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_late04 has 1 skills, 4 shiftTypes, 7 patterns, 3 contracts, 30 employees, 28 shiftDates, 416 shiftAssignments and 390 requests with a search space of  10^614.
medium_late05 has 2 skills, 5 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 452 shiftAssignments and 390 requests with a search space of  10^667.

long01        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long02        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long03        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long04        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long05        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long_hint01   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.
long_hint02   has 2 skills, 5 shiftTypes, 7 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.
long_hint03   has 2 skills, 5 shiftTypes, 7 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.
long_late01   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late02   has 2 skills, 5 shiftTypes, 9 patterns, 4 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late03   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late04   has 2 skills, 5 shiftTypes, 9 patterns, 4 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late05   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="travelingTournament"/>3.4.3. Sport scheduling (TTP - Traveling tournament problem)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2019"/>3.4.3.1. Problem statement</h4></div></div></div><p>Schedule matches between <span class="emphasis"><em>n</em></span> teams.</p><div class="mediaobject"><img src="images/Chapter-Use_cases_and_examples/travelingTournamentUseCase.png"/></div><p>Hard constraints:</p><div class="itemizedlist"><ul><li><p>Each team plays twice against every other team: once home and once away.</p></li><li><p>Each team has exactly 1 match on each timeslot.</p></li><li><p>No team must have more than 3 consecutive home or 3 consecutive away matches.</p></li><li><p>No repeaters: no 2 consecutive matches of the same 2 opposing teams.</p></li></ul></div><p>Soft constraints:</p><div class="itemizedlist"><ul><li><p>Minimize the total distance traveled by all teams.</p></li></ul></div><p>The problem is defined on <a class="link" href="http://mat.gsia.cmu.edu/TOURN/" target="">Michael Trick's website (which
        contains the world records too)</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2056"/>3.4.3.2. Problem size</h4></div></div></div><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">1-nl04     has  6 days,  4 teams and   12 matches with a search space of    10^9.
1-nl06     has 10 days,  6 teams and   30 matches with a search space of   10^30.
1-nl08     has 14 days,  8 teams and   56 matches with a search space of   10^64.
1-nl10     has 18 days, 10 teams and   90 matches with a search space of  10^112.
1-nl12     has 22 days, 12 teams and  132 matches with a search space of  10^177.
1-nl14     has 26 days, 14 teams and  182 matches with a search space of  10^257.
1-nl16     has 30 days, 16 teams and  240 matches with a search space of  10^354.
2-bra24    has 46 days, 24 teams and  552 matches with a search space of  10^917.
3-nfl16    has 30 days, 16 teams and  240 matches with a search space of  10^354.
3-nfl18    has 34 days, 18 teams and  306 matches with a search space of  10^468.
3-nfl20    has 38 days, 20 teams and  380 matches with a search space of  10^600.
3-nfl22    has 42 days, 22 teams and  462 matches with a search space of  10^749.
3-nfl24    has 46 days, 24 teams and  552 matches with a search space of  10^917.
3-nfl26    has 50 days, 26 teams and  650 matches with a search space of 10^1104.
3-nfl28    has 54 days, 28 teams and  756 matches with a search space of 10^1309.
3-nfl30    has 58 days, 30 teams and  870 matches with a search space of 10^1534.
3-nfl32    has 62 days, 32 teams and  992 matches with a search space of 10^1778.
4-super04  has  6 days,  4 teams and   12 matches with a search space of    10^9.
4-super06  has 10 days,  6 teams and   30 matches with a search space of   10^30.
4-super08  has 14 days,  8 teams and   56 matches with a search space of   10^64.
4-super10  has 18 days, 10 teams and   90 matches with a search space of  10^112.
4-super12  has 22 days, 12 teams and  132 matches with a search space of  10^177.
4-super14  has 26 days, 14 teams and  182 matches with a search space of  10^257.
5-galaxy04 has  6 days,  4 teams and   12 matches with a search space of    10^9.
5-galaxy06 has 10 days,  6 teams and   30 matches with a search space of   10^30.
5-galaxy08 has 14 days,  8 teams and   56 matches with a search space of   10^64.
5-galaxy10 has 18 days, 10 teams and   90 matches with a search space of  10^112.
5-galaxy12 has 22 days, 12 teams and  132 matches with a search space of  10^177.
5-galaxy14 has 26 days, 14 teams and  182 matches with a search space of  10^257.
5-galaxy16 has 30 days, 16 teams and  240 matches with a search space of  10^354.
5-galaxy18 has 34 days, 18 teams and  306 matches with a search space of  10^468.
5-galaxy20 has 38 days, 20 teams and  380 matches with a search space of  10^600.
5-galaxy22 has 42 days, 22 teams and  462 matches with a search space of  10^749.
5-galaxy24 has 46 days, 24 teams and  552 matches with a search space of  10^917.
5-galaxy26 has 50 days, 26 teams and  650 matches with a search space of 10^1104.
5-galaxy28 has 54 days, 28 teams and  756 matches with a search space of 10^1309.
5-galaxy30 has 58 days, 30 teams and  870 matches with a search space of 10^1534.
5-galaxy32 has 62 days, 32 teams and  992 matches with a search space of 10^1778.
5-galaxy34 has 66 days, 34 teams and 1122 matches with a search space of 10^2041.
5-galaxy36 has 70 days, 36 teams and 1260 matches with a search space of 10^2324.
5-galaxy38 has 74 days, 38 teams and 1406 matches with a search space of 10^2628.
5-galaxy40 has 78 days, 40 teams and 1560 matches with a search space of 10^2951.</pre></div></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="plannerConfiguration"/>Chapter 4. Planner configuration</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e2064">4.1. Overview</a></span></dt><dt><span class="section"><a href="#d0e2124">4.2. Solver configuration</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e2127">4.2.1. Solver configuration by XML file</a></span></dt><dt><span class="section"><a href="#d0e2165">4.2.2. Solver configuration by Java API</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e2187">4.3. Model your planning problem</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e2190">4.3.1. Is this class a problem fact or planning entity?</a></span></dt><dt><span class="section"><a href="#problemFact">4.3.2. Problem fact</a></span></dt><dt><span class="section"><a href="#planningEntity">4.3.3. Planning entity</a></span></dt><dt><span class="section"><a href="#planningVariable">4.3.4. Planning variable</a></span></dt><dt><span class="section"><a href="#d0e2564">4.3.5. Planning value and planning value ranges</a></span></dt><dt><span class="section"><a href="#d0e2943">4.3.6. Planning problem and planning solution</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e3332">4.4. Use the Solver</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e3337">4.4.1. The Solver interface</a></span></dt><dt><span class="section"><a href="#d0e3358">4.4.2. Solving a problem</a></span></dt><dt><span class="section"><a href="#environmentMode">4.4.3. Environment mode: Are there bugs in my code?</a></span></dt><dt><span class="section"><a href="#logging">4.4.4. Logging level: What is the Solver doing?</a></span></dt></dl></dd></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e2064"/>4.1. Overview</h2></div></div></div><p>Solving a planning problem with OptaPlanner consists out of 5 steps:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p><span class="bold"><strong>Model your planning problem</strong></span> as a class that implements the interface
        <code class="literal">Solution</code>, for example the class <code class="literal">NQueens</code>.</p></li><li><p><span class="bold"><strong>Configure a <code class="literal">Solver</code></strong></span>, for example a first fit and tabu
        search solver for any <code class="literal">NQueens</code> instance.</p></li><li><p><span class="bold"><strong>Load a problem data set</strong></span> from your data layer, for example a 4 Queens
        instance. Set it as the planning problem on the <code class="literal">Solver</code> with
        <code class="literal">Solver.setPlanningProblem(...)</code>.</p></li><li><p><span class="bold"><strong>Solve it</strong></span> with <code class="literal">Solver.solve()</code>.</p></li><li><p><span class="bold"><strong>Get the best solution found</strong></span> by the <code class="literal">Solver</code> with
        <code class="literal">Solver.getBestSolution()</code>.</p></li></ol></div><div class="mediaobject"><img src="images/Chapter-Planner_configuration/inputOutputOverview.png"/></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e2124"/>4.2. Solver configuration</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e2127"/>4.2.1. Solver configuration by XML file</h3></div></div></div><p>You can build a <code class="literal">Solver</code> instance with the <code class="literal">XmlSolverFactory</code>. Configure
      it with a solver configuration XML file:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">XmlSolverFactory</span><!-- <br/> --><span class="java_plain">&nbsp;solverFactory&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">new</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">XmlSolverFactory</span><!-- <br/> --><span class="java_separator">(</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_literal">&quot;/org/optaplanner/examples/nqueens/solver/nqueensSolverConfig.xml&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solver</span><span class="java_plain">&nbsp;solver&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;solverFactory</span><span class="java_separator">.</span><span class="java_plain">buildSolver</span><span class="java_separator">();</span></pre><p>A solver configuration file looks something like this:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_processing_instruction">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Define&nbsp;the&nbsp;model&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.domain.NQueens</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.domain.Queen</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Define&nbsp;the&nbsp;score&nbsp;function&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SIMPLE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">/org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Configure&nbsp;the&nbsp;optimization&nbsp;algorithm(s)&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Notice the 3 parts in it:</p><div class="itemizedlist"><ul><li><p>Define the model</p></li><li><p>Define the score function</p></li><li><p>Configure the optimization algorithm(s)</p></li></ul></div><p>We'll explain these various parts of a configuration later in this manual.</p><p><span class="bold"><strong>OptaPlanner makes it relatively easy to switch optimization algorithm(s) just by
      changing the configuration.</strong></span> There's even a <code class="literal">Benchmark</code> utility which allows you to
      play out different configurations against each other and report the most appropriate configuration for your
      problem. You could for example play out tabu search versus simulated annealing, on 4 queens and 64 queens.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e2165"/>4.2.2. Solver configuration by Java API</h3></div></div></div><p>As an alternative to the XML file, a solver configuration can also be configured with the
      <code class="literal">SolverConfig</code> API:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">SolverConfig</span><!-- <br/> --><span class="java_plain">&nbsp;solverConfig&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">new</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SolverConfig</span><!-- <br/> --><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">setSolutionClass</span><span class="java_separator">(</span><span class="java_type">NQueens</span><span class="java_separator">.</span><span class="java_keyword">class</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">setPlanningEntityClassList</span><span class="java_separator">(</span><span class="java_type">Collections</span><span class="java_separator">.</span><span class="java_operator">&lt;</span><span class="java_type">Class</span><span class="java_operator">&lt;?&gt;&gt;</span><span class="java_plain">singletonList</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_separator">.</span><span class="java_keyword">class</span><span class="java_separator">));</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">ScoreDirectorFactoryConfig</span><span class="java_plain">&nbsp;scoreDirectorFactoryConfig&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ScoreDirectorFactoryConfig</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirectorFactoryConfig</span><span class="java_separator">.</span><span class="java_plain">setScoreDefinitionType</span><span class="java_separator">(</span><span class="java_type">ScoreDirectorFactoryConfig</span><span class="java_separator">.</span><span class="java_type">ScoreDefinitionType</span><span class="java_separator">.</span><span class="java_plain">SIMPLE</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirectorFactoryConfig</span><span class="java_separator">.</span><span class="java_plain">setScoreDrlList</span><span class="java_separator">(</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Arrays</span><span class="java_separator">.</span><span class="java_plain">asList</span><span class="java_separator">(</span><span class="java_literal">&quot;/org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl&quot;</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">setScoreDirectorFactoryConfig</span><span class="java_separator">(</span><span class="java_plain">scoreDirectorFactoryConfig</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">TerminationConfig</span><span class="java_plain">&nbsp;terminationConfig&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">TerminationConfig</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">setTerminationConfig</span><span class="java_separator">(</span><span class="java_plain">terminationConfig</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">SolverPhaseConfig</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;solverPhaseConfigList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">SolverPhaseConfig</span><span class="java_operator">&gt;</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">ConstructionHeuristicSolverPhaseConfig</span><span class="java_plain">&nbsp;constructionHeuristicSolverPhaseConfig</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ConstructionHeuristicSolverPhaseConfig</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverPhaseConfigList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">constructionHeuristicSolverPhaseConfig</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">LocalSearchSolverPhaseConfig</span><span class="java_plain">&nbsp;localSearchSolverPhaseConfig&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">LocalSearchSolverPhaseConfig</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverPhaseConfigList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">localSearchSolverPhaseConfig</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">setSolverPhaseConfigList</span><span class="java_separator">(</span><span class="java_plain">solverPhaseConfigList</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solver</span><span class="java_plain">&nbsp;solver&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">buildSolver</span><span class="java_separator">();</span></pre><p><span class="bold"><strong>It is highly recommended to configure by XML file instead of this API.</strong></span> To
      dynamically configure a value at runtime, use the XML file as a template and extract the
      <code class="literal">SolverConfig</code> class with <code class="literal">getSolverConfig()</code> to configure the dynamic value at
      runtime:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">XmlSolverFactory</span><!-- <br/> --><span class="java_plain">&nbsp;solverFactory&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">new</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">XmlSolverFactory</span><!-- <br/> --><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_literal">&quot;/org/optaplanner/examples/nqueens/solver/nqueensSolverConfig.xml&quot;</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">SolverConfig</span><span class="java_plain">&nbsp;solverConfig&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;solverFactory</span><span class="java_separator">.</span><span class="java_plain">getSolverConfig</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">getTerminationConfig</span><span class="java_separator">().</span><span class="java_plain">setMaximumMinutesSpend</span><span class="java_separator">(</span><span class="java_plain">userInput</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solver</span><span class="java_plain">&nbsp;solver&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;solverConfig</span><span class="java_separator">.</span><span class="java_plain">buildSolver</span><span class="java_separator">();</span></pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e2187"/>4.3. Model your planning problem</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e2190"/>4.3.1. Is this class a problem fact or planning entity?</h3></div></div></div><p>Look at a dataset of your planning problem. You 'll recognize domain classes in there, each of which is one
      of these:</p><div class="itemizedlist"><ul><li><p>A unrelated class: not used by any of the score constraints. From a planning standpoint, this data is
          obsolete.</p></li><li><p>A <span class="bold"><strong>problem fact</strong></span> class: used by the score constraints, but does NOT
          change during planning (as long as the problem stays the same). For example: <code class="literal">Bed</code>,
          <code class="literal">Room</code>, <code class="literal">Shift</code>, <code class="literal">Employee</code>, <code class="literal">Topic</code>,
          <code class="literal">Period</code>, ...</p></li><li><p>A <span class="bold"><strong>planning entity</strong></span> class: used by the score constraints and changes
          during planning. For example: <code class="literal">BedDesignation</code>, <code class="literal">ShiftAssignment</code>,
          <code class="literal">Exam</code>, ...</p></li></ul></div><p>Ask yourself: <span class="emphasis"><em>What class changes during planning?</em></span> <span class="emphasis"><em>Which class has variables
      that I want the <code class="literal">Solver</code> to change for me?</em></span> That class is a planning entity. Most use
      cases have only 1 planning entity class.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>In <a class="link" href="#realTimePlanning" title="14.4. Real-time planning (event based planning)">real-time planning</a>, problem facts can change during planning,
        because the problem itself changes. However, that doesn't make them planning entities.</p></div><p>A good model can greatly improve the success of your planning implementation. For inspiration, take a look
      at how the examples modeled their domain:</p><div class="mediaobject"><img src="images/Chapter-Planner_configuration/entityVariableAndValueExamples.png"/></div><p>When in doubt, it's usually the many side of a many to one relationship that is the planning entity. For
      example in employee rostering, the planning entity class is <code class="literal">ShiftAssignment</code>, not
      <code class="literal">Employee</code>. Vehicle routing is special, because it uses a <a class="link" href="#chainedPlanningVariable" title="4.3.5.4. Chained planning variable">chained planning variable</a>.</p><p><span class="bold"><strong>In OptaPlanner all problems facts and planning entities are plain old JavaBeans
      (POJO's).</strong></span> You can load them from a database (JDBC/JPA/JDO), an XML file, a data repository, a noSQL
      cloud, ...: OptaPlanner doesn't care.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="problemFact"/>4.3.2. Problem fact</h3></div></div></div><p>A problem fact is any JavaBean (POJO) with getters that does not change during planning. Implementing the
      interface <code class="literal">Serializable</code> is recommended (but not required). For example in n queens, the columns
      and rows are problem facts:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Column</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Serializable</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;index</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Row</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Serializable</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;index</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>A problem fact can reference other problem facts of course:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Course</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Serializable</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">String</span><span class="java_plain">&nbsp;code</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Teacher</span><span class="java_plain">&nbsp;teacher</span><span class="java_separator">;</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Other</span><span class="java_plain">&nbsp;problem&nbsp;fact</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;lectureSize</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;minWorkingDaySize</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Curriculum</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;curriculumList</span><span class="java_separator">;</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Other</span><span class="java_plain">&nbsp;problem&nbsp;facts</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;studentSize</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>A problem fact class does <span class="emphasis"><em>not</em></span> require any Planner specific code. For example, you can
      reuse your domain classes, which might have JPA annotations.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Generally, better designed domain classes lead to simpler and more efficient score constraints. Therefore,
        when dealing with a messy legacy system, it can sometimes be worth it to convert the messy domain set into a
        planner specific POJO set first. For example: if your domain model has 2 <code class="literal">Teacher</code> instances
        for the same teacher that teaches at 2 different departments, it's hard to write a correct score constraint that
        constrains a teacher's spare time.</p><p>Alternatively, you can sometimes also introduce <a class="link" href="#cachedProblemFact" title="4.3.6.5. Cached problem fact"><span class="emphasis"><em>a cached
        problem fact</em></span></a> to enrich the domain model for planning only.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="planningEntity"/>4.3.3. Planning entity</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2311"/>4.3.3.1. Planning entity annotation</h4></div></div></div><p>A planning entity is a JavaBean (POJO) that changes during solving, for example a <code class="literal">Queen</code>
        that changes to another row. A planning problem has multiple planning entities, for example for a single n
        queens problem, each <code class="literal">Queen</code> is a planning entity. But there's usually only 1 planning entity
        class, for example the <code class="literal">Queen</code> class.</p><p>A planning entity class needs to be annotated with the <code class="literal">@PlanningEntity</code>
        annotation.</p><p>Each planning entity class has 1 or more <span class="emphasis"><em>planning variables</em></span>. It usually also has 1 or
        more <span class="emphasis"><em>defining</em></span> properties. For example in n queens, a <code class="literal">Queen</code> is defined by
        its <code class="literal">Column</code> and has a planning variable <code class="literal">Row</code>. This means that a Queen's
        column never changes during solving, while its row does change.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Column</span><span class="java_plain">&nbsp;column</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Planning</span><span class="java_plain">&nbsp;variables</span><span class="java_operator">:</span><span class="java_plain">&nbsp;changes&nbsp;during&nbsp;planning</span><span class="java_separator">,</span><span class="java_plain">&nbsp;between&nbsp;score&nbsp;calculations</span><span class="java_separator">.</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;row</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;getters&nbsp;and&nbsp;setters</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>A planning entity class can have multiple planning variables. For example, a <code class="literal">Lecture</code> is
        defined by its <code class="literal">Course</code> and its index in that course (because 1 course has multiple lectures).
        Each <code class="literal">Lecture</code> needs to be scheduled into a <code class="literal">Period</code> and a
        <code class="literal">Room</code> so it has 2 planning variables (period and room). For example: the course Mathematics
        has 8 lectures per week, of which the first lecture is Monday morning at 08:00 in room 212.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">Lecture</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Course</span><span class="java_plain">&nbsp;course</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;lectureIndexInCourse</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Planning</span><span class="java_plain">&nbsp;variables</span><span class="java_operator">:</span><span class="java_plain">&nbsp;changes&nbsp;during&nbsp;planning</span><span class="java_separator">,</span><span class="java_plain">&nbsp;between&nbsp;score&nbsp;calculations</span><span class="java_separator">.</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Period</span><span class="java_plain">&nbsp;period</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Room</span><span class="java_plain">&nbsp;room</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>The solver configuration also needs to be made aware of each planning entity class:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_plain">solver</span><!-- <br/> --><span class="java_operator">&gt;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">planningEntityClass</span><span class="java_operator">&gt;</span><span class="java_plain">org</span><span class="java_separator">.</span><span class="java_plain">optaplanner</span><span class="java_separator">.</span><span class="java_plain">examples</span><span class="java_separator">.</span><span class="java_plain">nqueens</span><span class="java_separator">.</span><span class="java_plain">domain</span><span class="java_separator">.</span><span class="java_type">Queen</span><span class="java_operator">&lt;/</span><span class="java_plain">planningEntityClass</span><span class="java_operator">&gt;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_operator">&lt;/</span><span class="java_plain">solver</span><span class="java_operator">&gt;</span></pre><p>Some uses cases have multiple planning entity classes. For example: route freight and trains into railway
        network arcs, where each freight can use multiple trains over its journey and each train can carry multiple
        freights per arc. Having multiple planning entity classes directly raises the implementation complexity of your
        use case.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p><span class="emphasis"><em>Do not create unnecessary planning entity classes.</em></span> This leads to difficult
          <code class="literal">Move</code> implementations and slower score calculation.</p><p>For example, do not create a planning entity class to hold the total free time of a teacher, which needs
          to be kept up to date as the <code class="literal">Lecture</code> planning entities change. Instead, calculate the free
          time in the score constraints and put the result per teacher into a logically inserted score object.</p><p>If historic data needs to be considered too, then create problem fact to hold the historic data up to,
          but <span class="emphasis"><em>not including</em></span>, the planning window (so it doesn't change when a planning entity
          changes) and let the score constraints take it into account.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="planningEntityDifficulty"/>4.3.3.2. Planning entity difficulty</h4></div></div></div><p>Some optimization algorithms work more efficiently if they have an estimation of which planning entities
        are more difficult to plan. For example: in bin packing bigger items are harder to fit, in course scheduling
        lectures with more students are more difficult to schedule and in n queens the middle queens are more difficult
        to fit on the board.</p><p>Therefore, you can set a <code class="literal">difficultyComparatorClass</code> to the
        <code class="literal">@PlanningEntity</code> annotation:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">difficultyComparatorClass&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudProcessDifficultyComparator</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudProcessDifficultyComparator</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Comparator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">CloudProcess</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;compare</span><span class="java_separator">(</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;a</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;b</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">CompareToBuilder</span><span class="java_separator">()</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">a</span><span class="java_separator">.</span><span class="java_plain">getRequiredMultiplicand</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;b</span><span class="java_separator">.</span><span class="java_plain">getRequiredMultiplicand</span><span class="java_separator">())</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">a</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;b</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">())</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">toComparison</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Alternatively, you can also set a <code class="literal">difficultyWeightFactoryClass</code> to the
        <code class="literal">@PlanningEntity</code> annotation, so you have access to the rest of the problem facts from the
        <code class="literal">Solution</code> too:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">difficultyWeightFactoryClass&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">QueenDifficultyWeightFactory</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>See <a class="link" href="#sortedSelection" title="7.2.5. Sorted selection">Sorted Selection</a> for more information.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>Difficulty should be implemented ascending: easy entities are lower, difficult entities are higher. For
          example in bin packing: small item &lt; medium item &lt; big item.</p><p>Even though some algorithms start with the more difficult entities first, they just reverse the
          ordering.</p></div><p><span class="emphasis"><em>None of the current planning variable state should be used to compare planning entity
        difficult.</em></span> During construction heuristics, those variables are likely to be <code class="literal">null</code>
        anyway. For example, a <code class="literal">Queen</code>'s <code class="literal">row</code> variable should not be used.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="planningVariable"/>4.3.4. Planning variable</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2448"/>4.3.4.1. Planning variable annotation</h4></div></div></div><p>A planning variable is a property (including getter and setter) on a planning entity. It points to a
        planning value, which changes during planning. For example, a <code class="literal">Queen</code>'s <code class="literal">row</code>
        property is a planning variable. Note that even though a <code class="literal">Queen</code>'s <code class="literal">row</code>
        property changes to another <code class="literal">Row</code> during planning, no <code class="literal">Row</code> instance itself is
        changed.</p><p>A planning variable getter needs to be annotated with the <code class="literal">@PlanningVariable</code> annotation,
        which needs a non-empty <code class="literal">valueRangeProviderRefs</code> property.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;row</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">PlanningVariable</span><span class="java_separator">(</span><span class="java_plain">valueRangeProviderRefs&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span><span class="java_literal">&quot;rowRange&quot;</span><span class="java_separator">})</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;getRow</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;row</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setRow</span><span class="java_separator">(</span><span class="java_type">Row</span><span class="java_plain">&nbsp;row</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">row&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;row</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>The <code class="literal">valueRangeProviderRefs</code> property defines what are the possible planning values for
        this planning variable. It references 1 or more <code class="literal">@ValueRangeProvider</code>
        <code class="literal">id</code>'s.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="nullablePlanningVariable"/>4.3.4.2. Nullable planning variable</h4></div></div></div><p>By default, an initialized planning variable cannot be <code class="literal">null</code>, so an initialized solution
        will never use <code class="literal">null</code> for any of its planning variables. In an over-constrained use case, this
        can be contra productive. For example: in task assignment with too many tasks for the workforce, we would rather
        leave low priority tasks unassigned instead of assigning them to an overloaded worker.</p><p>To allow an initialized planning variable to be <code class="literal">null</code>, set <code class="literal">nullable</code>
        to <code class="literal">true</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(...,</span><!-- <br/> --><span class="java_plain">&nbsp;nullable&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">true</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Worker</span><span class="java_plain">&nbsp;getWorker</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;worker</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>Planner will automatically add the value <code class="literal">null</code> to the value range. There is no need to
          add <code class="literal">null</code> in a collection used by a <code class="literal">ValueRangeProvider</code>.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Using a nullable planning variable implies that your score calculation is responsible for punishing (or
          even rewarding) variables with a null value.</p></div><p><a class="link" href="#repeatedPlanning" title="Chapter 14. Repeated planning">Repeated planning</a> (especially <a class="link" href="#realTimePlanning" title="14.4. Real-time planning (event based planning)">real-time planning</a>) does not mix well with a nullable planning variable: every
        time the Solver starts or a problem fact change is made, the construction heuristics will try to initialize all
        the null variables again, which can be a huge waste of time. One way to deal with this, is to change when a
        planning entity should be reinitialized with an <code class="literal">reinitializeVariableEntityFilter</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(...,</span><!-- <br/> --><span class="java_plain">&nbsp;nullable&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">true</span><!-- <br/> --><span class="java_separator">,</span><!-- <br/> --><span class="java_plain">&nbsp;reinitializeVariableEntityFilter&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">ReinitializeTaskFilter</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Worker</span><span class="java_plain">&nbsp;getWorker</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;worker</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2543"/>4.3.4.3. When is a planning variable considered initialized?</h4></div></div></div><p>A planning variable is considered initialized if its value is not <code class="literal">null</code> or if the
        variable is <code class="literal">nullable</code>. So a nullable variable is always considered initialized, even when a
        custom <code class="literal">reinitializeVariableEntityFilter</code> triggers a reinitialization during construction
        heuristics.</p><p>A planning entity is initialized if all of its planning variables are initialized.</p><p>A <code class="literal">Solution</code> is initialized if all of its planning entities are initialized.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e2564"/>4.3.5. Planning value and planning value ranges</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2567"/>4.3.5.1. Planning value</h4></div></div></div><p>A planning value is a possible value for a planning variable. Usually, a planning value is a problem fact,
        but it can also be any object, for example a double. It can even be another planning entity or even a interface
        implemented by a planning entity and a problem fact.</p><p>A planning value range is the set of possible planning values for a planning variable. This set can be a
        discrete (for example row <code class="literal">1</code>, <code class="literal">2</code>, <code class="literal">3</code> or
        <code class="literal">4</code>) or continuous (for example any <code class="literal">double</code> between <code class="literal">0.0</code>
        and <code class="literal">1.0</code>).</p><p>There are several ways to define the value range of a planning variable with the
        <code class="literal">@ValueRangeProvider</code> annotation. A <code class="literal">@ValueRangeProvider</code> annotation always
        has a property <code class="literal">id</code>, which is referenced by the <code class="literal">@PlanningVariable</code>'s
        property <code class="literal">valueRangeProviderRefs</code>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2612"/>4.3.5.2. Planning value range provider</h4></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h5 class="title"><a id="valueRangeProviderOnSolution"/>4.3.5.2.1. <code class="literal">ValueRangeProvider</code> on a <code class="literal">Solution</code></h5></div></div></div><p>All instances of the same planning entity class share the same set of possible planning values for that
          planning variable. This is the most common way to configure a value range.</p><p>The <code class="literal">Solution</code> implementation has method which returns a
          <code class="literal">Collection</code>. Any value from that <code class="literal">Collection</code> is a possible planning value
          for this planning variable.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">valueRangeProviderRefs&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span><!-- <br/> --><span class="java_literal">&quot;rowRange&quot;</span><!-- <br/> --><span class="java_separator">})</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;getRow</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;row</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningSolution</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;</span><span class="java_keyword">implements</span><span class="java_plain">&nbsp;</span><span class="java_type">Solution</span><span class="java_operator">&lt;</span><span class="java_type">SimpleScore</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">ValueRangeProvider</span><span class="java_separator">(</span><span class="java_plain">id&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;rowRange&quot;</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Row</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getRowList</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;rowList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>That <code class="literal">Collection</code> must not contain the value <code class="literal">null</code>, even for a <a class="link" href="#nullablePlanningVariable" title="4.3.4.2. Nullable planning variable">nullable planning variable</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h5 class="title"><a id="valueRangeProviderOnPlanningEntity"/>4.3.5.2.2. <code class="literal">ValueRangeProvider</code> on a planning entity</h5></div></div></div><p>Each planning entity has its own set of possible planning values for a planning variable. For example,
          if a teacher can <span class="bold"><strong>never</strong></span> teach in a room that does not belong to his
          department, lectures of that teacher can limit their room value range to the rooms of his department.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">valueRangeProviderRefs&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span><!-- <br/> --><span class="java_literal">&quot;possibleRoomRange&quot;</span><!-- <br/> --><span class="java_separator">})</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Room</span><span class="java_plain">&nbsp;getRoom</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;room</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">ValueRangeProvider</span><span class="java_separator">(</span><span class="java_plain">id&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;possibleRoomRange&quot;</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Room</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getPossibleRoomList</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;getCourse</span><span class="java_separator">().</span><span class="java_plain">getTeacher</span><span class="java_separator">().</span><span class="java_plain">getPossibleRoomList</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>Never use this to enforce a soft constraint (or even a hard constraint when the problem might not have a
          feasible solution). For example: <span class="emphasis"><em>Unless there is no other way</em></span>, a teacher can not teach in
          a room that does not belong to his department. In this case, the teacher should <span class="emphasis"><em>not</em></span> be
          limited in his room value range (because sometimes there is no other way).</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>By limiting the value range specifically of 1 planning entity, you are effectively creating a
            <span class="emphasis"><em>build-in hard constraint</em></span>. This can be a very good thing, as the number of possible
            solutions is severely lowered. But this can also be a bad thing because it takes away the freedom of the
            optimization algorithms to temporarily break that constraint in order to escape a local optima.</p></div><p>A planning entity should <span class="emphasis"><em>not</em></span> use other planning entities to determinate its value
          range. That would only try to make it solve the planning problem itself and interfere with the optimization
          algorithms.</p><p>This value range is not (yet) compatible with a <a class="link" href="#chainedPlanningVariable" title="4.3.5.4. Chained planning variable">chained</a>
          variable.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h5 class="title"><a id="d0e2686"/>4.3.5.2.3. Combining ValueRangeProviders</h5></div></div></div><p>Value range providers can be combined, for example:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">valueRangeProviderRefs&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span><!-- <br/> --><span class="java_literal">&quot;companyCarRange&quot;</span><!-- <br/> --><span class="java_separator">,</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">&quot;personalCarRange&quot;</span><!-- <br/> --><span class="java_separator">})</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Car</span><span class="java_plain">&nbsp;getCar</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;car</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">ValueRangeProvider</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">id&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">&quot;companyCarRange&quot;</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">CompanyCar</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getCompanyCarList</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;companyCarList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">ValueRangeProvider</span><span class="java_separator">(</span><span class="java_plain">id&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;personalCarRange&quot;</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">PersonalCar</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getPersonalCarList</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;personalCarList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="planningValueStrength"/>4.3.5.3. Planning value strength</h4></div></div></div><p>Some optimization algorithms work more efficiently if they have an estimation of which planning values are
        stronger, which means they are more likely to satisfy a planning entity. For example: in bin packing bigger
        containers are more likely to fit an item and in course scheduling bigger rooms are less likely to break the
        student capacity constraint.</p><p>Therefore, you can set a <code class="literal">strengthComparatorClass</code> to the
        <code class="literal">@PlanningVariable</code> annotation:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(...,</span><!-- <br/> --><span class="java_plain">&nbsp;strengthComparatorClass&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudComputerStrengthComparator</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;getComputer</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudComputerStrengthComparator</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Comparator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">CloudComputer</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;compare</span><span class="java_separator">(</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;a</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;b</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">CompareToBuilder</span><span class="java_separator">()</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">a</span><span class="java_separator">.</span><span class="java_plain">getMultiplicand</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;b</span><span class="java_separator">.</span><span class="java_plain">getMultiplicand</span><span class="java_separator">())</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">b</span><span class="java_separator">.</span><span class="java_plain">getCost</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;a</span><span class="java_separator">.</span><span class="java_plain">getCost</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Descending</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">but&nbsp;</span><span class="java_keyword">this</span><span class="java_plain">&nbsp;is&nbsp;debatable</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">a</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;b</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">())</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">toComparison</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>If you have multiple planning value classes in the <span class="emphasis"><em>same</em></span> value range, the
          <code class="literal">strengthComparatorClass</code> needs to implement a <code class="literal">Comparator</code> of a common
          superclass (for example <code class="literal">Comparator&lt;Object&gt;</code>) and be able to handle comparing instances
          of those different classes.</p></div><p>Alternatively, you can also set a <code class="literal">strengthWeightFactoryClass</code> to the
        <code class="literal">@PlanningVariable</code> annotation, so you have access to the rest of the problem facts from the
        solution too:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(...,</span><!-- <br/> --><span class="java_plain">&nbsp;strengthWeightFactoryClass&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">RowStrengthWeightFactory</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;getRow</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>See <a class="link" href="#sortedSelection" title="7.2.5. Sorted selection">Sorted Selection</a> for more information.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>Strength should be implemented ascending: weaker values are lower, stronger values are higher. For
          example in bin packing: small container &lt; medium container &lt; big container.</p></div><p><span class="emphasis"><em>None of the current planning variable state in any of the planning entities should be used to
        compare planning values.</em></span> During construction heuristics, those variables are likely to be
        <code class="literal">null</code> anyway. For example, none of the <code class="literal">row</code> variables of any
        <code class="literal">Queen</code> may be used to determine the strength of a <code class="literal">Row</code>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="chainedPlanningVariable"/>4.3.5.4. Chained planning variable</h4></div></div></div><p>Some use cases, such as TSP and Vehicle Routing, require <span class="emphasis"><em>chaining</em></span>. This means the
        planning entities point to each other and form a chain.</p><p>A planning variable that is chained either:</p><div class="itemizedlist"><ul><li><p>Directly points to a planning fact, which is called an <span class="emphasis"><em>anchor</em></span>.</p></li><li><p>Points to another planning entity with the same planning variable, which recursively points to an
            anchor.</p></li></ul></div><p>Here are some example of valid and invalid chains:</p><div class="mediaobject"><img src="images/Chapter-Planner_configuration/chainPrinciples.png"/></div><p><span class="bold"><strong>Every initialized planning entity is part of an open-ended chain that begins from an
        anchor.</strong></span> A valid model means that:</p><div class="itemizedlist"><ul><li><p>A chain is never a loop. The tail is always open.</p></li><li><p>Every chain always has exactly 1 anchor. The anchor is a problem fact, never a planning entity.</p></li><li><p>A chain is never a tree, it is always a line. Every anchor or planning entity has at most 1 trailing
            planning entity.</p></li><li><p>Every initialized planning entity is part of a chain.</p></li><li><p>An anchor with no planning entities pointing to it, is also considered a chain.</p></li></ul></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>A planning problem instance given to the <code class="literal">Solver</code> must be valid.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>If your constraints dictate a closed chain, model it as an open-ended chain (which is easier to persist
          in a database) and implement a score constraint for the last entity back to the anchor.</p></div><p>The optimization algorithms and build-in <code class="literal">Move</code>'s do chain correction to guarantee that
        the model stays valid:</p><div class="mediaobject"><img src="images/Chapter-Planner_configuration/chainCorrection.png"/></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>A custom <code class="literal">Move</code> implementation must leave the model in a valid state.</p></div><p>For example, in TSP the anchor is a <code class="literal">Domicile</code> (in vehicle routing it is
        <code class="literal">Vehicle</code>):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Domicile</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">...</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Standstill</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">City</span><span class="java_plain">&nbsp;getCity</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{...}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>The anchor (which is a problem fact) and the planning entity implement a common interface, for example
        TSP's <code class="literal">Standstill</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Standstill</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">City</span><span class="java_plain">&nbsp;getCity</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>That interface is the return type of the planning variable. Furthermore, the planning variable is chained.
        For example TSP's <code class="literal">Visit</code> (in vehicle routing it is <code class="literal">Customer</code>):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">Visit</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;</span><span class="java_keyword">implements</span><span class="java_plain">&nbsp;</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">City</span><span class="java_plain">&nbsp;getCity</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{...}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">PlanningVariable</span><span class="java_separator">(</span><span class="java_plain">chained&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">true</span><span class="java_separator">,</span><span class="java_plain">&nbsp;valueRangeProviderRefs&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span><span class="java_literal">&quot;domicileRange&quot;</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;visitRange&quot;</span><span class="java_separator">})</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;getPreviousStandstill</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;previousStandstill</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setPreviousStandstill</span><span class="java_separator">(</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;previousStandstill</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">previousStandstill&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;previousStandstill</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Notice how 2 value range providers are usually combined:</p><div class="itemizedlist"><ul><li><p>The value range provider which holds the anchors, for example <code class="literal">domicileList</code>.</p></li><li><p>The value range provider which holds the initialized planning entities, for example
            <code class="literal">visitList</code>.</p></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="bidirectionalVariable"/>4.3.5.5. Bi-directional variable</h4></div></div></div><p>2 variables are bi-directional if their instances always point to each other (unless they point to null).
        So if A references B, then B references A.</p><div class="mediaobject"><img src="images/Chapter-Planner_configuration/bidirectionalVariable.png"/></div><p><code class="literal">To map a bi-directional relationship between 2 planning variables, annotate the master side as a
        normal (= genuine) planning variable:</code></p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">Customer</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">PlanningVariable</span><span class="java_separator">(</span><span class="java_plain">chained&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">true</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_separator">...)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;getPreviousStandstill</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;previousStandstill</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setPreviousStandstill</span><span class="java_separator">(</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;previousStandstill</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{...}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>And then annotate the other side as a <code class="literal">@PlanningVariable</code> with only a
        <code class="literal">mappedBy</code> annotation (and no <code class="literal">valueRangeProviderRefs</code>).</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">interface</span><span class="java_plain">&nbsp;</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><span class="java_type">PlanningVariable</span><span class="java_separator">(</span><span class="java_plain">mappedBy&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;previousStandstill&quot;</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Customer</span><span class="java_plain">&nbsp;getNextCustomer</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setNextCustomer</span><span class="java_separator">(</span><span class="java_type">Customer</span><span class="java_plain">&nbsp;nextCustomer</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>The <code class="literal">mappedBy</code> variable is a form of a shadow variable: Planner uses a build-in
        <code class="literal">PlanningVariableListener</code> to update its state.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="planningVariableListener"/>4.3.5.6. Planning variable listener that updates shadow variables</h4></div></div></div><p>A shadow variable is a variables who's correct value can be deduced from the state of the genuine planning
        variables. Even though such a variable violates the principle of normalization by definition, in some use cases
        it can be very practical to use a shadow variable. For example in vehicle routing with time windows: the arrival
        time at a customer for a vehicle can be calculated based on the previously visited customers of that vehicle
        (and the known travel times between 2 locations).</p><div class="mediaobject"><img src="images/Chapter-Planner_configuration/planningVariableListener.png"/></div><p>To use custom <code class="literal">PlanningVariableListener</code>, implement the interface and annotate it on the
        genuine planning variable(s) that trigger changes in the shadow variable(s):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;@</span><!-- <br/> --><span class="java_type">PlanningVariable</span><!-- <br/> --><span class="java_separator">(...,</span><!-- <br/> --><span class="java_plain">&nbsp;variableListenerClasses&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span><!-- <br/> --><span class="java_type">VehicleUpdatingVariableListener</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">,</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">ArrivalTimeUpdatingVariableListener</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">})</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;getPreviousStandstill</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;previousStandstill</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>For example, the VehicleUpdatingVariableListener assures that every <code class="literal">Customer</code> in a chain
        has the same <code class="literal">Vehicle</code>, namely the chain's anchor.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">VehicleUpdatingVariableListener</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">PlanningVariableListener</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">Customer</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterEntityAdded</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">Customer</span><span class="java_plain">&nbsp;customer</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateVehicle</span><span class="java_separator">(</span><span class="java_plain">scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;customer</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterVariableChanged</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">Customer</span><span class="java_plain">&nbsp;customer</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateVehicle</span><span class="java_separator">(</span><span class="java_plain">scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;customer</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">protected</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;updateVehicle</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">Customer</span><span class="java_plain">&nbsp;sourceCustomer</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Standstill</span><span class="java_plain">&nbsp;previousStandstill&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;sourceCustomer</span><span class="java_separator">.</span><span class="java_plain">getPreviousStandstill</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Vehicle</span><span class="java_plain">&nbsp;vehicle&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;previousStandstill&nbsp;</span><span class="java_operator">==</span><span class="java_plain">&nbsp;</span><span class="java_literal">null</span><span class="java_plain">&nbsp;</span><span class="java_operator">?</span><span class="java_plain">&nbsp;</span><span class="java_literal">null</span><span class="java_plain">&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;previousStandstill</span><span class="java_separator">.</span><span class="java_plain">getVehicle</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Customer</span><span class="java_plain">&nbsp;shadowCustomer&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;sourceCustomer</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">while</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">shadowCustomer&nbsp;</span><span class="java_operator">!=</span><span class="java_plain">&nbsp;</span><span class="java_literal">null</span><span class="java_plain">&nbsp;</span><span class="java_operator">&amp;&amp;</span><span class="java_plain">&nbsp;shadowCustomer</span><span class="java_separator">.</span><span class="java_plain">getVehicle</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">!=</span><span class="java_plain">&nbsp;vehicle</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">beforeVariableChanged</span><span class="java_separator">(</span><span class="java_plain">shadowCustomer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;vehicle&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shadowCustomer</span><span class="java_separator">.</span><span class="java_plain">setVehicle</span><span class="java_separator">(</span><span class="java_plain">vehicle</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">afterVariableChanged</span><span class="java_separator">(</span><span class="java_plain">shadowCustomer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;vehicle&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shadowCustomer&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;shadowCustomer</span><span class="java_separator">.</span><span class="java_plain">getNextCustomer</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Any class that has a shadow variable, is a planning entity class, even it has no genuine planning
        variables.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>A PlanningVariableListener can only change shadow variables. It must never change a genuine planning
          variable or a problem fact.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Any change of a shadow variable must be told to the <code class="literal">ScoreDirector</code>.</p></div><p>From a score calculation perspective, a shadow variable is like any other planning variable. From an
        optimization perspective, Planner effectively only optimizes the genuine variables (and mostly ignores the
        shadow variables): it just assures that when a genuine variable changes, it changes any dependent shadow
        variables accordingly.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e2943"/>4.3.6. Planning problem and planning solution</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2946"/>4.3.6.1. Planning problem instance</h4></div></div></div><p>A dataset for a planning problem needs to be wrapped in a class for the <code class="literal">Solver</code> to
        solve. You must implement this class. For example in n queens, this in the <code class="literal">NQueens</code> class
        which contains a <code class="literal">Column</code> list, a <code class="literal">Row</code> list and a <code class="literal">Queen</code>
        list.</p><p>A planning problem is actually a unsolved planning solution or - stated differently - an uninitialized
        <code class="literal">Solution</code>. Therefor, that wrapping class must implement the <code class="literal">Solution</code>
        interface. For example in n queens, that <code class="literal">NQueens</code> class implements
        <code class="literal">Solution</code>, yet every <code class="literal">Queen</code> in a fresh <code class="literal">NQueens</code> class is
        not yet assigned to a <code class="literal">Row</code> (their <code class="literal">row</code> property is <code class="literal">null</code>).
        So it's not a feasible solution. It's not even a possible solution. It's an uninitialized solution.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e2995"/>4.3.6.2. The <code class="literal">Solution</code> interface</h4></div></div></div><p>You need to present the problem as a <code class="literal">Solution</code> instance to the
        <code class="literal">Solver</code>. So you need to have a class that implements the <code class="literal">Solution</code>
        interface:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_plain">S&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Score</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;getScore</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setScore</span><span class="java_separator">(</span><span class="java_plain">S&nbsp;score</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Collection</span><span class="java_operator">&lt;?</span><span class="java_plain">&nbsp;</span><span class="java_keyword">extends</span><span class="java_plain">&nbsp;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getProblemFacts</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>For example, an <code class="literal">NQueens</code> instance holds a list of all columns, all rows and all
        <code class="literal">Queen</code> instances:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">SimpleScore</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;n</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Problem</span><span class="java_plain">&nbsp;facts</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Column</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;columnList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Row</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;rowList</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Planning</span><span class="java_plain">&nbsp;entities</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;queenList</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3024"/>4.3.6.3. The <code class="literal">getScore()</code> and <code class="literal">setScore()</code> methods</h4></div></div></div><p>A <code class="literal">Solution</code> requires a score property. The score property is <code class="literal">null</code> if
        the <code class="literal">Solution</code> is uninitialized or if the score has not yet been (re)calculated. The
        <code class="literal">score</code> property is usually typed to the specific <code class="literal">Score</code> implementation you
        use. For example, <code class="literal">NQueens</code> uses a <code class="literal">SimpleScore</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">SimpleScore</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">SimpleScore</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">SimpleScore</span><span class="java_plain">&nbsp;getScore</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setScore</span><span class="java_separator">(</span><span class="java_type">SimpleScore</span><span class="java_plain">&nbsp;score</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Most use cases use a <code class="literal">HardSoftScore</code> instead:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CourseSchedule</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">HardSoftScore</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">HardSoftScore</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">HardSoftScore</span><span class="java_plain">&nbsp;getScore</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setScore</span><span class="java_separator">(</span><span class="java_type">HardSoftScore</span><span class="java_plain">&nbsp;score</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>See the Score calculation section for more information on the <code class="literal">Score</code>
        implementations.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="getProblemFacts"/>4.3.6.4. The <code class="literal">getProblemFacts()</code> method</h4></div></div></div><p>The method is only used if Drools is used for score calculation. Other score directors do not use
        it.</p><p>All objects returned by the <code class="literal">getProblemFacts()</code> method will be asserted into the Drools
        working memory, so the score rules can access them. For example, <code class="literal">NQueens</code> just returns all
        <code class="literal">Column</code> and <code class="literal">Row</code> instances.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Collection</span><!-- <br/> --><span class="java_operator">&lt;?</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Object</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;getProblemFacts</span><!-- <br/> --><span class="java_separator">()</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;facts&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facts</span><span class="java_separator">.</span><span class="java_plain">addAll</span><span class="java_separator">(</span><span class="java_plain">columnList</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facts</span><span class="java_separator">.</span><span class="java_plain">addAll</span><span class="java_separator">(</span><span class="java_plain">rowList</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Do</span><span class="java_plain">&nbsp;not&nbsp;add&nbsp;the&nbsp;planning&nbsp;entity's&nbsp;</span><span class="java_separator">(</span><span class="java_plain">queenList</span><span class="java_separator">)</span><span class="java_plain">&nbsp;because&nbsp;that&nbsp;will&nbsp;be&nbsp;done&nbsp;automatically</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;facts</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p><span class="emphasis"><em>All planning entities are automatically inserted into the Drools working memory.</em></span> Do
        not add them in the method <code class="literal">getProblemFacts()</code>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>A common mistake is to use <code class="literal">facts.add(...)</code> instead of
          <code class="literal">fact.addAll(...)</code> for a <code class="literal">Collection</code>, which leads to score rules failing to
          match because the elements of that <code class="literal">Collection</code> aren't in the Drools working memory.</p></div><p>The method <code class="literal">getProblemFacts()</code> is not called much: at most only once per solver phase per
        solver thread.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="cachedProblemFact"/>4.3.6.5. Cached problem fact</h4></div></div></div><p>A cached problem fact is a problem fact that doesn't exist in the real domain model, but is calculated
        before the <code class="literal">Solver</code> really starts solving. The method <code class="literal">getProblemFacts()</code> has
        the chance to enrich the domain model with such cached problem facts, which can lead to simpler and faster score
        constraints.</p><p>For example in examination, a cached problem fact <code class="literal">TopicConflict</code> is created for every 2
        <code class="literal">Topic</code>'s which share at least 1 <code class="literal">Student</code>.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Collection</span><!-- <br/> --><span class="java_operator">&lt;?</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Object</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;getProblemFacts</span><!-- <br/> --><span class="java_separator">()</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;facts&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facts</span><span class="java_separator">.</span><span class="java_plain">addAll</span><span class="java_separator">(</span><span class="java_plain">calculateTopicConflictList</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;facts</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">TopicConflict</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;calculateTopicConflictList</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">TopicConflict</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;topicConflictList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">TopicConflict</span><span class="java_operator">&gt;</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Topic</span><span class="java_plain">&nbsp;leftTopic&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;topicList</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Topic</span><span class="java_plain">&nbsp;rightTopic&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;topicList</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">leftTopic</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;rightTopic</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;studentSize&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Student</span><span class="java_plain">&nbsp;student&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;leftTopic</span><span class="java_separator">.</span><span class="java_plain">getStudentList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">rightTopic</span><span class="java_separator">.</span><span class="java_plain">getStudentList</span><span class="java_separator">().</span><span class="java_plain">contains</span><span class="java_separator">(</span><span class="java_plain">student</span><span class="java_separator">))</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;studentSize</span><span class="java_operator">++</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">studentSize&nbsp;</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;topicConflictList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">TopicConflict</span><span class="java_separator">(</span><span class="java_plain">leftTopic</span><span class="java_separator">,</span><span class="java_plain">&nbsp;rightTopic</span><span class="java_separator">,</span><span class="java_plain">&nbsp;studentSize</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;topicConflictList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>Any score constraint that needs to check if no 2 exams have a topic which share a student are being
        scheduled close together (depending on the constraint: at the same time, in a row or in the same day), can
        simply use the <code class="literal">TopicConflict</code> instance as a problem fact, instead of having to combine every 2
        <code class="literal">Student</code> instances.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3153"/>4.3.6.6. Cloning a <code class="literal">Solution</code></h4></div></div></div><p>Most (if not all) optimization algorithms clone the solution each time they encounter a new best solution
        (so they can recall it later) or to work with multiple solutions in parallel.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>There are many ways to clone, such as a shallow clone, deep clone, ... This context focuses on
          <span class="emphasis"><em>a planning clone</em></span>.</p></div><p>A planning clone of a <code class="literal">Solution</code> must fulfill these requirements:</p><div class="itemizedlist"><ul><li><p>The clone must represent the same planning problem. Usually it reuses the same instances of the
            problem facts and problem fact collections as the original.</p></li><li><p>The clone must use different, cloned instances of the entities and entity collections. Changes to an
            original <code class="literal">Solution</code>'s entity's variables must not effect its clone.</p></li></ul></div><div class="mediaobject"><img src="images/Chapter-Planner_configuration/solutionCloning.png"/></div><p><span class="bold"><strong>Implementing a planning clone method is hard, therefore you don't need to implement
        it.</strong></span></p><div class="section" lang="en-US"><div class="titlepage"><div><div><h5 class="title"><a id="d0e3187"/>4.3.6.6.1. <code class="literal">FieldAccessingSolutionCloner</code></h5></div></div></div><p>This <code class="literal">SolutionCloner</code> is used by default. It works for the majority of use
          cases.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>When the <code class="literal">FieldAccessingSolutionCloner</code> clones your entity collection, it might not
            recognize the implementation and replace it with <code class="literal">ArrayList</code>,
            <code class="literal">LinkedHashSet</code> or <code class="literal">TreeSet</code> (whichever is more applicable). It recognizes
            most of the common JDK <code class="literal">Collection</code> implementations.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h5 class="title"><a id="d0e3214"/>4.3.6.6.2. Custom cloning: Make <code class="literal">Solution</code> implement <code class="literal">PlanningCloneable</code></h5></div></div></div><p>If your Solution implements PlanningCloneable, Planner will automatically choose to clone it by calling
          the method <code class="literal">planningClone()</code>.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">PlanningCloneable</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_plain">T</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;planningClone</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>For example: If <code class="literal">NQueens</code> implements <code class="literal">PlanningCloneable</code>, it would
          only deep clone all <code class="literal">Queen</code> instances. When the original solution is changed during planning,
          by changing a <code class="literal">Queen</code>, the clone stays the same.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_separator">...</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_separator">,</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">PlanningCloneable</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_javadoc_comment">/**</span>
<!--  --><br/><span class="java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Clone&nbsp;will&nbsp;only&nbsp;deep&nbsp;copy&nbsp;the&nbsp;{</span><span class="java_javadoc_tag">@link</span><span class="java_javadoc_comment">&nbsp;#queenList}.</span>
<!--  --><br/><span class="java_javadoc_comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;planningClone</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;clone&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">NQueens</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone</span><span class="java_separator">.</span><span class="java_plain">id&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;id</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone</span><span class="java_separator">.</span><span class="java_plain">n&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;n</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone</span><span class="java_separator">.</span><span class="java_plain">columnList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;columnList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone</span><span class="java_separator">.</span><span class="java_plain">rowList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;rowList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;clonedQueenList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">queenList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;queenList</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clonedQueenList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">planningClone</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone</span><span class="java_separator">.</span><span class="java_plain">queenList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;clonedQueenList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone</span><span class="java_separator">.</span><span class="java_plain">score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;clone</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_separator">}</span></pre><p><span class="emphasis"><em>The <code class="literal">planningClone()</code> method should only deep clone the planning
          entities.</em></span> Notice that the problem facts, such as <code class="literal">Column</code> and
          <code class="literal">Row</code> are normally <span class="emphasis"><em>not</em></span> cloned: even their <code class="literal">List</code>
          instances are <span class="emphasis"><em>not</em></span> cloned. If you were to clone the problem facts too, then you'd have to
          make sure that the new planning entity clones also refer to the new problem facts clones used by the solution.
          For example, if you would clone all <code class="literal">Row</code> instances, then each <code class="literal">Queen</code> clone
          and the <code class="literal">NQueens</code> clone itself should refer to those new <code class="literal">Row</code>
          clones.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Cloning an entity with a <a class="link" href="#chainedPlanningVariable" title="4.3.5.4. Chained planning variable">chained</a> variable is devious: a
            variable of an entity A might point to another entity B. If A is cloned, then it's variable must point to
            the clone of B, not the original B.</p></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3285"/>4.3.6.7. Build an uninitialized solution</h4></div></div></div><p>Build a <code class="literal">Solution</code> instance to represent your planning problem, so you can set it on the
        <code class="literal">Solver</code> as the planning problem to solve. For example in n queens, an
        <code class="literal">NQueens</code> instance is created with the required <code class="literal">Column</code> and
        <code class="literal">Row</code> instances and every <code class="literal">Queen</code> set to a different <code class="literal">column</code>
        and every <code class="literal">row</code> set to <code class="literal">null</code>.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">private</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_plain">&nbsp;createNQueens</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_type">int</span><!-- <br/> --><span class="java_plain">&nbsp;n</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;nQueens&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">NQueens</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">setId</span><span class="java_separator">(</span><span class="java_literal">0L</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">setN</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">setColumnList</span><span class="java_separator">(</span><span class="java_plain">createColumnList</span><span class="java_separator">(</span><span class="java_plain">nQueens</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">setRowList</span><span class="java_separator">(</span><span class="java_plain">createRowList</span><span class="java_separator">(</span><span class="java_plain">nQueens</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">setQueenList</span><span class="java_separator">(</span><span class="java_plain">createQueenList</span><span class="java_separator">(</span><span class="java_plain">nQueens</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;createQueenList</span><span class="java_separator">(</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;n&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getN</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;queenList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">long</span><span class="java_plain">&nbsp;id&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Column</span><span class="java_plain">&nbsp;column&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getColumnList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">Queen</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">setId</span><span class="java_separator">(</span><span class="java_plain">id</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id</span><span class="java_operator">++</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">setColumn</span><span class="java_separator">(</span><span class="java_plain">column</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Notice</span><span class="java_plain">&nbsp;that&nbsp;we&nbsp;leave&nbsp;the&nbsp;</span><span class="java_type">PlanningVariable</span><span class="java_plain">&nbsp;properties&nbsp;on&nbsp;</span><span class="java_literal">null</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queenList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;queenList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><div class="figure"><a id="d0e3319"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Planner_configuration/uninitializedNQueens04.png" alt="Uninitialized solution for the 4 queens puzzle"/></div></div><p class="title"><b>Figure 4.1. Uninitialized solution for the 4 queens puzzle</b></p></div><br class="figure-break"/><p>Usually, most of this data comes from your data layer, and your <code class="literal">Solution</code> implementation
        just aggregates that data and creates the uninitialized planning entity instances to plan:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">private</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">void</span><!-- <br/> --><span class="java_plain">&nbsp;createLectureList</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_type">CourseSchedule</span><!-- <br/> --><span class="java_plain">&nbsp;schedule</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Course</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;courseList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;schedule</span><span class="java_separator">.</span><span class="java_plain">getCourseList</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Lecture</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;lectureList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Lecture</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">courseList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Course</span><span class="java_plain">&nbsp;course&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;courseList</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">int</span><span class="java_plain">&nbsp;i&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span><span class="java_plain">&nbsp;i&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;course</span><span class="java_separator">.</span><span class="java_plain">getLectureSize</span><span class="java_separator">();</span><span class="java_plain">&nbsp;i</span><span class="java_operator">++</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Lecture</span><span class="java_plain">&nbsp;lecture&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">Lecture</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lecture</span><span class="java_separator">.</span><span class="java_plain">setCourse</span><span class="java_separator">(</span><span class="java_plain">course</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lecture</span><span class="java_separator">.</span><span class="java_plain">setLectureIndexInCourse</span><span class="java_separator">(</span><span class="java_plain">i</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Notice</span><span class="java_plain">&nbsp;that&nbsp;we&nbsp;leave&nbsp;the&nbsp;</span><span class="java_type">PlanningVariable</span><span class="java_plain">&nbsp;properties&nbsp;</span><span class="java_separator">(</span><span class="java_plain">period&nbsp;and&nbsp;room</span><span class="java_separator">)</span><span class="java_plain">&nbsp;on&nbsp;</span><span class="java_literal">null</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lectureList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">lecture</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schedule</span><span class="java_separator">.</span><span class="java_plain">setLectureList</span><span class="java_separator">(</span><span class="java_plain">lectureList</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e3332"/>4.4. Use the <code class="literal">Solver</code></h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3337"/>4.4.1. The Solver interface</h3></div></div></div><p>A <code class="literal">Solver</code> implementation will solve your planning problem.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solver</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;setPlanningProblem</span><span class="java_separator">(</span><span class="java_type">Solution</span><span class="java_plain">&nbsp;planningProblem</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;solve</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solution</span><span class="java_plain">&nbsp;getBestSolution</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>A <code class="literal">Solver</code> can only solve 1 planning problem instance at a time. A
      <code class="literal">Solver</code> should only be accessed from a single thread, except for the methods that are
      specifically javadocced as being thread-safe. It's build with a <code class="literal">SolverFactory</code>, do not implement
      or build it yourself.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3358"/>4.4.2. Solving a problem</h3></div></div></div><p>Solving a problem is quite easy once you have:</p><div class="itemizedlist"><ul><li><p>A <code class="literal">Solver</code> build from a solver configuration</p></li><li><p>A <code class="literal">Solution</code> that represents the planning problem instance</p></li></ul></div><p>Just set the planning problem, solve it and extract the best solution:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;solver</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">setPlanningProblem</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">planningProblem</span><!-- <br/> --><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">solve</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solution</span><span class="java_plain">&nbsp;bestSolution&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">getBestSolution</span><span class="java_separator">();</span></pre><p>For example in n queens, the method <code class="literal">getBestSolution()</code> will return an
      <code class="literal">NQueens</code> instance with every <code class="literal">Queen</code> assigned to a
      <code class="literal">Row</code>.</p><div class="figure"><a id="d0e3394"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Planner_configuration/solvedNQueens04.png" alt="Best solution for the 4 queens puzzle in 8 ms (also an optimal solution)"/></div></div><p class="title"><b>Figure 4.2. Best solution for the 4 queens puzzle in 8 ms (also an optimal solution)</b></p></div><br class="figure-break"/><p>The <code class="literal">solve()</code> method can take a long time (depending on the problem size and the solver
      configuration). The <code class="literal">Solver</code> will remember (actually clone) the best solution it encounters
      during its solving. Depending on a number factors (including problem size, how much time the
      <code class="literal">Solver</code> has, the solver configuration, ...), that best solution will be a feasible or even an
      optimal solution.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>The <code class="literal">Solution</code> instance given to the method <code class="literal">setPlanningProblem()</code> will
        be changed by the <code class="literal">Solver</code>, but it do not mistake it for the best solution.</p><p>The <code class="literal">Solution</code> instance returned by the method <code class="literal">getBestSolution()</code> will
        most likely be a clone of the instance given to the method <code class="literal">setPlanningProblem()</code>, which means
        it's a different instance.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>The <code class="literal">Solution</code> instance given to the method <code class="literal">setPlanningProblem()</code> does
        not need to be uninitialized. It can be partially or fully initialized, which is likely to be the case in <a class="link" href="#repeatedPlanning" title="Chapter 14. Repeated planning">repeated planning</a>.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="environmentMode"/>4.4.3. Environment mode: Are there bugs in my code?</h3></div></div></div><p>The environment mode allows you to detect common bugs in your implementation. It does not affect the logging
      level.</p><p>You can set the environment mode in the solver configuration XML file:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">environmentMode</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FAST_ASSERT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">environmentMode</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>A solver has a single <code class="literal">Random</code> instance. Some solver configurations use the
      <code class="literal">Random</code> instance a lot more than others. For example simulated annealing depends highly on
      random numbers, while tabu search only depends on it to deal with score ties. The environment mode influences the
      seed of that <code class="literal">Random</code> instance.</p><p>There are 4 environment modes:</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3468"/>4.4.3.1. FULL_ASSERT</h4></div></div></div><p>The FULL_ASSERT mode turns on all assertions (such as assert that the incremental score calculation is
        uncorrupted for each move) to fail-fast on a bug in a Move implementation, a score rule, the rule engine itself,
        ...</p><p>This mode is reproducible (see the reproducible mode). It is also intrusive because it calls the method
        <code class="literal">calculateScore()</code> more frequently than a non assert mode.</p><p>The FULL_ASSERT mode is horribly slow (because it doesn't rely on delta based score calculation).</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3480"/>4.4.3.2. NON_INTRUSIVE_FULL_ASSERT</h4></div></div></div><p>The NON_INTRUSIVE_FULL_ASSERT turns on several assertions to fail-fast on a bug in a Move implementation,
        a score rule, the rule engine itself, ...</p><p>This mode is reproducible (see the reproducible mode). It is non-intrusive because it does not call the
        method <code class="literal">calculateScore()</code> more frequently than a non assert mode.</p><p>The NON_INTRUSIVE_FULL_ASSERT mode is horribly slow (because it doesn't rely on delta based score
        calculation).</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3492"/>4.4.3.3. FAST_ASSERT</h4></div></div></div><p>The FAST_ASSERT mode turns on most assertions (such as assert that an undo Move's score is the same as
        before the Move) to fail-fast on a bug in a Move implementation, a score rule, the rule engine itself,
        ...</p><p>This mode is reproducible (see the reproducible mode). It is also intrusive because it calls the method
        <code class="literal">calculateScore()</code> more frequently than a non assert mode.</p><p>The FAST_ASSERT mode is slow.</p><p>It's recommended to write a test case which does a short run of your planning problem with the FAST_ASSERT
        mode on.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3506"/>4.4.3.4. REPRODUCIBLE (default)</h4></div></div></div><p>The reproducible mode is the default mode because it is recommended during development. In this mode, 2
        runs in the same Planner version will execute the same code in the same order. <span class="bold"><strong>Those 2
        runs will have the same result</strong></span>, except if the note below applies. This allows you to consistently
        reproduce bugs. It also allows you to benchmark certain refactorings (such as a score constraint optimization)
        fairly across runs.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Despite the reproducible mode, your application might still not be fully reproducible because of:</p><div class="itemizedlist"><ul><li><p>Use of <code class="literal">HashSet</code> (or another <code class="literal">Collection</code> which has an
              inconsistent order between JVM runs) for collections of planning entities or planning values (but not
              normal problem facts), especially in the <code class="literal">Solution</code> implementation. Replace it with
              <code class="literal">LinkedHashSet</code>.</p></li><li><p>Combining a time gradient dependent algorithms (most notably simulated annealing) together with time
              spend termination. A sufficiently large difference in allocated CPU time will influence the time gradient
              values. Replace simulated annealing with late acceptance. Or instead, replace time spend termination with
              step count termination.</p></li></ul></div></div><p>The reproducible mode is slightly slower than the production mode. If your production environment requires
        reproducibility, use it in production too.</p><p>In practice, this mode uses the default random seed, and it also disables certain concurrency
        optimizations (such as work stealing).</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e3540"/>4.4.3.5. PRODUCTION</h4></div></div></div><p>The production mode is the fastest, but not reproducible. It is recommended for a production environment,
        unless reproducibility is required.</p><p>The random seed is different on every run, which makes it more robust against an unlucky random seed. An
        unlucky random seed gives a bad result on a certain data set with a certain solver configuration. Note that in
        most use cases the impact of the random seed is relatively low on the result (even with simulated annealing). An
        occasional bad result is far more likely to be caused by another issue (such as a <a class="link" href="#scoreTrap" title="5.4.8. Score trap">score trap</a>).</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="logging"/>4.4.4. Logging level: What is the <code class="literal">Solver</code> doing?</h3></div></div></div><p>The best way to illuminate the black box that is a <code class="literal">Solver</code>, is to play with the logging
      level:</p><div class="itemizedlist"><ul><li><p><span class="bold"><strong>error</strong></span>: Log errors, except those that are thrown to the calling code as
          a <code class="literal">RuntimeException</code>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p><span class="bold"><strong>If an error happens, Planner normally fails fast</strong></span>: it throws a
            subclass of <code class="literal">RuntimeException</code> with a detailed message to the calling code. It does not log
            it as an error itself to avoid duplicate log messages. Except if the calling code explicitly catches and
            eats that <code class="literal">RuntimeException</code>, a <code class="literal">Thread</code>'s default
            <code class="literal">ExceptionHandler</code> will log it as an error anyway. Meanwhile, the code is disrupted from
            doing further harm or obfuscating the error.</p></div></li><li><p><span class="bold"><strong>warn</strong></span>: Log suspicious circumstances.</p></li><li><p><span class="bold"><strong>info</strong></span>: Log every phase and the solver itself. See <a class="link" href="#scopeOverview" title="6.7. Scope overview">scope overview</a>.</p></li><li><p><span class="bold"><strong>debug</strong></span>: Log every step of every phase. See <a class="link" href="#scopeOverview" title="6.7. Scope overview">scope overview</a>.</p></li><li><p><span class="bold"><strong>trace</strong></span>: Log every move of every step of every phase. See <a class="link" href="#scopeOverview" title="6.7. Scope overview">scope overview</a>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Turning on <code class="literal">trace</code> logging, will slow down performance considerably: it's often 4
            times slower. However, it's invaluable during development to discover a bottleneck.</p><p>Even debug logging can slow down performance considerably for fast stepping algorithms (such as Late
            Acceptance and Simulated Annealing), but not for slow stepping algorithms (such as Tabu Search).</p></div></li></ul></div><p>For example, set it to <code class="literal">debug</code> logging, to see when the phases end and how fast steps are
      taken:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">INFO  Solving started: time spend (0), score (null), new best score (null), random seed (0).
DEBUG     Step index (0), time spend (1), score (0), initialized planning entity (col2@row0).
DEBUG     Step index (1), time spend (3), score (0), initialized planning entity (col1@row2).
DEBUG     Step index (2), time spend (4), score (0), initialized planning entity (col3@row3).
DEBUG     Step index (3), time spend (5), score (-1), initialized planning entity (col0@row1).
INFO  Phase (0) constructionHeuristic ended: step total (4), time spend (6), best score (-1).
DEBUG     Step index (0), time spend (10), score (-1),     best score (-1), accepted/selected move count (12/12) for picked step (col1@row2 =&gt; row3).
DEBUG     Step index (1), time spend (12), score (0), new best score (0), accepted/selected move count (12/12) for picked step (col3@row3 =&gt; row2).
INFO  Phase (1) localSearch ended: step total (2), time spend (13), best score (0).
INFO  Solving ended: time spend (13), best score (0), average calculate count per second (4846).</pre><p>All time spends are in milliseconds.</p><p>Everything is logged to <a class="link" href="http://www.slf4j.org/" target="">SLF4J</a>, which is a simple logging
      facade which delegates every log message to Logback, Apache Commons Logging, Log4j or java.util.logging. Add a
      dependency to the logging adaptor for your logging framework of choice.</p><p>If you're not using any logging framework yet, use Logback by adding this Maven dependency (there is no need
      to add an extra bridge dependency):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">ch.qos.logback</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">logback-classic</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">version</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1.x</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">version</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Configure the logging level on the package <code class="literal">org.optaplanner</code> in your
      <code class="filename">logback.xml</code> file:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">configuration</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">logger</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">name</span><span class="xml_tag_symbols">=</span><span class="xml_attribute_value">&quot;org.optaplanner&quot;</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">level</span><span class="xml_tag_symbols">=</span><span class="xml_attribute_value">&quot;debug&quot;</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">configuration</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>If instead, you're still using Log4J (and you don't want to switch to its faster successor, Logback), add
      the bridge dependency:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.slf4j</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">slf4j-log4j12</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">version</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1.x</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">version</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>And configure the logging level on the package <code class="literal">org.optaplanner</code> in your
      <code class="filename">log4j.xml</code> file:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">log4j:configuration</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">xmlns:log4j</span><span class="xml_tag_symbols">=</span><span class="xml_attribute_value">&quot;http://jakarta.apache.org/log4j/&quot;</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">category</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">name</span><span class="xml_tag_symbols">=</span><span class="xml_attribute_value">&quot;org.optaplanner&quot;</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">priority</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">value</span><span class="xml_tag_symbols">=</span><span class="xml_attribute_value">&quot;debug&quot;</span><span class="xml_plain">&nbsp;</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">category</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">log4j:configuration</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="scoreCalculation"/>Chapter 5. Score calculation</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e3669">5.1. Score terminology</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e3672">5.1.1. What is a score?</a></span></dt><dt><span class="section"><a href="#d0e3725">5.1.2. Score constraint signum (positive or negative)</a></span></dt><dt><span class="section"><a href="#d0e3750">5.1.3. Score constraint weight</a></span></dt><dt><span class="section"><a href="#d0e3771">5.1.4. Score level</a></span></dt><dt><span class="section"><a href="#d0e3808">5.1.5. Pareto scoring (AKA multi-objective optimization scoring)</a></span></dt><dt><span class="section"><a href="#d0e3851">5.1.6. Combining score techniques</a></span></dt><dt><span class="section"><a href="#d0e3859">5.1.7. The Score interface</a></span></dt><dt><span class="section"><a href="#avoidFloatingPointNumbersInScoreCalculation">5.1.8. Avoid floating point numbers in score calculation</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e3982">5.2. Choose a Score definition</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e3999">5.2.1. SimpleScore</a></span></dt><dt><span class="section"><a href="#d0e4065">5.2.2. HardSoftScore (recommended)</a></span></dt><dt><span class="section"><a href="#d0e4134">5.2.3. HardMediumSoftScore</a></span></dt><dt><span class="section"><a href="#d0e4156">5.2.4. BendableScore</a></span></dt><dt><span class="section"><a href="#customScore">5.2.5. Implementing a custom Score</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e4207">5.3. Calculate the Score</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e4212">5.3.1. Score calculation types</a></span></dt><dt><span class="section"><a href="#d0e4260">5.3.2. Simple Java score calculation</a></span></dt><dt><span class="section"><a href="#d0e4311">5.3.3. Incremental Java score calculation</a></span></dt><dt><span class="section"><a href="#d0e4387">5.3.4. Drools score calculation</a></span></dt><dt><span class="section"><a href="#d0e4585">5.3.5. Detecting invalid scores</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e4628">5.4. Score calculation performance tricks</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e4631">5.4.1. Overview</a></span></dt><dt><span class="section"><a href="#d0e4639">5.4.2. Average calculation count per second</a></span></dt><dt><span class="section"><a href="#incrementalScoreCalculation">5.4.3. Incremental score calculation (with delta's)</a></span></dt><dt><span class="section"><a href="#d0e4696">5.4.4. Avoid calling remote services during score calculation</a></span></dt><dt><span class="section"><a href="#d0e4712">5.4.5. Unused constraint</a></span></dt><dt><span class="section"><a href="#buildInHardConstraint">5.4.6. Build-in hard constraint</a></span></dt><dt><span class="section"><a href="#d0e4763">5.4.7. Other performance tricks</a></span></dt><dt><span class="section"><a href="#scoreTrap">5.4.8. Score trap</a></span></dt><dt><span class="section"><a href="#d0e4842">5.4.9. stepLimit benchmark</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e4847">5.5. Reusing the score calculation outside the Solver</a></span></dt></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e3669"/>5.1. Score terminology</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3672"/>5.1.1. What is a score?</h3></div></div></div><p>Every initialized <code class="literal">Solution</code> has a score. That score is an objective way to compare 2
      solutions: the solution with the higher score is better. The <code class="literal">Solver</code> aims to find the
      <code class="literal">Solution</code> with the highest <code class="literal">Score</code> of all possible solutions. The
      <span class="emphasis"><em>best solution</em></span> is the <code class="literal">Solution</code> with the highest <code class="literal">Score</code>
      that <code class="literal">Solver</code> has encountered during solving, which might be the <span class="emphasis"><em>optimal
      solution</em></span>.</p><p>Planner cannot automatically know which <code class="literal">Solution</code> is best for your business, so you need
      to tell it how to calculate the score of a given <code class="literal">Solution</code> according to your business needs.
      There are multiple score techniques that you can use and combine:</p><div class="itemizedlist"><ul><li><p>Maximize or minimize a constraint: score constraint signum (positive or negative)</p></li><li><p>Put a cost/profit on constraints: score constraint weight</p></li><li><p>Prioritize constraints: score level</p></li><li><p>Pareto scoring</p></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3725"/>5.1.2. Score constraint signum (positive or negative)</h3></div></div></div><p>All score techniques are based on constraints. Such a constraint can be a simple pattern (such as
      <span class="emphasis"><em>Maximize the apple harvest in the solution</em></span>) or a more complex pattern. A positive constraint
      is a constraint you're trying to maximize. A negative constraint is a constraint you're trying to minimize.</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/positiveAndNegativeConstraints.png"/></div><p>Notice in the image above, that the optimal solution always has the highest score, regardless if the
      constraints are positive or negative.</p><p>Most planning problems have only negative constraints and therefore have a negative score. In that case, the
      score is usually the sum of the weight of the negative constraints being broken, with a perfect score of 0. This
      explains why the score of a solution of 4 queens is the negative (and not the positive!) of the number of queen
      couples which can attack each other.</p><p>Negative and positive constraints can be combined, even in the same score level.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Don't presume your business knows all its score constraints in advance. Expect score constraints to be
        added or changed after the first releases.</p></div><p>When a constraint activates (because the negative constraint is broken or the positive constraint is
      fulfilled) on a certain planning entity set, it is called a <span class="emphasis"><em>constraint match</em></span>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3750"/>5.1.3. Score constraint weight</h3></div></div></div><p>Not all score constraints are equally important. If breaking one constraint is equally bad as breaking
      another constraint x times, then those 2 constraints have a different weight (but they are in the same score
      level). For example in vehicle routing, you can make 2 "unhappy driver" constraint matches count as much as 1
      "fuel tank usage" constraint match:</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/scoreWeighting.png"/></div><p>Score weighting is often used in use cases where you can put a price tag on everything. In that case, the
      positive constraints maximize revenue and the negative constraints minimize expenses: together they maximize
      profit. Alternatively, score weighting is also often used to create social fairness. For example: nurses that
      request a free day on New Year's eve pay a higher weight than on a normal day.</p><p>The weight of a constraint match can be dynamically based on the planning entities involved. For example in
      cloud balance: the weight of the soft constraint match for an active <code class="literal">Computer</code> is the
      <code class="literal">cost</code> of that <code class="literal">Computer</code>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3771"/>5.1.4. Score level</h3></div></div></div><p>Sometimes a score constraint outranks another score constraint, no matter how many times the other is
      broken. In that case, those score constraints are in different levels. For example: a nurse cannot do 2 shifts at
      the same time (due to the constraints of physical reality), this outranks all nurse happiness constraints.</p><p>Most use cases have only 2 score levels: hard and soft. When comparing 2 scores, they are compared
      lexicographically: the first score level gets compared first. If those differ, the others score levels are
      ignored. For example: a score that breaks 0 hard constraints and 1000000 soft constraints is better than a score
      that breaks 1 hard constraint and 0 soft constraints.</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/scoreLevels.png"/></div><p>Score levels often employ score weighting per level. In such case, the hard constraint level usually makes
      the solution feasible and the soft constraint level maximizes profit by weighting the constraints on price.</p><p>Don't use a big constraint weight when your business actually wants different score levels. That hack, known
      as <span class="emphasis"><em>score folding</em></span>, is broken:</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/scoreFoldingIsBroken.png"/></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Your business will probably tell you that your hard constraints all have the same weight, because they
        cannot be broken (so their weight does not matter). This is not true and it could create a <a class="link" href="#scoreTrap" title="5.4.8. Score trap">score trap</a>. For example in cloud balance: if a <code class="literal">Computer</code> has 7 CPU
        too little for its <code class="literal">Process</code>es, then it must be weighted 7 times as much as if it had only 1
        CPU too little. This way, there is an incentive to move a <code class="literal">Process</code> with 6 CPU or less away
        from that Computer.</p></div><p>3 or more score levels is supported. For example: a company might decide that profit outranks employee
      satisfaction (or visa versa), while both are outranked by the constraints of physical reality.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3808"/>5.1.5. Pareto scoring (AKA multi-objective optimization scoring)</h3></div></div></div><p>Far less common is the use case of pareto optimization, which is also known under the more confusing term
      multi-objective optimization. In pareto scoring, score constraints are in the same score level, yet they are not
      weighted against each other. When 2 scores are compared, each of the score constraints are compared individually
      and the score with the most dominating score constraints wins. Pareto scoring can even be combined with score
      levels and score constraint weighting.</p><p>Consider this example with positive constraints, where we want to get the most apples and oranges. Since
      it's impossible to compare apples and oranges, we can't weight them against each other. Yet, despite that we can't
      compare them, we can state that 2 apples are better then 1 apple. Similarly, we can state that 2 apples and 1
      orange are better than just 1 orange. So despite our inability to compare some Scores conclusively (at which point
      we declare them equal), we can find a set of optimal scores. Those are called pareto optimal.</p><div class="mediaobject" align="center"><img src="images/Chapter-Score_calculation/paretoOptimizationScoring.png" align="middle"/></div><p>Scores are considered equal far more often. It's left up to a human to choose the better out of a set of
      best solutions (with equal scores) found by Planner. In the example above, the user must choose between solution A
      (3 apples and 1 orange) and solution B (1 apples and 6 oranges). It's guaranteed that Planner has not found
      another solution which has more apples or more oranges or even a better combination of both (such as 2 apples and
      3 oranges).</p><p>To implement pareto scoring in Planner, <a class="link" href="#customScore" title="5.2.5. Implementing a custom Score">implement a custom
      <code class="literal">ScoreDefinition</code> and <code class="literal">Score</code></a> (and replace the
      <code class="literal">BestSolutionRecaller</code>). Future versions will provide out-of-the-box support.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>A pareto <code class="literal">Score</code>'s method <code class="literal">compareTo</code> is not transitive because it does
        a pareto comparison. For example: 2 apples is greater than 1 apple. 1 apples is equal to 1 orange. Yet, 2 apples
        are not greater than 1 orange (but actually equal). Pareto comparison violates the contract of the interface
        <code class="literal">java.lang.Comparable</code>'s method <code class="literal">compareTo</code>, but Planner's systems are
        <span class="emphasis"><em>pareto comparison safe</em></span>, unless explicitly stated otherwise in this documentation.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3851"/>5.1.6. Combining score techniques</h3></div></div></div><p>All the score techniques mentioned above, can be combined seamlessly:</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/scoreComposition.png"/></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3859"/>5.1.7. The <code class="literal">Score</code> interface</h3></div></div></div><p>A score is represented by the <code class="literal">Score</code> interface, which naturally extends
      <code class="literal">Comparable</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Score</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_separator">...</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Comparable</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_separator">...</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>The <code class="literal">Score</code> implementation to use depends on your use case. Your score might not
      efficiently fit in a single <code class="literal">long</code> value. Planner has several build-in <code class="literal">Score</code>
      implementations, but you can implement a custom <code class="literal">Score</code> too. Most use cases tend to use the
      build-in <code class="literal">HardSoftScore</code>.</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/scoreClassDiagram.png"/></div><p>The <code class="literal">Score</code> implementation (for example <code class="literal">HardSoftScore</code>) must be the same
      throughout a <code class="literal">Solver</code> runtime. The <code class="literal">Score</code> implementation is configured in the
      solver configuration as a ScoreDefinition:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">HARD_SOFT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="avoidFloatingPointNumbersInScoreCalculation"/>5.1.8. Avoid floating point numbers in score calculation</h3></div></div></div><p>Avoid the use of <code class="literal">float</code> and <code class="literal">double</code> for score calculation. Use
      <code class="literal">BigDecimal</code> instead.</p><p>Floating point numbers (<code class="literal">float</code> and <code class="literal">double</code>) cannot represent a decimal
      number correctly. For example: a <code class="literal">double</code> cannot hold the value <code class="literal">0.05</code>
      correctly. Instead, it holds the nearest representable value. Arithmetic (including addition and subtraction) with
      floating point numbers, especially for planning problems, leads to incorrect decisions:</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/scoreWeightType.png"/></div><p>Additionally, floating point number addition is not associative:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_type">System</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">out</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">println</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">((</span><!-- <br/> --><span class="java_literal">0.01</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_operator">+</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">0.02</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_operator">+</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">0.03</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_operator">==</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_literal">0.01</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_operator">+</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_literal">0.02</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_operator">+</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_literal">0.03</span><!-- <br/> --><span class="java_separator">))</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">);</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_operator">//</span><!-- <br/> --><span class="java_plain">&nbsp;returns&nbsp;</span><!-- <br/> --><span class="java_literal">false</span></pre><p>This leads to <span class="emphasis"><em>score corruption</em></span>.</p><p>Decimal numbers (<code class="literal">BigDecimal</code>) have none of these problems.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>BigDecimal arithmetic is considerably slower than <code class="literal">int</code>, <code class="literal">long</code> or
        <code class="literal">double</code> arithmetic. In experiments we've seen the average calculation count get divided by
        5.</p><p>Therefore, in some cases, it can be worthwhile to multiply <span class="emphasis"><em>all</em></span> numbers for a single
        score weight by a plural of ten (for example <code class="literal">1000</code>), so the score weight fits in an
        <code class="literal">int</code> or <code class="literal">long</code>.</p></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e3982"/>5.2. Choose a Score definition</h2></div></div></div><p>Each <code class="literal">Score</code> implementation also has a <code class="literal">ScoreDefinition</code> implementation. For
    example: <code class="literal">SimpleScore</code> is definied by <code class="literal">SimpleScoreDefinition</code>.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e3999"/>5.2.1. SimpleScore</h3></div></div></div><p>A <code class="literal">SimpleScore</code> has a single <code class="literal">int</code> value, for example
      <code class="literal">-123</code>. It has a single score level.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SIMPLE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Variants of this <code class="literal">scoreDefinitionType</code>:</p><div class="itemizedlist"><ul><li><p><code class="literal">SIMPLE_LONG</code>: Uses <code class="literal">SimpleLongScore</code> which has a
          <code class="literal">long</code> value instead of an <code class="literal">int</code> value.</p></li><li><p><code class="literal">SIMPLE_DOUBLE</code>: Uses <code class="literal">SimpleDoubleScore</code> which has a
          <code class="literal">double</code> value instead of an <code class="literal">int</code> value. <a class="link" href="#avoidFloatingPointNumbersInScoreCalculation" title="5.1.8. Avoid floating point numbers in score calculation">Not recommended to use.</a></p></li><li><p><code class="literal">SIMPLE_BIG_DECIMAL</code>: Uses <code class="literal">SimpleBigDecimalScore</code> which has a
          <code class="literal">BigDecimal</code> value instead of an <code class="literal">int</code> value.</p></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4065"/>5.2.2. HardSoftScore (recommended)</h3></div></div></div><p>A <code class="literal">HardSoftScore</code> has a hard <code class="literal">int</code> value and a soft <code class="literal">int</code>
      value, for example <code class="literal">-123hard/-456soft</code>. It has 2 score levels (hard and soft).</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">HARD_SOFT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Variants of this <code class="literal">scoreDefinitionType</code>:</p><div class="itemizedlist"><ul><li><p><code class="literal">HARD_SOFT_LONG</code>: Uses <code class="literal">HardSoftLongScore</code> which has
          <code class="literal">long</code> values instead of <code class="literal">int</code> values.</p></li><li><p><code class="literal">HARD_SOFT_DOUBLE</code>: Uses <code class="literal">HardSoftDoubleScore</code> which has
          <code class="literal">double</code> values instead of <code class="literal">int</code> values. <a class="link" href="#avoidFloatingPointNumbersInScoreCalculation" title="5.1.8. Avoid floating point numbers in score calculation">Not recommended to use.</a></p></li><li><p><code class="literal">HARD_SOFT_BIG_DECIMAL</code>: Uses <code class="literal">HardSoftBigDecimalScore</code> which has
          <code class="literal">BigDecimal</code> values instead of <code class="literal">int</code> values..</p></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4134"/>5.2.3. HardMediumSoftScore</h3></div></div></div><p>A <code class="literal">HardMediumSoftScore</code> which has a hard <code class="literal">int</code> value, a medium
      <code class="literal">int</code> value and a soft <code class="literal">int</code> value, for example
      <code class="literal">-123hard/-456medium/-789soft</code>. It has 3 score levels (hard, medium and soft).</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">HARD_MEDIUM_SOFT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4156"/>5.2.4. BendableScore</h3></div></div></div><p>A <code class="literal">BendableScore</code> has a configurable number of score levels. It has an array of hard
      <code class="literal">int</code> values and an array of soft <code class="literal">int</code> value, for example 2 hard levels and 3
      soft levels for a score <code class="literal">-123/-456/-789/-012/-345</code>. The number of hard and soft score levels
      needs to be set at configuration time, it's not flexible to change during solving.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">BENDABLE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">bendableHardLevelCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">2</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">bendableHardLevelCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">bendableSoftLevelCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">3</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">bendableSoftLevelCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="customScore"/>5.2.5. Implementing a custom Score</h3></div></div></div><p>The <code class="literal">ScoreDefinition</code> interface defines the score representation.</p><p>To implement a custom Score, you'll also need to implement a custom <code class="literal">ScoreDefinition</code>.
      Extend <code class="literal">AbstractScoreDefinition</code> (preferable by copy pasting
      <code class="literal">HardSoftScoreDefinition</code> or <code class="literal">SimpleScoreDefinition</code>) and start from
      there.</p><p>Then hook your custom <code class="literal">ScoreDefinition</code> in your
      <code class="filename">SolverConfig.xml</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...MyScoreDefinition</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e4207"/>5.3. Calculate the <code class="literal">Score</code></h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4212"/>5.3.1. Score calculation types</h3></div></div></div><p>There are several ways to calculate the <code class="literal">Score</code> of a <code class="literal">Solution</code>:</p><div class="itemizedlist"><ul><li><p><span class="bold"><strong>Simple Java score calculation</strong></span>: implement a single Java method</p></li><li><p><span class="bold"><strong>Incremental Java score calculation</strong></span>: implement multiple Java
          methods</p></li><li><p><span class="bold"><strong>Drools score calculation</strong></span>: implement score rules</p></li></ul></div><p>Every score calculation type can use any Score definition. For example, simple Java score calculation can
      output a <code class="literal">HardSoftScore</code>.</p><p>All score calculation types are Object Orientated and can reuse existing Java code.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>The score calculation should be read-only: it should not change the planning entities or the problem facts
        in any way. For example, it must not call a setter method on a planning entity in a Drools score rule's RHS.
        This does not apply to <span class="emphasis"><em>logically inserted</em></span> objects, which can be changed by the score rules
        who logically inserted them in the first place.</p><p>OptaPlanner will not recalculate the score of a <code class="literal">Solution</code> if it can predict it (unless
        an <a class="link" href="#environmentMode" title="4.4.3. Environment mode: Are there bugs in my code?">environmentMode assertion</a> is enabled). For example, after a winning
        step is done, there is no need to calculate the score because that move was done and undone earlier. As a
        result, there's no guarantee that such changes applied during score calculation are actually done.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4260"/>5.3.2. Simple Java score calculation</h3></div></div></div><p>A simple way to implement your score calculation in Java.</p><div class="itemizedlist"><ul><li><p>Advantages:</p><div class="itemizedlist"><ul><li><p>Plain old Java: no learning curve</p></li><li><p>Opportunity to delegate score calculation to an existing code base or legacy system</p></li></ul></div></li><li><p>Disadvantages:</p><div class="itemizedlist"><ul><li><p>Slower and less scalable</p><div class="itemizedlist"><ul><li><p>Because there is no <a class="link" href="#incrementalScoreCalculation" title="5.4.3. Incremental score calculation (with delta's)">incremental score
                  calculation</a></p></li></ul></div></li></ul></div></li></ul></div><p>Just implement one method of the interface <code class="literal">SimpleScoreCalculator</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SimpleScoreCalculator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">Sol</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Score</span><span class="java_plain">&nbsp;calculateScore</span><span class="java_separator">(</span><span class="java_type">Sol</span><span class="java_plain">&nbsp;solution</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>For example in n queens:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">NQueensSimpleScoreCalculator</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SimpleScoreCalculator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">SimpleScore</span><span class="java_plain">&nbsp;calculateScore</span><span class="java_separator">(</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;n&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getN</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;queenList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getQueenList</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">int</span><span class="java_plain">&nbsp;i&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span><span class="java_plain">&nbsp;i&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;n</span><span class="java_separator">;</span><span class="java_plain">&nbsp;i</span><span class="java_operator">++</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">int</span><span class="java_plain">&nbsp;j&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;i&nbsp;</span><span class="java_operator">+</span><span class="java_plain">&nbsp;</span><span class="java_literal">1</span><span class="java_separator">;</span><span class="java_plain">&nbsp;j&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;n</span><span class="java_separator">;</span><span class="java_plain">&nbsp;j</span><span class="java_operator">++</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;leftQueen&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;queenList</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">i</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;rightQueen&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;queenList</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">j</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">leftQueen</span><span class="java_separator">.</span><span class="java_plain">getRow</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">!=</span><span class="java_plain">&nbsp;</span><span class="java_literal">null</span><span class="java_plain">&nbsp;</span><span class="java_operator">&amp;&amp;</span><span class="java_plain">&nbsp;rightQueen</span><span class="java_separator">.</span><span class="java_plain">getRow</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">!=</span><span class="java_plain">&nbsp;</span><span class="java_literal">null</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">leftQueen</span><span class="java_separator">.</span><span class="java_plain">getRowIndex</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">==</span><span class="java_plain">&nbsp;rightQueen</span><span class="java_separator">.</span><span class="java_plain">getRowIndex</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score</span><span class="java_operator">--</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">leftQueen</span><span class="java_separator">.</span><span class="java_plain">getAscendingDiagonalIndex</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">==</span><span class="java_plain">&nbsp;rightQueen</span><span class="java_separator">.</span><span class="java_plain">getAscendingDiagonalIndex</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score</span><span class="java_operator">--</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">leftQueen</span><span class="java_separator">.</span><span class="java_plain">getDescendingDiagonalIndex</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_operator">==</span><span class="java_plain">&nbsp;rightQueen</span><span class="java_separator">.</span><span class="java_plain">getDescendingDiagonalIndex</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score</span><span class="java_operator">--</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_type">SimpleScore</span><span class="java_separator">.</span><span class="java_plain">valueOf</span><span class="java_separator">(</span><span class="java_plain">score</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Configure it in your solver configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.solver.score.NQueensSimpleScoreCalculator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Alternatively, build a <code class="literal">SimpleScoreCalculator</code> instance at runtime and set it with the
      programmatic API:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;solverFactory</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">getSolverConfig</span><!-- <br/> --><span class="java_separator">().</span><!-- <br/> --><span class="java_plain">getScoreDirectorFactoryConfig</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">setSimpleScoreCalculator</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">simpleScoreCalculator</span><!-- <br/> --><span class="java_separator">);</span></pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4311"/>5.3.3. Incremental Java score calculation</h3></div></div></div><p>A way to implement your score calculation incrementally in Java.</p><div class="itemizedlist"><ul><li><p>Advantages:</p><div class="itemizedlist"><ul><li><p>Very fast and scalable</p><div class="itemizedlist"><ul><li><p>Currently the fastest if implemented correctly</p></li></ul></div></li></ul></div></li><li><p>Disadvantages:</p><div class="itemizedlist"><ul><li><p>Hard to write</p><div class="itemizedlist"><ul><li><p>A scalable implementation heavily uses maps, indexes, ... (things the Drools rule engine can do
                  for you)</p></li><li><p>You have to learn, design, write and improve all these performance optimizations yourself</p></li></ul></div></li><li><p>Hard to read</p><div class="itemizedlist"><ul><li><p>Regular score constraint changes can lead to a high maintenance cost</p></li></ul></div></li></ul></div></li></ul></div><p>Implement all the methods of the interface <code class="literal">IncrementalScoreCalculator</code> and extend the
      class <code class="literal">AbstractIncrementalScoreCalculator</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">IncrementalScoreCalculator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">Sol</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;resetWorkingSolution</span><span class="java_separator">(</span><span class="java_type">Sol</span><span class="java_plain">&nbsp;workingSolution</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;beforeEntityAdded</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterEntityAdded</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;beforeVariableChanged</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">String</span><span class="java_plain">&nbsp;variableName</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterVariableChanged</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">String</span><span class="java_plain">&nbsp;variableName</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;beforeEntityRemoved</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterEntityRemoved</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Score</span><span class="java_plain">&nbsp;calculateScore</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>For example in n queens:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">NQueensAdvancedIncrementalScoreCalculator</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">AbstractIncrementalScoreCalculator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Map</span><span class="java_operator">&lt;</span><span class="java_type">Integer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;&gt;</span><span class="java_plain">&nbsp;rowIndexMap</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Map</span><span class="java_operator">&lt;</span><span class="java_type">Integer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;&gt;</span><span class="java_plain">&nbsp;ascendingDiagonalIndexMap</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Map</span><span class="java_operator">&lt;</span><span class="java_type">Integer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;&gt;</span><span class="java_plain">&nbsp;descendingDiagonalIndexMap</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;score</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;resetWorkingSolution</span><span class="java_separator">(</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;n&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getN</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowIndexMap&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">HashMap</span><span class="java_operator">&lt;</span><span class="java_type">Integer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;&gt;</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascendingDiagonalIndexMap&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">HashMap</span><span class="java_operator">&lt;</span><span class="java_type">Integer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;&gt;</span><span class="java_separator">(</span><span class="java_plain">n&nbsp;</span><span class="java_operator">*</span><span class="java_plain">&nbsp;</span><span class="java_literal">2</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descendingDiagonalIndexMap&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">HashMap</span><span class="java_operator">&lt;</span><span class="java_type">Integer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;&gt;</span><span class="java_separator">(</span><span class="java_plain">n&nbsp;</span><span class="java_operator">*</span><span class="java_plain">&nbsp;</span><span class="java_literal">2</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">int</span><span class="java_plain">&nbsp;i&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span><span class="java_plain">&nbsp;i&nbsp;</span><span class="java_operator">&lt;</span><span class="java_plain">&nbsp;n</span><span class="java_separator">;</span><span class="java_plain">&nbsp;i</span><span class="java_operator">++</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowIndexMap</span><span class="java_separator">.</span><span class="java_plain">put</span><span class="java_separator">(</span><span class="java_plain">i</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">put</span><span class="java_separator">(</span><span class="java_plain">i</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">put</span><span class="java_separator">(</span><span class="java_plain">i</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">i&nbsp;</span><span class="java_operator">!=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">put</span><span class="java_separator">(</span><span class="java_plain">n&nbsp;</span><span class="java_operator">-</span><span class="java_plain">&nbsp;</span><span class="java_literal">1</span><span class="java_plain">&nbsp;</span><span class="java_operator">+</span><span class="java_plain">&nbsp;i</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">put</span><span class="java_separator">((</span><span class="java_operator">-</span><span class="java_plain">i</span><span class="java_separator">),</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_separator">(</span><span class="java_plain">n</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_literal">0</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getQueenList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insert</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;beforeEntityAdded</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Do</span><span class="java_plain">&nbsp;nothing</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterEntityAdded</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insert</span><span class="java_separator">((</span><span class="java_type">Queen</span><span class="java_separator">)</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;beforeVariableChanged</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">String</span><span class="java_plain">&nbsp;variableName</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retract</span><span class="java_separator">((</span><span class="java_type">Queen</span><span class="java_separator">)</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterVariableChanged</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">String</span><span class="java_plain">&nbsp;variableName</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insert</span><span class="java_separator">((</span><span class="java_type">Queen</span><span class="java_separator">)</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;beforeEntityRemoved</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retract</span><span class="java_separator">((</span><span class="java_type">Queen</span><span class="java_separator">)</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;afterEntityRemoved</span><span class="java_separator">(</span><span class="java_type">Object</span><span class="java_plain">&nbsp;entity</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Do</span><span class="java_plain">&nbsp;nothing</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;insert</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;row&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">getRow</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">row&nbsp;</span><span class="java_operator">!=</span><span class="java_plain">&nbsp;</span><span class="java_literal">null</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;rowIndex&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">getRowIndex</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;rowIndexList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;rowIndexMap</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">rowIndex</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score&nbsp;</span><span class="java_operator">-=</span><span class="java_plain">&nbsp;rowIndexList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowIndexList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;ascendingDiagonalIndexList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;ascendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getAscendingDiagonalIndex</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score&nbsp;</span><span class="java_operator">-=</span><span class="java_plain">&nbsp;ascendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;descendingDiagonalIndexList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;descendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getDescendingDiagonalIndex</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score&nbsp;</span><span class="java_operator">-=</span><span class="java_plain">&nbsp;descendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;retract</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;row&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">getRow</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">row&nbsp;</span><span class="java_operator">!=</span><span class="java_plain">&nbsp;</span><span class="java_literal">null</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;rowIndexList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;rowIndexMap</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getRowIndex</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowIndexList</span><span class="java_separator">.</span><span class="java_plain">remove</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;rowIndexList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;ascendingDiagonalIndexList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;ascendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getAscendingDiagonalIndex</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ascendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">remove</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;ascendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Queen</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;descendingDiagonalIndexList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;descendingDiagonalIndexMap</span><span class="java_separator">.</span><span class="java_plain">get</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getDescendingDiagonalIndex</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">remove</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;score&nbsp;</span><span class="java_operator">+=</span><span class="java_plain">&nbsp;descendingDiagonalIndexList</span><span class="java_separator">.</span><span class="java_plain">size</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">SimpleScore</span><span class="java_plain">&nbsp;calculateScore</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_type">SimpleScore</span><span class="java_separator">.</span><span class="java_plain">valueOf</span><span class="java_separator">(</span><span class="java_plain">score</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Configure it in your solver configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">incrementalScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.solver.score.NQueensAdvancedIncrementalScoreCalculator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">incrementalScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Optionally, to get better output when the <code class="literal">IncrementalScoreCalculator</code> is corrupted in
      <code class="literal">environmentMode</code> <code class="literal">FAST_ASSERT</code> or <code class="literal">FULL_ASSERT</code>, you can
      overwrite the method <code class="literal">buildScoreCorruptionAnalysis</code> from
      <code class="literal">AbstractIncrementalScoreCalculator</code>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4387"/>5.3.4. Drools score calculation</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e4390"/>5.3.4.1. Overview</h4></div></div></div><p>Implement your score calculation using the Drools rule engine. Every score constraint is written as one or
        more score rules.</p><div class="itemizedlist"><ul><li><p>Advantages:</p><div class="itemizedlist"><ul><li><p>Incremental score calculation for free</p><div class="itemizedlist"><ul><li><p>Because most DRL syntax uses forward chaining, it does incremental calculation without any
                    extra code</p></li></ul></div></li><li><p>Score constraints are isolated as separate rules</p><div class="itemizedlist"><ul><li><p>Easy to add or edit existing score rules</p></li></ul></div></li><li><p>Flexibility to augment your score constraints by</p><div class="itemizedlist"><ul><li><p>Defining them in decision tables</p><div class="itemizedlist"><ul><li><p>Excel (XLS) spreadsheet</p></li><li><p>Guvnor WebUI</p></li></ul></div></li><li><p>Translate them into natural language with DSL</p></li><li><p>Store and release in the Guvnor repository</p></li></ul></div></li><li><p>Performance optimizations in future versions for free</p><div class="itemizedlist"><ul><li><p>In every release, the Drools rule engine tends to become faster.</p></li></ul></div></li></ul></div></li><li><p>Disadvantages:</p><div class="itemizedlist"><ul><li><p>DRL learning curve</p></li><li><p>Usage of DRL</p><div class="itemizedlist"><ul><li><p>Polyglot fear can prohibit the use of a new language such as DRL in some organizations</p></li></ul></div></li></ul></div></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e4455"/>5.3.4.2. Drools score rules configuration</h4></div></div></div><p>There are several ways to define where your score rules live.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h5 class="title"><a id="d0e4460"/>5.3.4.2.1. A scoreDrl resource on the classpath</h5></div></div></div><p>This is the easy way: the score rule live in a DRL file which is a resource on the classpath. Just add
          your score rules <code class="filename">*.drl</code> file in the solver configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">/org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>You can add multiple <code class="literal">&lt;scoreDrl&gt;</code> entries if needed, but normally you'll define
          all your score rules in 1 file.</p><p>Optionally, you can also set drools configuration properties but beware of backwards compatibility
          issues:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">/org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">kieBaseConfigurationProperties</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">drools.equalityBehavior</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">drools.equalityBehavior</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">kieBaseConfigurationProperties</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h5 class="title"><a id="d0e4479"/>5.3.4.2.2. A KieBase (possibly defined by Drools Workbench)</h5></div></div></div><p>If you prefer to build the <code class="literal">KieBase</code> yourself or if you're combining Planner with
          Drools Workbench (formerly known as Guvnor), you can set the <code class="literal">KieBase</code> on the
          <code class="literal">SolverFactory</code> before building the <code class="literal">Solver</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;solverFactory</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">getSolverConfig</span><!-- <br/> --><span class="java_separator">().</span><!-- <br/> --><span class="java_plain">getScoreDirectorFactoryConfig</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">setKieBase</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">kieBase</span><!-- <br/> --><span class="java_separator">);</span></pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>To be able to define your score rules in Drools Workbench, you'll want to:</p><div class="orderedlist"><ol><li><p>Upload the optaplanner-core jar as a POJO model.</p></li><li><p>Add a global variable called <code class="literal">scoreHolder</code> (see below).</p></li></ol></div></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e4511"/>5.3.4.3. Implementing a score rule</h4></div></div></div><p>Here's an example of a score constraint implemented as a score rule in a DRL file:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">rule "multipleQueensHorizontal"
    when
        Queen($id : id, row != null, $i : rowIndex)
        Queen(id &gt; $id, rowIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end</pre><p>This score rule will fire once for every 2 queens with the same <code class="literal">rowIndex</code>. The
        <code class="literal">(id &gt; $id)</code> condition is needed to assure that for 2 queens A and B, it can only fire for
        (A, B) and not for (B, A), (A, A) or (B, B). Let's take a closer look at this score rule on this solution of 4
        queens:</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/unsolvedNQueens04.png"/></div><p>In this solution the multipleQueensHorizontal score rule will fire for 6 queen couples: (A, B), (A, C),
        (A, D), (B, C), (B, D) and (C, D). Because none of the queens are on the same vertical or diagonal line, this
        solution will have a score of <code class="literal">-6</code>. An optimal solution of 4 queens has a score of
        <code class="literal">0</code>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Notice that every score rule will relate to at least 1 planning entity class (directly or indirectly
          though a logically inserted fact).</p><p>This is normal: it would be a waste of time to write a score rule that only relates to problem facts, as
          the consequence will never change during planning, no matter what the possible solution.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>The variable <code class="literal">kcontext</code> is a magic variable in Drools Expert. The scoreHolder's method
          uses it to do incremental score calculation correctly and to create a <code class="literal">ConstraintMatch</code>
          instance.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e4551"/>5.3.4.4. Weighing score rules</h4></div></div></div><p>A <code class="literal">ScoreHolder</code> instance is asserted into the <code class="literal">KieSession</code> as a global
        called <code class="literal">scoreHolder</code>. Your score rules need to (directly or indirectly) update that
        instance.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">global SimpleScoreHolder scoreHolder;

rule "multipleQueensHorizontal"
    when
        Queen($id : id, row != null, $i : rowIndex)
        Queen(id &gt; $id, rowIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end

// multipleQueensVertical is obsolete because it is always 0

rule "multipleQueensAscendingDiagonal"
    when
        Queen($id : id, row != null, $i : ascendingDiagonalIndex)
        Queen(id &gt; $id, ascendingDiagonalIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end

rule "multipleQueensDescendingDiagonal"
    when
        Queen($id : id, row != null, $i : descendingDiagonalIndex)
        Queen(id &gt; $id, descendingDiagonalIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end</pre><p>Most use cases will also weigh their constraint types or even their matches differently, by using a
        specific weight for each constraint match.</p><p>Here's an example from CurriculumCourse, where assigning a <code class="literal">Lecture</code> to a
        <code class="literal">Room</code> which is missing 2 seats is weighted equally bad as having 1 isolated
        <code class="literal">Lecture</code> in a <code class="literal">Curriculum</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">global HardSoftScoreHolder scoreHolder;

// RoomCapacity: For each lecture, the number of students that attend the course must be less or equal
// than the number of seats of all the rooms that host its lectures.
// Each student above the capacity counts as 1 point of penalty.
rule "roomCapacity"
    when
        $room : Room($capacity : capacity)
        $lecture : Lecture(room == $room, studentSize &gt; $capacity, $studentSize : studentSize)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($capacity - $studentSize));
end

// CurriculumCompactness: Lectures belonging to a curriculum should be adjacent
// to each other (i.e., in consecutive periods).
// For a given curriculum we account for a violation every time there is one lecture not adjacent
// to any other lecture within the same day.
// Each isolated lecture in a curriculum counts as 2 points of penalty.
rule "curriculumCompactness"
    when
        ...
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -2);
end</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4585"/>5.3.5. Detecting invalid scores</h3></div></div></div><p>Put the <code class="literal">environmentMode</code> in <code class="literal">FULL_ASSERT</code> (or
      <code class="literal">FAST_ASSERT</code>) to detect corruption in the <a class="link" href="#incrementalScoreCalculation" title="5.4.3. Incremental score calculation (with delta's)">incremental score calculation</a>. For more information, <a class="link" href="#environmentMode" title="4.4.3. Environment mode: Are there bugs in my code?">see the section about <code class="literal">environmentMode</code></a>. However, that will not
      verify that your score calculator implements your score constraints as your business actually desires.</p><p>A piece of incremental score calculator code can be difficult to write and to review. Assert its correctness
      by using a different implementation (for example a <code class="literal">SimpleScoreCalculator</code>) to do the assertions
      triggered by the <code class="literal">environmentMode</code>. Just configure the different implementation as a
      <code class="literal">assertionScoreDirectorFactory</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">environmentMode</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FAST_ASSERT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">environmentMode</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">/org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">assertionScoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.solver.score.NQueensSimpleScoreCalculator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">simpleScoreCalculatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">assertionScoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>This way, the <code class="literal">scoreDrl</code> will be validated by the
      <code class="literal">SimpleScoreCalculator</code>.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e4628"/>5.4. Score calculation performance tricks</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4631"/>5.4.1. Overview</h3></div></div></div><p>The <code class="literal">Solver</code> will normally spend most of its execution time running the score calculation
      (which is called in its deepest loops). Faster score calculation will return the same solution in less time with
      the same algorithm, which normally means a better solution in equal time.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4639"/>5.4.2. Average calculation count per second</h3></div></div></div><p>After solving a problem, the <code class="literal">Solver</code> will log the <span class="emphasis"><em>average calculation count per
      second</em></span>. This is a good measurement of Score calculation performance, despite that it is affected by non
      score calculation execution time. It depends on the problem scale of the problem dataset. Normally, even for high
      scale problems, it is higher than <code class="literal">1000</code>, except when you're using
      <code class="literal">SimpleScoreCalculator</code>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>When improving your score calculation, focus on maximizing the average calculation count per second,
        instead of maximizing the best score. A big improvement in score calculation can sometimes yield little or no
        best score improvement, for example when the algorithm is stuck in a local or global optima. If you're watching
        the calculation count instead, score calculation improvements are far more visible.</p><p>Furthermore, watching the calculation count, allows you to remove or add score constraints, and still
        compare it with the original calculation count. Comparing the best score with the original would be wrong,
        because it's comparing apples and oranges.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="incrementalScoreCalculation"/>5.4.3. Incremental score calculation (with delta's)</h3></div></div></div><p>When a <code class="literal">Solution</code> changes, incremental score calculation (AKA delta based score
      calculation), will calculate the delta with the previous state to find the new <code class="literal">Score</code>, instead
      of recalculating the entire score on every solution evaluation.</p><p>For example, if a single queen A moves from row <code class="literal">1</code> to <code class="literal">2</code>, it won't
      bother to check if queen B and C can attack each other, since neither of them changed.</p><div class="figure"><a id="d0e4680"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Score_calculation/deltaBasedScoreCalculationNQueens04.png" alt="Incremental score calculation for the 4 queens puzzle"/></div></div><p class="title"><b>Figure 5.1. Incremental score calculation for the 4 queens puzzle</b></p></div><br class="figure-break"/><p>This is a huge performance and scalability gain. <span class="bold"><strong>Drools score calculation gives you
      this huge scalability gain without forcing you to write a complicated incremental score calculation
      algorithm.</strong></span> Just let the Drools rule engine do the hard work.</p><p>Notice that the speedup is relative to the size of your planning problem (your <span class="emphasis"><em>n</em></span>),
      making incremental score calculation far more scalable.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4696"/>5.4.4. Avoid calling remote services during score calculation</h3></div></div></div><p>Do not call remote services in your score calculation (except if you're bridging
      <code class="literal">SimpleScoreCalculator</code> to a legacy system). The network latency will kill your score calculation
      performance. Cache the results of those remote services if possible.</p><p>If some parts of a constraint can be calculated once, when the <code class="literal">Solver</code> starts, and never
      change during solving, then turn them into <a class="link" href="#cachedProblemFact" title="4.3.6.5. Cached problem fact">cached problem facts</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4712"/>5.4.5. Unused constraint</h3></div></div></div><p>If you know a certain constraint can never be broken, don't bother writing a score constraint for it. For
      example in n queens, the score calculation doesn't check if multiple queens occupy the same column, because a
      <code class="literal">Queen</code>'s <code class="literal">column</code> never changes and every <code class="literal">Solution</code> starts
      with each <code class="literal">Queen</code> on a different <code class="literal">column</code>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Don't go overboard with this. If some datasets don't use a specific constraint but others do, just return
        out of the constraint as soon as you can. There is no need to dynamically change your score calculation based on
        the dataset.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="buildInHardConstraint"/>5.4.6. Build-in hard constraint</h3></div></div></div><p>Instead of implementing a hard constraint, you can sometimes make it build-in too. For example: If
      <code class="literal">Lecture</code> A should never be assigned to <code class="literal">Room</code> X, but it uses ValueRangeProvider
      on Solution, the <code class="literal">Solver</code> will often try to assign it to <code class="literal">Room</code> X too (only to
      find out that it breaks a hard constraint). Use <a class="link" href="#filteredSelection" title="7.2.4. Filtered selection">filtered selection</a> to
      define that Course A should only be assigned a <code class="literal">Room</code> other than X.</p><p>This tends to give a good performance gain, not just because the score calculation is faster, but mainly
      because most optimization algorithms will spend less time evaluating unfeasible solutions.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Don't go overboard with this. Many optimization algorithms rely on the freedom to break hard constraints
        when changing planning entities, to get out of local optima. There is a real risk of trading short term benefits
        for long term harm.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4763"/>5.4.7. Other performance tricks</h3></div></div></div><div class="itemizedlist"><ul><li><p>Verify that your score calculation happens in the correct <code class="literal">Number</code> type. If you're
          making the sum of <code class="literal">int</code> values, don't let Drools sum it in a <code class="literal">double</code> which
          takes longer.</p></li><li><p>For optimal performance, always use server mode (<code class="literal">java -server</code>). We have seen
          performance increases of 50% by turning on server mode.</p></li><li><p>For optimal performance, use the latest Java version. For example, in the past we have seen performance
          increases of 30% by switching from java 1.5 to 1.6.</p></li><li><p>Always remember that premature optimization is the root of all evil. Make sure your design is flexible
          enough to allow configuration based tweaking.</p></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="scoreTrap"/>5.4.8. Score trap</h3></div></div></div><p>Make sure that none of your score constraints cause a score trap. A trapped score constraint uses the same
      weight for different constraint matches, when it could just as easily use a different weight. It effectively lumps
      its constraint matches together, which creates a flatlined score function for that constraint. This can cause a
      solution state in which several moves need to be done to resolve or lower the weight of that single constraint.
      Some examples of score traps:</p><div class="itemizedlist"><ul><li><p>If you need 2 doctors at each table, but you're only moving 1 doctor at a time. So the solver has no
          incentive to move a doctor to a table with no doctors. Punish a table with no doctors more then a table with
          only 1 doctor in that score constraint in the score function.</p></li><li><p>2 exams needs to be conducted at the same time, but you're only move 1 exam at a time. So the solver has
          a disincentive move one of those exams to another timeslot without moving the other in the same move. Add a
          course-grained move that moves both exams at the same time.</p></li></ul></div><p>For example, consider this score trap. If the blue item moves from an overloaded computer to an empty
      computer, the hard score should improve. The trapped score implementation fails to do that:</p><div class="mediaobject"><img src="images/Chapter-Score_calculation/scoreTrap.png"/></div><p>The Solver should eventually get out of this trap, but it will take a lot of effort (especially if there are
      even more processes on the overloaded computer). Before they do that, they might actually start moving more
      processes into that overloaded computer, as there is no penalty for doing so.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Avoiding score traps does not mean that your score function should be smart enough to avoid local optima.
        Leave it to the optimization algorithms to deal with the local optima.</p><p>Avoiding score traps means to avoid - for each score constraint individually - a flatlined score
        function.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>Always specify the degree of infeasibility. The business will often say: "if the solution is infeasible,
        it doesn't matter how infeasible it." While that's true for the business, it's not true for score calculation:
        it benefits from knowing how infeasible it is. In practice, soft constraints usually do this naturally and it's
        just a matter of doing it for the hard constraints too.</p></div><p>There are several ways to deal with a score trap:</p><div class="itemizedlist"><ul><li><p>Improve the score constraint to make a distinction in the score weight. For example: penalize
          <code class="literal">-1hard</code> for every missing CPU, instead of just <code class="literal">-1hard</code> if any CPU is
          missing.</p></li><li><p>If changing the score constraint is not allowed from the business perspective, add a lower score level
          with a score constraint that makes such a distinction. For example: penalize <code class="literal">-1subsoft</code> for
          every missing CPU, on top of <code class="literal">-1hard</code> if any CPU is missing. The business ignores the subsoft
          score level.</p></li><li><p>Add course-grained moves and union select them with the existing fine-grained moves. A course-grained
          move effectively does multiple moves to directly get out of a score trap with a single move. For example: move
          multiple items from the same container to another container.</p></li></ul></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e4842"/>5.4.9. stepLimit benchmark</h3></div></div></div><p>Not all score constraints have the same performance cost. Sometimes 1 score constraint can kill the score
      calculation performance outright. Use the benchmarker to do a 1 minute run and check what happens to the average
      calculation count per second if you comment out all but 1 of the score constraints.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e4847"/>5.5. Reusing the score calculation outside the Solver</h2></div></div></div><p>Other parts of your application, for example your webUI, might need to calculate the score too. Do that by
    reusing the <code class="literal">ScoreDirectorFactory</code> of the <code class="literal">Solver</code> to build a separate
    <code class="literal">ScoreDirector</code> for that webUI:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_type">ScoreDirectorFactory</span><!-- <br/> --><span class="java_plain">&nbsp;scoreDirectorFactory&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;solver</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">getScoreDirectorFactory</span><!-- <br/> --><span class="java_separator">();</span>
<!--  --><br/><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;guiScoreDirector&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;scoreDirectorFactory</span><span class="java_separator">.</span><span class="java_plain">buildScoreDirector</span><span class="java_separator">();</span></pre><p>Then use it when you need to calculate the <code class="literal">Score</code> of a <code class="literal">Solution</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">guiScoreDirector</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">setWorkingSolution</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">solution</span><!-- <br/> --><span class="java_separator">);</span>
<!--  --><br/><span class="java_type">Score</span><span class="java_plain">&nbsp;score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;guiScoreDirector</span><span class="java_separator">.</span><span class="java_plain">calculateScore</span><span class="java_separator">();</span></pre><p>To explain in the GUI what entities are causing which part of the <code class="literal">Score</code>, get the
    <code class="literal">ConstraintMatch</code> objects from the <code class="literal">ScoreDirector</code> (after calling
    <code class="literal">calculateScore()</code>):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">for</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_type">ConstraintMatchTotal</span><!-- <br/> --><span class="java_plain">&nbsp;constraintMatchTotal&nbsp;</span><!-- <br/> --><span class="java_operator">:</span><!-- <br/> --><span class="java_plain">&nbsp;guiScoreDirector</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_plain">getConstraintMatchTotals</span><!-- <br/> --><span class="java_separator">())</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">String</span><span class="java_plain">&nbsp;constraintName&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;constraintMatchTotal</span><span class="java_separator">.</span><span class="java_plain">getConstraintName</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Number</span><span class="java_plain">&nbsp;weightTotal&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;constraintMatchTotal</span><span class="java_separator">.</span><span class="java_plain">getWeightTotalAsNumber</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">ConstraintMatch</span><span class="java_plain">&nbsp;constraintMatch&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;constraintMatchTotal</span><span class="java_separator">.</span><span class="java_plain">getConstraintMatchSet</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;justificationList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;constraintMatch</span><span class="java_separator">.</span><span class="java_plain">getJustificationList</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Number</span><span class="java_plain">&nbsp;weight&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;constraintMatch</span><span class="java_separator">.</span><span class="java_plain">getWeightAsNumber</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_separator">}</span></pre></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="optimizationAlgorithms"/>Chapter 6. Optimization algorithms</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e4892">6.1. Search space size in the real world</a></span></dt><dt><span class="section"><a href="#d0e4944">6.2. Does Planner find the optimal solution?</a></span></dt><dt><span class="section"><a href="#d0e4975">6.3. Architecture overview</a></span></dt><dt><span class="section"><a href="#d0e4996">6.4. Optimization algorithms overview</a></span></dt><dt><span class="section"><a href="#d0e5257">6.5. Which optimization algorithms should I use?</a></span></dt><dt><span class="section"><a href="#d0e5314">6.6. SolverPhase</a></span></dt><dt><span class="section"><a href="#scopeOverview">6.7. Scope overview</a></span></dt><dt><span class="section"><a href="#d0e5378">6.8. Termination</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e5414">6.8.1. TimeMillisSpendTermination</a></span></dt><dt><span class="section"><a href="#d0e5449">6.8.2. ScoreAttainedTermination</a></span></dt><dt><span class="section"><a href="#d0e5468">6.8.3. StepCountTermination</a></span></dt><dt><span class="section"><a href="#d0e5486">6.8.4. UnimprovedStepCountTermination</a></span></dt><dt><span class="section"><a href="#d0e5506">6.8.5. Combining multiple Terminations</a></span></dt><dt><span class="section"><a href="#d0e5519">6.8.6. Asynchronous termination from another thread</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e5546">6.9. SolverEventListener</a></span></dt><dt><span class="section"><a href="#d0e5567">6.10. Custom SolverPhase</a></span></dt></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e4892"/>6.1. Search space size in the real world</h2></div></div></div><p>The number of possible solutions for a planning problem can be mind blowing. For example:</p><div class="itemizedlist"><ul><li><p>4 queens has <code class="literal">256</code> possible solutions (<code class="literal">4 ^ 4</code>) and 2 optimal
        solutions.</p></li><li><p>5 queens has <code class="literal">3125</code> possible solutions (<code class="literal">5 ^ 5</code>) and 1 optimal
        solution.</p></li><li><p>8 queens has <code class="literal">16777216</code> possible solutions (<code class="literal">8 ^ 8</code>) and 92 optimal
        solutions.</p></li><li><p>64 queens has more than <code class="literal">10^115</code> possible solutions (<code class="literal">64 ^ 64</code>).</p></li><li><p>Most real-life planning problems have an incredible number of possible solutions and only 1 or a few
        optimal solutions.</p></li></ul></div><p>For comparison: the minimal number of atoms in the known universe (10^80). As a planning problem gets bigger,
    the search space tends to blow up really fast. Adding only 1 extra planning entity or planning value can heavily
    multiply the running time of some algorithms.</p><p>An algorithm that checks every possible solution (even with pruning) can easily run for billions of years on a
    single real-life planning problem. What we really want is to <span class="bold"><strong>find the best solution in the
    limited time at our disposal</strong></span>. Planning competitions (such as the International Timetabling Competition)
    show that local search variations (tabu search, simulated annealing, ...) usually perform best for real-world
    problems given real-world time limitations.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e4944"/>6.2. Does Planner find the optimal solution?</h2></div></div></div><p>The business wants the optimal solution, but they also have other requirements:</p><div class="itemizedlist"><ul><li><p>Scale out: Large production datasets must not crash and have good results too.</p></li><li><p>Optimize the right problem: The constraints must match the actual business needs.</p></li><li><p>Available time: The solution must be found in time, before it becomes useless to execute.</p></li><li><p>Reliability: Every dataset must have at least a decent result (better than a human planner).</p></li></ul></div><p>Given these requirements, and despite the promises of some salesmen, it's usually impossible for anyone or
    anything to find the optimal solution. Therefore, Planner focuses on finding the best solution in available time. In
    <a class="link" href="#examplesOverview" title="3.1. Examples overview">realistic, independent competitions</a>, Planner often comes out as the best
    <span class="emphasis"><em>reusable</em></span> software.</p><p>The nature of NP-complete problems make scaling a prime concern. <span class="bold"><strong>The result quality of a
    small dataset guarantees nothing about the result quality of a large dataset.</strong></span> Scaling problems cannot be
    mitigated by hardware purchases. Start testing with a production sized dataset as soon as possible. Don't asses
    quality on small datasets (unless production encounters such datasets). Instead, solve a production sized dataset
    and compare with the results of longer execution, different algorithms and - if available - the human
    planner.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e4975"/>6.3. Architecture overview</h2></div></div></div><p>OptaPlanner is the first framework to combine optimization algorithms (metaheuristics, ...) with score
    calculation by a rule engine such as Drools Expert. This combination turns out to be a very efficient,
    because:</p><div class="itemizedlist"><ul><li><p>A rule engine such as Drools Expert is <span class="bold"><strong>great for calculating the score</strong></span> of
        a solution of a planning problem. It makes it easy and scalable to add additional soft or hard constraints such
        as "a teacher shouldn't teach more then 7 hours a day". It does delta based score calculation without any extra
        code. However it tends to be not suitable to actually find new solutions.</p></li><li><p>An optimization algorithm is <span class="bold"><strong>great at finding new improving solutions</strong></span> for
        a planning problem, without necessarily brute-forcing every possibility. However it needs to know the score of a
        solution and offers no support in calculating that score efficiently.</p></li></ul></div><div class="mediaobject"><img src="images/Chapter-Optimization_algorithms/architectureOverview.png"/></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e4996"/>6.4. Optimization algorithms overview</h2></div></div></div><div class="table"><a id="d0e4999"/><p class="title"><b>Table 6.1. Optimization algorithms overview</b></p><div class="table-contents"><table summary="Optimization algorithms overview" border="1"><colgroup><col align="left"/><col align="center"/><col align="center"/><col align="center"/><col align="center"/><col align="center"/></colgroup><thead><tr><th align="left">Algorithm</th><th align="center">Scalable?</th><th align="center">Optimal?</th><th align="center">Easy to use?</th><th align="center">Tweakable?</th><th align="center">Requires CH?</th></tr></thead><tbody><tr><td align="left"><span class="bold"><strong>Exact algorithms</strong></span></td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="left">  Brute force</td><td align="center">0/5</td><td align="center">5/5</td><td align="center">5/5</td><td align="center">0/5</td><td align="center">No</td></tr><tr><td align="left">  Branch and bound</td><td align="center">0/5</td><td align="center">5/5</td><td align="center">4/5</td><td align="center">1/5</td><td align="center">No</td></tr><tr><td align="left"><span class="bold"><strong>Construction heuristics (CH)</strong></span></td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="left">  First Fit</td><td align="center">5/5</td><td align="center">1/5</td><td align="center">5/5</td><td align="center">1/5</td><td align="center">No</td></tr><tr><td align="left">  First Fit Decreasing</td><td align="center">5/5</td><td align="center">2/5</td><td align="center">4/5</td><td align="center">2/5</td><td align="center">No</td></tr><tr><td align="left">  Best Fit</td><td align="center">5/5</td><td align="center">2/5</td><td align="center">4/5</td><td align="center">2/5</td><td align="center">No</td></tr><tr><td align="left">  Best Fit Decreasing</td><td align="center">5/5</td><td align="center">2/5</td><td align="center">4/5</td><td align="center">2/5</td><td align="center">No</td></tr><tr><td align="left">  Cheapest Insertion</td><td align="center">3/5</td><td align="center">2/5</td><td align="center">5/5</td><td align="center">2/5</td><td align="center">No</td></tr><tr><td align="left"><span class="bold"><strong>Metaheuristics (MH)</strong></span></td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="left">  Local Search</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="left">    Hill-Climbing</td><td align="center">5/5</td><td align="center">2/5</td><td align="center">4/5</td><td align="center">3/5</td><td align="center">Yes</td></tr><tr><td align="left">    Tabu Search</td><td align="center">5/5</td><td align="center">4/5</td><td align="center">3/5</td><td align="center">5/5</td><td align="center">Yes</td></tr><tr><td align="left">    Simulated Annealing</td><td align="center">5/5</td><td align="center">4/5</td><td align="center">2/5</td><td align="center">5/5</td><td align="center">Yes</td></tr><tr><td align="left">    Late Acceptance</td><td align="center">5/5</td><td align="center">4/5</td><td align="center">3/5</td><td align="center">5/5</td><td align="center">Yes</td></tr><tr><td align="left">    Late Simulated Annealing</td><td align="center">5/5</td><td align="center">4/5</td><td align="center">3/5</td><td align="center">5/5</td><td align="center">Yes</td></tr><tr><td align="left">  Evolutionary Algorithms</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="left">    Evolutionary Strategies</td><td align="center">4/5</td><td align="center">3/5</td><td align="center">?/5</td><td align="center">?/5</td><td align="center">Yes</td></tr><tr><td align="left">    Genetic Algorithms</td><td align="center">4/5</td><td align="center">3/5</td><td align="center">?/5</td><td align="center">?/5</td><td align="center">Yes</td></tr></tbody></table></div></div><br class="table-break"/><p>If you want to learn more about metaheuristics, read the free book <a class="link" href="http://www.cs.gmu.edu/~sean/book/metaheuristics/" target="">Essentials of Metaheuristics</a> or <a class="link" href="http://www.cleveralgorithms.com/" target="">Clever Algorithms</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e5257"/>6.5. Which optimization algorithms should I use?</h2></div></div></div><p>The <span class="emphasis"><em>best</em></span> optimization algorithms configuration for your use case depends heavily on your
    use case. Nevertheless, this vanilla recipe will get you into the game with a pretty good configuration, probably
    much better than what you're used to.</p><p>Start with a quick configuration that involves little or no configuration and optimization code:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p>First Fit</p></li></ol></div><p>Next, implement planning entity difficulty comparison and turn it into:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p>First Fit Decreasing</p></li></ol></div><p>Next, implement moves and add tabu search behind it:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p>First Fit Decreasing</p></li><li><p>Tabu Search (use planning entity tabu)</p></li></ol></div><p>At this point <span class="emphasis"><em>the free lunch is over</em></span>. The return on invested time lowers. The result is
    probably already more than good enough.</p><p>But you can do even better, at a lower return on invested time. Use the Benchmarker and try a couple of
    Simulated Annealing or Late Acceptance configurations, for example:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p>First Fit Decreasing</p></li><li><p>Late Acceptance (try several sizes)</p></li></ol></div><p>And combine them with Tabu Search:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p>First Fit Decreasing</p></li><li><p>Late Acceptance (relatively long time)</p></li><li><p>Tabu Search (relatively short time)</p></li></ol></div><p>If you have time, continue experimenting even further. Blog about your experiments!</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e5314"/>6.6. <code class="literal">SolverPhase</code></h2></div></div></div><p>A <code class="literal">Solver</code> can use multiple optimization algorithms in sequence. <span class="bold"><strong>Each
    optimization algorithm is represented by a <code class="literal">SolverPhase</code>.</strong></span> There is never more than 1
    <code class="literal">SolverPhase</code> solving at the same time.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Some <code class="literal">SolverPhase</code> implementations can combine techniques from multiple optimization
      algorithms, but they are still just 1 <code class="literal">SolverPhase</code>. For example: a local search
      <code class="literal">SolverPhase</code> can do simulated annealing with planning entity tabu.</p></div><p>Here's a configuration that runs 3 phases in sequence:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;First&nbsp;phase:&nbsp;First&nbsp;Fit&nbsp;Decreasing&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Second&nbsp;phase:&nbsp;Simulated&nbsp;Annealing&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Third&nbsp;phase:&nbsp;Tabu&nbsp;Search&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The solver phases are run in the order defined by solver configuration. When the first phase terminates, the
    second phase starts, and so on. When the last phase terminates, the <code class="literal">Solver</code> terminates. Usually, a
    solver will first run a construction heuristic and then run 1 or multiple metaheuristics:</p><div class="mediaobject"><img src="images/Chapter-Optimization_algorithms/generalPhaseSequence.png"/></div><p>Some phases (especially construction heuristics) will terminate automatically. Other phases (especially
    metaheuristics) will only terminate if the phase is configured to terminate:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_comment">&lt;!--&nbsp;Solver&nbsp;termination&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">90</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_comment">&lt;!--&nbsp;Phase&nbsp;termination&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">60</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_comment">&lt;!--&nbsp;Give&nbsp;the&nbsp;next&nbsp;phase&nbsp;a&nbsp;chance&nbsp;to&nbsp;run&nbsp;too,&nbsp;before&nbsp;the&nbsp;Solver&nbsp;terminates&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>If the <code class="literal">Solver</code> terminates (before the last phase terminates itself), the current phase is
    terminated and all subsequent phases won't run.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="scopeOverview"/>6.7. Scope overview</h2></div></div></div><p>A solver will iteratively run phases. Each phase will usually iteratively run steps. Each step, in turn,
    usually iteratively runs moves. These form 4 nested scopes: solver, phase, step and move.</p><div class="mediaobject"><img src="images/Chapter-Optimization_algorithms/scopeOverview.png"/></div><p>Configure <a class="link" href="#logging" title="4.4.4. Logging level: What is the Solver doing?">logging</a> to display the log messages of each scope.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e5378"/>6.8. Termination</h2></div></div></div><p>Not all phases terminate automatically and sometimes you don't want to wait that long anyway. A
    <code class="literal">Solver</code> can be terminated synchronously by up-front configuration or asynchronously from another
    thread.</p><p>Especially metaheuristic phases will need to be told when to stop solving. This can be because of a number of
    reasons: the time is up, the perfect score has been reached, ... The only thing you can't depend on, is on finding
    the optimal solution (unless you know the optimal score), because a metaheuristic algorithm generally doesn't know
    it when it finds the optimal solution. For real-life problems this doesn't turn out to be much of a problem, because
    finding the optimal solution could take billions of years, so you 'll want to terminate sooner anyway. The only
    thing that matters is finding the best solution in the available time.</p><p>For synchronous termination, configure a <code class="literal">Termination</code> on a <code class="literal">Solver</code> or a
    <code class="literal">SolverPhase</code> when it needs to stop. You can implement your own <code class="literal">Termination</code>, but
    the build-in implementations should suffice for most needs. Every <code class="literal">Termination</code> can calculate a
    <span class="emphasis"><em>time gradient</em></span> (needed for some optimization algorithms), which is a ratio between the time
    already spend solving and the estimated entire solving time of the <code class="literal">Solver</code> or
    <code class="literal">SolverPhase</code>.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5414"/>6.8.1. TimeMillisSpendTermination</h3></div></div></div><p>Terminates when an amount of time has been reached:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumTimeMillisSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">500</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumTimeMillisSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">10</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumMinutesSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">5</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumMinutesSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumHoursSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumHoursSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>If you use this <code class="literal">Termination</code>, you will most likely sacrifice perfect reproducibility
        (even with <code class="literal">environmentMode</code> <code class="literal">REPRODUCIBLE</code>) because of an available CPU time
        difference:</p><div class="itemizedlist"><ul><li><p>The available CPU time influences the number of steps that can be taken, which might be a few more or
            less.</p></li><li><p>The <code class="literal">Termination</code> might produce slightly different time gradient values, which will
            send time gradient based algorithms (such as simulated annealing) on a radically different path.</p></li></ul></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5449"/>6.8.2. ScoreAttainedTermination</h3></div></div></div><p>Terminates when a certain score has been reached. You can use this <code class="literal">Termination</code> if you
      know the perfect score, for example for 4 queens:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">0</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>For a planning problem with hard and soft constraints, it could look like this:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">0hard/-5000soft</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>You can use this <code class="literal">Termination</code> to terminate once it reaches a feasible solution.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5468"/>6.8.3. StepCountTermination</h3></div></div></div><p>Terminates when an amount of steps has been reached:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">100</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>This <code class="literal">Termination</code> can only be used for a <code class="literal">SolverPhase</code>, not for the
      <code class="literal">Solver</code> itself.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5486"/>6.8.4. UnimprovedStepCountTermination</h3></div></div></div><p>Terminates when the best score hasn't improved in a number of steps:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumUnimprovedStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">100</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumUnimprovedStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>If the score hasn't improved recently, it's probably not going to improve soon anyway and it's not worth the
      effort to continue. We have observed that once a new best solution is found (even after a long time of no
      improvement on the best solution), the next few steps tend to improve the best solution too.</p><p>This <code class="literal">Termination</code> can only be used for a <code class="literal">SolverPhase</code>, not for the
      <code class="literal">Solver</code> itself.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5506"/>6.8.5. Combining multiple Terminations</h3></div></div></div><p>Terminations can be combined, for example: terminate after 100 steps or if a score of 0 has been
      reached:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">terminationCompositionStyle</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">OR</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">terminationCompositionStyle</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">100</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">0</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Alternatively you can use AND, for example: terminate after reaching a feasible score of at least -100 and
      no improvements in 5 steps:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">terminationCompositionStyle</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">AND</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">terminationCompositionStyle</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumUnimprovedStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">5</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumUnimprovedStepCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">-100</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreAttained</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>This example ensures it doesn't just terminate after finding a feasible solution, but also completes any
      obvious improvements on that solution before terminating.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5519"/>6.8.6. Asynchronous termination from another thread</h3></div></div></div><p>Sometimes you'll want to terminate a Solver early from another thread, for example because a user action or
      a server restart. This cannot be configured by a <code class="literal">Termination</code> as it's impossible to predict when
      and if it will occur. Therefore the <code class="literal">Solver</code> interface has these 2 thread-safe methods:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solver</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;terminateEarly</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;isTerminateEarly</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>If you call the <code class="literal">terminateEarly()</code> method from another thread, the
      <code class="literal">Solver</code> will terminate at its earliest convenience and the <code class="literal">solve()</code> method
      will return in the original <code class="literal">Solver</code> thread.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e5546"/>6.9. SolverEventListener</h2></div></div></div><p>Each time a new best solution is found, the <code class="literal">Solver</code> fires a
    <code class="literal">BestSolutionChangedEvent</code>.</p><p>To listen to such events, add a <code class="literal">SolverEventListener</code> to the
    <code class="literal">Solver</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solver</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;addEventListener</span><span class="java_separator">(</span><span class="java_type">SolverEventListener</span><span class="java_plain">&nbsp;eventListener</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;removeEventListener</span><span class="java_separator">(</span><span class="java_type">SolverEventListener</span><span class="java_plain">&nbsp;eventListener</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e5567"/>6.10. Custom SolverPhase</h2></div></div></div><p>Between phases or before the first phase, you might want to execute a custom action on the
    <code class="literal">Solution</code> to get a better score. Yet you'll still want to reuse the score calculation. For
    example, to implement a custom construction heuristic without implementing an entire
    <code class="literal">SolverPhase</code>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Most of the time, a custom construction heuristic is not worth the hassle. The supported constructions
      heuristics are configurable (so you can tweak them with the <code class="literal">Benchmarker</code>),
      <code class="literal">Termination</code> aware and support partially initialized solutions too.</p></div><p>Implement the <code class="literal">CustomSolverPhaseCommand</code> interface:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CustomSolverPhaseCommand</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;changeWorkingSolution</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>For example:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">ExaminationSolutionInitializer</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CustomSolverPhaseCommand</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;changeWorkingSolution</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Examination</span><span class="java_plain">&nbsp;examination&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Examination</span><span class="java_separator">)</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">getWorkingSolution</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Exam</span><span class="java_plain">&nbsp;exam&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;examination</span><span class="java_separator">.</span><span class="java_plain">getExamList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Score</span><span class="java_plain">&nbsp;unscheduledScore&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">calculateScore</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Period</span><span class="java_plain">&nbsp;period&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;examination</span><span class="java_separator">.</span><span class="java_plain">getPeriodList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">beforeVariableChanged</span><span class="java_separator">(</span><span class="java_plain">exam</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;period&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exam</span><span class="java_separator">.</span><span class="java_plain">setPeriod</span><span class="java_separator">(</span><span class="java_plain">period</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">afterVariableChanged</span><span class="java_separator">(</span><span class="java_plain">exam</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;period&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Score</span><span class="java_plain">&nbsp;score&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">calculateScore</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Any change on the planning entities in a <code class="literal">CustomSolverPhaseCommand</code> must be notified to the
      <code class="literal">ScoreDirector</code>.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Do not change any of the planning facts in a <code class="literal">CustomSolverPhaseCommand</code>. That will corrupt
      the <code class="literal">Solver</code> because any previous score or solution was for a different problem. If you want to
      do that, see <a class="link" href="#repeatedPlanning" title="Chapter 14. Repeated planning">repeated planning</a> and real-time planning instead.</p></div><p>And configure it like this:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">customSolverPhase</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">customSolverPhaseCommandClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.examination.solver.solution.initializer.ExaminationSolutionInitializer</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">customSolverPhaseCommandClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">customSolverPhase</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Other&nbsp;phases&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>It's possible to configure multiple <code class="literal">customSolverPhaseCommandClass</code> instances, which will be
    run in sequence.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>If the changes of a <code class="literal">CustomSolverPhaseCommand</code> don't result in a better score, the best
      solution won't be changed (so effectively nothing will have changed for the next <code class="literal">SolverPhase</code> or
      <code class="literal">CustomSolverPhaseCommand</code>). To force such changes anyway, use
      <code class="literal">forceUpdateBestSolution</code>:</p><pre xmlns="" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">customSolverPhase</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">customSolverPhaseCommandClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...MyUninitializer</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">customSolverPhaseCommandClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forceUpdateBestSolution</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">true</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forceUpdateBestSolution</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">customSolverPhase</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>If the <code class="literal">Solver</code> or <code class="literal">SolverPhase</code> wants to terminate while a
      <code class="literal">CustomSolverPhaseCommand</code> is still running, it will wait to terminate until the
      <code class="literal">CustomSolverPhaseCommand</code> is done, however long that takes.</p></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="moveAndNeighborhoodSelection"/>Chapter 7. <code class="literal">Move</code> and neighborhood selection</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e5665">7.1. Move and neighborhood introduction</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e5670">7.1.1. What is a Move?</a></span></dt><dt><span class="section"><a href="#d0e5748">7.1.2. What is a MoveSelector?</a></span></dt><dt><span class="section"><a href="#d0e5774">7.1.3. Subselecting of entities, values and other moves</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e5820">7.2. General Selector features</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e5826">7.2.1. CacheType: Create moves ahead of time or Just In Time</a></span></dt><dt><span class="section"><a href="#d0e5932">7.2.2. SelectionOrder: original, sorted, random, shuffled or probabilistic</a></span></dt><dt><span class="section"><a href="#d0e6076">7.2.3. Recommended combinations of CacheType and SelectionOrder</a></span></dt><dt><span class="section"><a href="#filteredSelection">7.2.4. Filtered selection</a></span></dt><dt><span class="section"><a href="#sortedSelection">7.2.5. Sorted selection</a></span></dt><dt><span class="section"><a href="#probabilisticSelection">7.2.6. Probabilistic selection</a></span></dt><dt><span class="section"><a href="#mimicSelection">7.2.7. Mimic selection (record/replay)</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e6394">7.3. Generic MoveSelectors</a></span></dt><dd><dl><dt><span class="section"><a href="#changeMoveSelector">7.3.1. changeMoveSelector</a></span></dt><dt><span class="section"><a href="#swapMoveSelector">7.3.2. swapMoveSelector</a></span></dt><dt><span class="section"><a href="#pillarSwapMoveSelector">7.3.3. pillarSwapMoveSelector</a></span></dt><dt><span class="section"><a href="#subChainChangeMoveSelector">7.3.4. subChainChangeMoveSelector</a></span></dt><dt><span class="section"><a href="#subChainSwapMoveSelector">7.3.5. subChainSwapMoveSelector</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e6579">7.4. Combining multiple MoveSelectors</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e6585">7.4.1. unionMoveSelector</a></span></dt><dt><span class="section"><a href="#d0e6654">7.4.2. cartesianProductMoveSelector</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e6708">7.5. EntitySelector</a></span></dt><dt><span class="section"><a href="#d0e6724">7.6. ValueSelector</a></span></dt><dt><span class="section"><a href="#d0e6740">7.7. Custom moves</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e6743">7.7.1. Which move types might be missing in my implementation?</a></span></dt><dt><span class="section"><a href="#d0e6756">7.7.2. Custom moves introduction</a></span></dt><dt><span class="section"><a href="#d0e6795">7.7.3. The interface Move</a></span></dt><dt><span class="section"><a href="#d0e6967">7.7.4. MoveListFactory: the easy way to generate custom moves</a></span></dt><dt><span class="section"><a href="#d0e7017">7.7.5. MoveIteratorFactory: generate custom moves just in time</a></span></dt><dt><span class="section"><a href="#d0e7093">7.7.6. Move generation through DRL</a></span></dt></dl></dd></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e5665"/>7.1. <code class="literal">Move</code> and neighborhood introduction</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5670"/>7.1.1. What is a <code class="literal">Move</code>?</h3></div></div></div><p>A <code class="literal">Move</code> is a change (or set of changes) from a solution A to a solution B. For example,
      the move below changes queen <code class="literal">C</code> from row <code class="literal">0</code> to row
      <code class="literal">2</code>:</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/singleMoveNQueens04.png"/></div><p>The new solution is called a <span class="emphasis"><em>neighbor</em></span> of the original solution, because it can be
      reached in a single <code class="literal">Move</code>. Although a single move can change multiple queens, the neighbors of a
      solution should always be a very small subset of all possible solutions. For example, on that original solution,
      these are all possible <code class="literal">changeMove</code>'s:</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/possibleMovesNQueens04.png"/></div><p>If we ignore the 4 <code class="literal">changeMove</code>'s that have not impact and are therefore not doable, we can
      see that number of moves is <code class="literal">n * (n - 1) = 12</code>. This is far less than the number of possible
      solutions, which is <code class="literal">n ^ n = 256</code>. As the problem scales out, the number of possible moves
      increases far less than the number of possible solutions.</p><p>Yet, in 4 <code class="literal">changeMove</code>'s or less we can reach any solution. For example we can reach a very
      different solution in 3 <code class="literal">changeMove</code>'s:</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/sequentialMovesNQueens04.png"/></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>There are many other types of moves besides <code class="literal">changeMove</code>'s. Many move types are included
        out-of-the-box, but you can also implement custom moves.</p><p>A <code class="literal">Move</code> can affect multiple entities or even create/delete entities. But it must not
        change the problem facts.</p></div><p>All optimization algorithms use <code class="literal">Move</code>'s to transition from one solution to a neighbor
      solution. Therefor, all the optimization algorithms are confronted with <code class="literal">Move</code> selection: the
      craft of creating and iterating moves efficiently and the art of finding the most promising subset of random moves
      to evaluate first.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5748"/>7.1.2. What is a <code class="literal">MoveSelector</code>?</h3></div></div></div><p>A <code class="literal">MoveSelector</code>'s main function is to create <code class="literal">Iterator&lt;Move&gt;</code> when
      needed. An optimization algorithm will iterate through a subset of those moves.</p><p>Here's an example how to configure a <code class="literal">changeMoveSelector</code> for the optimization algorithm
      Local Search:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Out of the box, this works and all properties of the <code class="literal">changeMoveSelector</code> are defaulted
      sensibly (unless that fails fast due to ambiguity). On the other hand, the configuration can be customized
      significantly for specific use cases. For example: you want want to configure a filter to discard pointless
      moves.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5774"/>7.1.3. Subselecting of entities, values and other moves</h3></div></div></div><p>To create a <code class="literal">Move</code>, we need to select 1 or more planning entities and/or planning values to
      move. Just like <code class="literal">MoveSelector</code>s, <code class="literal">EntitySelector</code>s and
      <code class="literal">ValueSelector</code>s need to support a similar feature set (such as scalable just-in-time selection).
      Therefor, they implement a common interface <code class="literal">Selector</code> and they are configured similarly.</p><p>A MoveSelector is often composed out of <code class="literal">EntitySelector</code>s,
      <code class="literal">ValueSelector</code>s or even other <code class="literal">MoveSelector</code>s, which can be configured
      individually if desired:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Together, this structure forms a <code class="literal">Selector</code> tree:</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/selectorTree.png"/></div><p>The root of this tree is a <code class="literal">MoveSelector</code> which is injected into the optimization algorithm
      implementation to be (partially) iterated in every step.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e5820"/>7.2. General <code class="literal">Selector</code> features</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5826"/>7.2.1. <code class="literal">CacheType</code>: Create moves ahead of time or Just In Time</h3></div></div></div><p>A <code class="literal">Selector</code>'s <code class="literal">cacheType</code> determines when a selection (such as a
      <code class="literal">Move</code>, an entity, a value, ...) is created and how long it lives.</p><p>Almost every <code class="literal">Selector</code> supports setting a <code class="literal">cacheType</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The following <code class="literal">cacheType</code>s are supported:</p><div class="itemizedlist"><ul><li><p><code class="literal">JUST_IN_TIME</code> (default): Not cached. Construct each selection
          (<code class="literal">Move</code>, ...) just before it's used. This scales up well in memory footprint.</p></li><li><p><code class="literal">STEP</code>: Cached. Create each selection (<code class="literal">Move</code>, ...) at the beginning
          of a step and cache them in a list for the remainder of the step. This scales up badly in memory
          footprint.</p></li><li><p><code class="literal">PHASE</code>: Cached. Create each selection (<code class="literal">Move</code>, ...) at the beginning
          of a <code class="literal">SolverPhase</code> and cache them in a list for the remainder of the
          <code class="literal">SolverPhase</code>. Some selections cannot be phase cached because the list changes every step.
          This scales up badly in memory footprint, but has a slight performance gain.</p></li><li><p><code class="literal">SOLVER</code>: Cached. Create each selection (<code class="literal">Move</code>, ...) at the beginning
          of a <code class="literal">Solver</code> and cache them in a list for the remainder of the <code class="literal">Solver</code>.
          Some selections cannot be solver cached because the list changes every step. This scales up badly in memory
          footprint, but has a slight performance gain.</p></li></ul></div><p>A <code class="literal">cacheType</code> can be set on composite selectors too:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Nested selectors of a cached selector cannot be configured to be cached themselves, unless it's a higher
      <code class="literal">cacheType</code>. For example: a <code class="literal">STEP</code> cached <code class="literal">unionMoveSelector</code>
      can hold a <code class="literal">PHASE</code> cached <code class="literal">changeMoveSelector</code>, but not a
      <code class="literal">STEP</code> cached <code class="literal">changeMoveSelector</code>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e5932"/>7.2.2. SelectionOrder: original, sorted, random, shuffled or probabilistic</h3></div></div></div><p>A <code class="literal">Selector</code>'s <code class="literal">selectionOrder</code> determines the order in which the
      selections (such as <code class="literal">Move</code>s, entities, values, ...) are iterated. An optimization algorithm will
      usually only iterate through a subset of its <code class="literal">MoveSelector</code>'s selections, starting from the
      start, so the <code class="literal">selectionOrder</code> is critical to decide which <code class="literal">Move</code>s are actually
      evaluated.</p><p>Almost every <code class="literal">Selector</code> supports setting a <code class="literal">selectionOrder</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">RANDOM</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The following <code class="literal">selectionOrder</code>s are supported:</p><div class="itemizedlist"><ul><li><p><code class="literal">ORIGINAL</code>: Select the selections (<code class="literal">Move</code>s, entities, values, ...) in
          default order. Each selection will be selected only once.</p><div class="itemizedlist"><ul><li><p>For example: A0, A1, A2, A3, ..., B0, B1, B2, B3, ..., C0, C1, C2, C3, ...</p></li></ul></div></li><li><p>SORTED: Select the selections (<code class="literal">Move</code>s, entities, values, ...) in sorted order. Each
          selection will be selected only once. Requires <code class="literal">cacheType &gt;= STEP</code>. Mostly used on an
          <code class="literal">entitySelector</code> or <code class="literal">valueSelector</code> for construction heuristics. See <a class="link" href="#sortedSelection" title="7.2.5. Sorted selection">sorted selection</a>.</p><div class="itemizedlist"><ul><li><p>For example: A0, B0, C0, ..., A2, B2, C2, ..., A1, B1, C1, ...</p></li></ul></div></li><li><p>RANDOM (default): Select the selections (<code class="literal">Move</code>s, entities, values, ...) in
          non-shuffled random order. A selection might be selected multiple times. This scales up well in performance
          because it does not require caching.</p><div class="itemizedlist"><ul><li><p>For example: C2, A3, B1, C2, A0, C0, ...</p></li></ul></div></li><li><p>SHUFFLED: Select the selections (<code class="literal">Move</code>s, entities, values, ...) in shuffled random
          order. Each selection will be selected only once. Requires <code class="literal">cacheType &gt;= STEP</code>. This
          scales up badly in performance, not just because it requires caching, but also because a random number is
          generated for each element, even if it's not selected (which is the grand majority when scaling up).</p><div class="itemizedlist"><ul><li><p>For example: C2, A3, B1, A0, C0, ...</p></li></ul></div></li><li><p>PROBABILISTIC: Select the selections (<code class="literal">Move</code>s, entities, values, ...) in random order,
          based on the selection probability of each element. A selection with a higher probability has a higher chance
          to be selected than elements with a lower probability. A selection might be selected multiple times. Requires
          <code class="literal">cacheType &gt;= STEP</code>. Mostly used on an <code class="literal">entitySelector</code> or
          <code class="literal">valueSelector</code>. See <a class="link" href="#probabilisticSelection" title="7.2.6. Probabilistic selection">probabilistic
          selection</a>.</p><div class="itemizedlist"><ul><li><p>For example: B1, B1, A1, B2, B1, C2, B1, B1, ...</p></li></ul></div></li></ul></div><p>A <code class="literal">selectionOrder</code> can be set on composite selectors too.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>When a <code class="literal">Selector</code> is cached, all of its nested <code class="literal">Selector</code>s will
        naturally default to <code class="literal">selectionOrder</code> <code class="literal">ORIGINAL</code>. Avoid overwriting the
        <code class="literal">selectionOrder</code> of those nested <code class="literal">Selector</code>s.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e6076"/>7.2.3. Recommended combinations of <code class="literal">CacheType</code> and <code class="literal">SelectionOrder</code></h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e6084"/>7.2.3.1. Just in time random selection (default)</h4></div></div></div><p>This combination is great for big use cases (10 000 entities or more), as it scales up well in memory
        footprint and performance. Other combinations are often not even viable on such sizes. It works for smaller use
        cases too, so it's a good way to start out. It's the default, so this explicit configuration of
        <code class="literal">cacheType</code> and <code class="literal">selectionOrder</code> is actually obsolete:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">JUST_IN_TIME</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">RANDOM</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Here's how it works. When <code class="literal">Iterator&lt;Move&gt;.next()</code> is called, a child
        <code class="literal">MoveSelector</code> is randomly selected (1), which creates a random <code class="literal">Move</code> is
        created (2, 3, 4) and is then returned (5):</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/jitRandomSelection.png"/></div><p>Notice that <span class="bold"><strong>it never creates a list of <code class="literal">Move</code>s</strong></span> and it
        generates random numbers only for <code class="literal">Move</code>s that are actually selected.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e6122"/>7.2.3.2. Cached shuffled selection</h4></div></div></div><p>This combination often wins for small and medium use cases (5000 entities or less). Beyond that size, it
        scales up badly in memory footprint and performance.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SHUFFLED</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Here's how it works: At the start of the phase (or step depending on the <code class="literal">cacheType</code>),
        all moves are created (1) and cached (2). When <code class="literal">MoveSelector.iterator()</code> is called, the moves
        are shuffled (3). When <code class="literal">Iterator&lt;Move&gt;.next()</code> is called, the next element in the
        shuffled list is returned (4):</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/cachedShuffledSelection.png"/></div><p>Notice that <span class="bold"><strong>each <code class="literal">Move</code> will only be selected once</strong></span>, even
        though they are selected in random order.</p><p>Use cacheType PHASE if none of the (possibly nested) Selectors require <code class="literal">STEP</code>. Otherwise,
        do something like this:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">STEP</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SHUFFLED</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pillarSwapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_comment">&lt;!--&nbsp;Does&nbsp;not&nbsp;support&nbsp;cacheType&nbsp;PHASE&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e6158"/>7.2.3.3. Cached random selection</h4></div></div></div><p>This combination is often a worthy competitor for medium use cases, especially with fast stepping
        optimization algorithms (such as simulated annealing). Unlike cached shuffled selection, it doesn't waste time
        shuffling the move list at the beginning of every step.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">RANDOM</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="filteredSelection"/>7.2.4. Filtered selection</h3></div></div></div><p>There are certain moves that you don't want to select, because:</p><div class="itemizedlist"><ul><li><p>The move is pointless and would only waste CPU time. For example, swapping 2 lectures of the same course
          will result in the same score and the same schedule because all lectures of 1 course are interchangeable (same
          teacher, same students, same topic).</p></li><li><p>Doing the move would break <a class="link" href="#buildInHardConstraint" title="5.4.6. Build-in hard constraint">a build-in hard constraint</a>, so
          the solution would be infeasible but the score function doesn't check build-in hard constraints (for
          performance gain). For example, don't change a gym lecture to a room which is not a gym room.</p><div class="itemizedlist"><ul><li><p>Note that any build-in hard constraint must usually be filtered on every move type. For example,
              don't swap the room of a gym lecture with another lecture if the other lecture's original room isn't a gym
              room.</p></li></ul></div></li></ul></div><p>Filtered selection can happen on any Selector in the selector tree, including any
      <code class="literal">MoveSelector</code>, <code class="literal">EntitySelector</code> or <code class="literal">ValueSelector</code>. It works
      with any kind of <code class="literal">cacheType</code> and <code class="literal">selectionOrder</code>.</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/filteredSelection.png"/></div><p>Filtering uses the interface <code class="literal">SelectionFilter</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SelectionFilter</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_plain">T</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;accept</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;T&nbsp;selection</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Implement the method <code class="literal">accept</code> to return <code class="literal">false</code> on a discarded
      <code class="literal">selection</code>. Unaccepted moves will not be selected and will therefore never have their method
      <code class="literal">doMove</code> called.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">DifferentCourseSwapMoveFilter</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SelectionFilter</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">SwapMove</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;accept</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">SwapMove</span><span class="java_plain">&nbsp;move</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Lecture</span><span class="java_plain">&nbsp;leftLecture&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Lecture</span><span class="java_separator">)</span><span class="java_plain">&nbsp;move</span><span class="java_separator">.</span><span class="java_plain">getLeftEntity</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Lecture</span><span class="java_plain">&nbsp;rightLecture&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Lecture</span><span class="java_separator">)</span><span class="java_plain">&nbsp;move</span><span class="java_separator">.</span><span class="java_plain">getRightEntity</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_operator">!</span><span class="java_plain">leftLecture</span><span class="java_separator">.</span><span class="java_plain">getCourse</span><span class="java_separator">().</span><span class="java_plain">equals</span><span class="java_separator">(</span><span class="java_plain">rightLecture</span><span class="java_separator">.</span><span class="java_plain">getCourse</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Apply the filter on the lowest level possible. In most cases, you 'll need to know both the entity and the
      value involved and you'll have to apply a <code class="literal">filterClass</code> on the
      <code class="literal">moveSelector</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">filterClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.curriculumcourse.solver.move.DifferentCourseSwapMoveFilter</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">filterClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>But if possible, apply it on a lower levels, such as a <code class="literal">filterClass</code> on the
      <code class="literal">entitySelector</code> or <code class="literal">valueSelector</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">filterClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...EntityFilter</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">filterClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>You can configure multiple <code class="literal">filterClass</code> elements on a single selector.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="sortedSelection"/>7.2.5. Sorted selection</h3></div></div></div><p>Sorted selection can happen on any Selector in the selector tree, including any
      <code class="literal">MoveSelector</code>, <code class="literal">EntitySelector</code> or <code class="literal">ValueSelector</code>. It does
      not work with <code class="literal">cacheType</code> <code class="literal">JUST_IN_TIME</code> and <code class="literal">it only works with
      selectionOrder</code> <code class="literal">SORTED</code>.</p><p>It's mostly used in construction heuristics.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="sortedSelectionByComparator"/>7.2.5.1. Sorted selection by <code class="literal">Comparator</code></h4></div></div></div><p>The easiest way to sort a <code class="literal">Selector</code> is with a plain old
        <code class="literal">Comparator</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudProcessDifficultyComparator</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Comparator</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">CloudProcess</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;compare</span><span class="java_separator">(</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;a</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;b</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">CompareToBuilder</span><span class="java_separator">()</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">a</span><span class="java_separator">.</span><span class="java_plain">getRequiredMultiplicand</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;b</span><span class="java_separator">.</span><span class="java_plain">getRequiredMultiplicand</span><span class="java_separator">())</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">a</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;b</span><span class="java_separator">.</span><span class="java_plain">getId</span><span class="java_separator">())</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">toComparison</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>You 'll also need to configure it (unless it's annotated applied for this optimization algorithm):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SORTED</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">sorterComparatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...CloudProcessDifficultyComparator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">sorterComparatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">sorterOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">DESCENDING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">sorterOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="sortedSelectionBySelectionSorterWeightFactory"/>7.2.5.2. Sorted selection by <code class="literal">SelectionSorterWeightFactory</code></h4></div></div></div><p>If you need the entire <code class="literal">Solution</code> to sort a <code class="literal">Selector</code>, use a
        <code class="literal">SelectionSorterWeightFactory</code> instead:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SelectionSorterWeightFactory</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">Sol</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solution</span><!-- <br/> --><span class="java_separator">,</span><!-- <br/> --><span class="java_plain">&nbsp;T</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Comparable</span><span class="java_plain">&nbsp;createSorterWeight</span><span class="java_separator">(</span><span class="java_type">Sol</span><span class="java_plain">&nbsp;solution</span><span class="java_separator">,</span><span class="java_plain">&nbsp;T&nbsp;selection</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">QueenDifficultyWeightFactory</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SelectionSorterWeightFactory</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">NQueens</span><!-- <br/> --><span class="java_separator">,</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Queen</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Comparable</span><span class="java_plain">&nbsp;createSorterWeight</span><span class="java_separator">(</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;distanceFromMiddle&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;calculateDistanceFromMiddle</span><span class="java_separator">(</span><span class="java_plain">nQueens</span><span class="java_separator">.</span><span class="java_plain">getN</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">getColumnIndex</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">QueenDifficultyWeight</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;distanceFromMiddle</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">static</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">QueenDifficultyWeight</span><span class="java_plain">&nbsp;</span><span class="java_keyword">implements</span><span class="java_plain">&nbsp;</span><span class="java_type">Comparable</span><span class="java_operator">&lt;</span><span class="java_type">QueenDifficultyWeight</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_keyword">final</span><span class="java_plain">&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_keyword">final</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;distanceFromMiddle</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">QueenDifficultyWeight</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;distanceFromMiddle</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">queen&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">distanceFromMiddle&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;distanceFromMiddle</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;compareTo</span><span class="java_separator">(</span><span class="java_type">QueenDifficultyWeight</span><span class="java_plain">&nbsp;other</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">CompareToBuilder</span><span class="java_separator">()</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">The</span><span class="java_plain">&nbsp;more&nbsp;difficult&nbsp;queens&nbsp;have&nbsp;a&nbsp;lower&nbsp;distance&nbsp;to&nbsp;the&nbsp;middle</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">other</span><span class="java_separator">.</span><span class="java_plain">distanceFromMiddle</span><span class="java_separator">,</span><span class="java_plain">&nbsp;distanceFromMiddle</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Decreasing</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Tie</span><span class="java_plain">&nbsp;breaker</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getColumnIndex</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;other</span><span class="java_separator">.</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getColumnIndex</span><span class="java_separator">())</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">toComparison</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>You 'll also need to configure it (unless it's annotated and automatically applied for this optimization
        algorithm):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SORTED</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">sorterWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...QueenDifficultyWeightFactory</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">sorterWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">sorterOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">DESCENDING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">sorterOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="sortedSelectionBySelectionFilter"/>7.2.5.3. Sorted selection by <code class="literal">SelectionSorter</code></h4></div></div></div><p>Alternatively, you can also use the interface <code class="literal">SelectionSorter</code> directly:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SelectionSorter</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_plain">T</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;sort</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_plain">T</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;selectionList</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SORTED</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">sorterClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...MyEntitySorter</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">sorterClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="probabilisticSelection"/>7.2.6. Probabilistic selection</h3></div></div></div><p>Probabilistic selection can happen on any Selector in the selector tree, including any
      <code class="literal">MoveSelector</code>, <code class="literal">EntitySelector</code> or <code class="literal">ValueSelector</code>. It does
      not work with <code class="literal">cacheType</code> <code class="literal">JUST_IN_TIME</code> and <code class="literal">it only works with
      selectionOrder</code> <code class="literal">PROBABILISTIC</code>.</p><p>Each selection has a <code class="literal">probabilityWeight</code>, which determines the chance that's that selection
      will be selected:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SelectionProbabilityWeightFactory</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_plain">T</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">double</span><span class="java_plain">&nbsp;createProbabilityWeight</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;T&nbsp;selection</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PHASE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cacheType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">PROBABILISTIC</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">probabilityWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...MyEntityProbabilityWeightFactoryClass</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">probabilityWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>For example, if there are 3 entities: process A (probabilityWeight 2.0), process B (probabilityWeight 0.5)
      and process C (probabilityWeight 0.5), then process A will be selected 4 times more than B and C.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="mimicSelection"/>7.2.7. Mimic selection (record/replay)</h3></div></div></div><p>During mimic selection, 1 normal selector records its selection and 1 or multiple other special selectors
      replay that selection. The recording selector acts as a normal selector and supports all other configuration
      properties. A replaying selector mimics the recording selection and support no other configuration
      properties.</p><p>The recording selector needs an <code class="literal">id</code>. A replaying selector must reference a recorder's id
      with a <code class="literal">mimicSelectorRef</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cartesianProductMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">id</span><span class="xml_tag_symbols">=</span><span class="xml_attribute_value">&quot;entitySelector&quot;</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">period</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">mimicSelectorRef</span><span class="xml_tag_symbols">=</span><span class="xml_attribute_value">&quot;entitySelector&quot;</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">room</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cartesianProductMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Mimic selection is usefull to create a composite move from 2 moves that affect the same entity.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e6394"/>7.3. Generic MoveSelectors</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="changeMoveSelector"/>7.3.1. <code class="literal">changeMoveSelector</code></h3></div></div></div><p>For 1 planning variable, the <code class="literal">ChangeMove</code> selects 1 planning entity and 1 planning value
      and assigns the entity's variable to that value.</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/changeMove.png"/></div><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...Lecture</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">room</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>A <code class="literal">ChangeMove</code> is the finest grained move.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>Almost every <code class="literal">moveSelector</code> configuration injected into a metaheuristic algorithm should
        include a changeMoveSelector or a custom implementation. This guarantees that every possible
        <code class="literal">Solution</code> can be reached through applying a number of moves in sequence (not taking <a class="link" href="#scoreTrap" title="5.4.8. Score trap">score traps</a> into account). Of course, normally it is unioned with other, more course
        grained move selectors.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="swapMoveSelector"/>7.3.2. swapMoveSelector</h3></div></div></div><p>The <code class="literal">SwapMove</code> selects 2 different planning entities and swaps the planning values of all
      their planning variables.</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/swapMove.png"/></div><p>Although a <code class="literal">SwapMove</code> on a single variable is essentially just 2
      <code class="literal">ChangeMove</code>s, it's often the winning step where the first of the 2
      <code class="literal">ChangeMove</code>s would not be the winning step because it leave the solution in a state with broken
      hard constraints. For example: swapping the room of 2 lectures doesn't bring the solution in a intermediate state
      where both lectures are in the same room which breaks a hard constraint.</p><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...Lecture</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">secondaryEntitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">secondaryEntitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">room</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The <code class="literal">secondaryEntitySelector</code> is rarely needed: if it is not specified, entities from the
      same <code class="literal">entitySelector</code> are swapped.</p><p>If one or more <code class="literal">variableNameInclude</code> properties are specified, not all planning variables
      will be swapped, but only those specified. For example for course scheduling, specifying only
      <code class="literal">variableNameInclude</code> room will make it only swap room, not period.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="pillarSwapMoveSelector"/>7.3.3. pillarSwapMoveSelector</h3></div></div></div><p>A <span class="emphasis"><em>pillar</em></span> is a set of planning entities which have the same planning value(s) for each
      of their planning variables. The <code class="literal">pillarSwapMove</code> selects 2 different entity pillars and swaps
      the values of all their variables for all their entities.</p><div class="mediaobject"><img src="images/Chapter-Move_and_neighborhood_selection/pillarSwapMove.png"/></div><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pillarSwapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pillarSwapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pillarSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...Lecture</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pillarSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">secondaryPillarSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">secondaryPillarSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">room</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableNameInclude</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pillarSwapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The <code class="literal">secondaryPillarSelector</code> is rarely needed: if it is not specified, entities from the
      same <code class="literal">pillarSelector</code> are swapped.</p><p>The other properties are explained in <a class="link" href="#swapMoveSelector" title="7.3.2. swapMoveSelector">swapMoveSelector</a>.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="subChainChangeMoveSelector"/>7.3.4. subChainChangeMoveSelector</h3></div></div></div><p>A <span class="emphasis"><em>subChain</em></span> is a set of planning entities with a chained planning variable which form
      part of a chain. The <code class="literal">subChainChangeMove</code> selects a subChain and moves it to another place in a
      different or the same anchor chain.</p><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">subChainChangeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">subChainChangeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">subChainSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...Customer</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">minimumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">2</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">minimumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">40</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">subChainSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">previousStandstill</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectReversingMoveToo</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">true</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectReversingMoveToo</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">subChainChangeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The <code class="literal">subChainSelector</code> selects a number of entities, no less than
      <code class="literal">minimumSubChainSize</code> (defaults to 2) and no more than <code class="literal">maximumSubChainSize</code>
      (defaults to infinity).</p><p>The property <code class="literal">selectReversingMoveToo</code> (defaults to true) enabled selecting the reverse of
      every subchain too.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="subChainSwapMoveSelector"/>7.3.5. subChainSwapMoveSelector</h3></div></div></div><p>The <code class="literal">subChainSwapMove</code> selects 2 different subChains and moves it to another place in a
      different or the same anchor chain.</p><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">subChainSwapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">subChainSwapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">subChainSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...Customer</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">minimumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">2</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">minimumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">40</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">subChainSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">secondarySubChainSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...Customer</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">minimumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">2</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">minimumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">40</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSubChainSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">secondarySubChainSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectReversingMoveToo</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">true</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectReversingMoveToo</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">subChainSwapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The <code class="literal">secondarySubChainSelector</code> is rarely needed: if it is not specified, entities from the
      same <code class="literal">subChainSelector</code> are swapped.</p><p>The other properties are explained in <a class="link" href="#subChainChangeMoveSelector" title="7.3.4. subChainChangeMoveSelector">subChainChangeMoveSelector</a>.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e6579"/>7.4. Combining multiple <code class="literal">MoveSelector</code>s</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e6585"/>7.4.1. unionMoveSelector</h3></div></div></div><p>A <code class="literal">unionMoveSelector</code> selects a <code class="literal">Move</code> by selecting 1 of its child
      <code class="literal">MoveSelector</code>s to supply the next <code class="literal">Move</code>.</p><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectorProbabilityWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...ProbabilityWeightFactory</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectorProbabilityWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The <code class="literal">selectorProbabilityWeightFactory</code> determines in <code class="literal">selectionOrder</code>
      <code class="literal">RANDOM</code> how often a child MoveSelector is selected to supply the next Move. By default, each
      child <code class="literal">MoveSelector</code> has the same chance of being selected. Change the fixedProbabilityWeight of
      such a child to select it more often. For example, the <code class="literal">unionMoveSelector</code> can return a
      <code class="literal">SwapMove</code> twice as often as a <code class="literal">ChangeMove</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1.0</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">2.0</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">fixedProbabilityWeight</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The number of possible <code class="literal">ChangeMove</code>s is very different from the number of possible
      <code class="literal">SwapMove</code>s and furthermore it's problem dependent. To give each individual
      <code class="literal">Move</code> the same selection chance (as opposed to each <code class="literal">MoveSelector</code>), use the
      <code class="literal">FairSelectorProbabilityWeightFactory</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectorProbabilityWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.core.impl.heuristic.selector.common.decorator.FairSelectorProbabilityWeightFactory</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectorProbabilityWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e6654"/>7.4.2. cartesianProductMoveSelector</h3></div></div></div><p>A <code class="literal">cartesianProductMoveSelector</code> selects a new <code class="literal">CompositeMove</code>. It builds
      that <code class="literal">CompositeMove</code> by selecting 1 <code class="literal">Move</code> per child
      <code class="literal">MoveSelector</code> and adding it to the <code class="literal">CompositeMove</code>.</p><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cartesianProductMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cartesianProductMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">cartesianProductMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">ignoreEmptyChildIterators</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">true</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">ignoreEmptyChildIterators</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_plain">...</span><span class="xml_attribute_name">MoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">cartesianProductMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The propery <code class="literal">ignoreEmptyChildIterators</code> (true by default) will ignore every empty
      <code class="literal">childMoveSelector</code> to avoid returning no moves. For example: a cartesian product of
      <code class="literal">changeMoveSelector</code> A and B, for which B is empty (because all it's entities are immovable)
      returns no moves if <code class="literal">ignoreEmptyChildIterators</code> is <code class="literal">false</code> and the moves of A if
      <code class="literal">ignoreEmptyChildIterators</code> is <code class="literal">true</code>.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e6708"/>7.5. EntitySelector</h2></div></div></div><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.curriculumcourse.domain.Lecture</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entitySelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The <code class="literal">entityClass</code> property is only required if it cannot be deduced automatically because
    there are multiple entity classes.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e6724"/>7.6. ValueSelector</h2></div></div></div><p>Simplest configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;selector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">room</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">variableName</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The <code class="literal">variableName</code> property is only required if it cannot be deduced automatically because
    there are multiple variables (for the related entity class).</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e6740"/>7.7. Custom moves</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e6743"/>7.7.1. Which move types might be missing in my implementation?</h3></div></div></div><p>To determine which move types might be missing in your implementation, run a benchmarker <span class="emphasis"><em>for a
      short amount of time</em></span> and <a class="link" href="#writingTheOutputSolutionOfTheBenchmarkRuns" title="13.2.4. Writing the output solution of the benchmark runs">configure it to
      write the best solutions to disk</a>. Take a look at such a best solution: it will likely be a local optima.
      Try to figure out if there's a move that could get out of that local optima faster.</p><p>If you find one, implement that course-grained move, mix it with the existing moves and benchmark it against
      the previous configurations to see if you want to keep it.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e6756"/>7.7.2. Custom moves introduction</h3></div></div></div><p>Instead of reusing the generic <code class="literal">Move</code>s (such as <code class="literal">ChangeMove</code>) you can also
      implement your own <code class="literal">Move</code>s. Generic and custom <code class="literal">MoveSelector</code>s can be combined
      as wanted.</p><p>A custom <code class="literal">Move</code> can be tailored to work to the advantage of your constraints. For example,
      in examination scheduling, changing the period of an exam A also changes te period of all the exams that need to
      coincide with exam A.</p><p>A custom <code class="literal">Move</code> is also slightly faster than a generic <code class="literal">Move</code>. However,
      it's far more work to implement and much harder to avoid bugs. After implementing a custom
      <code class="literal">Move</code>, make sure to turn on <code class="literal">environmentMode</code> <code class="literal">FULL_ASSERT</code> to
      check for score corruptions.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e6795"/>7.7.3. The interface <code class="literal">Move</code></h3></div></div></div><p>Your custom moves must implement the <code class="literal">Move</code> interface:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Move</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;isMoveDoable</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Move</span><span class="java_plain">&nbsp;createUndoMove</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;doMove</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Collection</span><span class="java_operator">&lt;?</span><span class="java_plain">&nbsp;</span><span class="java_keyword">extends</span><span class="java_plain">&nbsp;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getPlanningEntities</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Collection</span><span class="java_operator">&lt;?</span><span class="java_plain">&nbsp;</span><span class="java_keyword">extends</span><span class="java_plain">&nbsp;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getPlanningValues</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Let's take a look at the <code class="literal">Move</code> implementation for 4 queens which moves a queen to a
      different row:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">RowChangeMove</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Move</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">private</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;toRow</span><span class="java_separator">;</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">RowChangeMove</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">Row</span><span class="java_plain">&nbsp;toRow</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">queen&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">this</span><span class="java_separator">.</span><span class="java_plain">toRow&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;toRow</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_separator">...</span><span class="java_plain">&nbsp;see&nbsp;below</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>An instance of <code class="literal">RowChangeMove</code> moves a queen from its current row to a different
      row.</p><p>Planner calls the <code class="literal">doMove(ScoreDirector)</code> method to do a move. The <code class="literal">Move</code>
      implementation must notify the <code class="literal">ScoreDirector</code> of any changes it make to planning entity's
      variables:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">void</span><!-- <br/> --><span class="java_plain">&nbsp;doMove</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_type">ScoreDirector</span><!-- <br/> --><span class="java_plain">&nbsp;scoreDirector</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">beforeVariableChanged</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;row&quot;</span><span class="java_separator">);</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;before&nbsp;changes&nbsp;are&nbsp;made&nbsp;to&nbsp;the&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">row</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">setRow</span><span class="java_separator">(</span><span class="java_plain">toRow</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">afterVariableChanged</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;row&quot;</span><span class="java_separator">);</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;after&nbsp;changes&nbsp;are&nbsp;made&nbsp;to&nbsp;the&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">row</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>You need to call the methods <code class="literal">scoreDirector.beforeVariableChanged(Object, String)</code> and
      <code class="literal">scoreDirector.afterVariableChanged(Object, String)</code> directly before and after modifying the
      entity.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>You can alter multiple entities in a single move and effectively create a big move (also known as a
        coarse-grained move).</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>A <code class="literal">Move</code> can only change/add/remove planning entities, it must not change any of the
        problem facts.</p></div><p>Planner automatically filters out <span class="emphasis"><em>non doable moves</em></span> by calling the
      <code class="literal">isDoable(ScoreDirector)</code> method on a move. A <span class="emphasis"><em>non doable move</em></span> is:</p><div class="itemizedlist"><ul><li><p>A move that changes nothing on the current solution. For example, moving queen B0 to row 0 is not
          doable, because it is already there.</p></li><li><p>A move that is impossible to do on the current solution. For example, moving queen B0 to row 10 is not
          doable because it would move it outside the board limits.</p></li></ul></div><p>In the n queens example, a move which moves the queen from its current row to the same row isn't
      doable:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">boolean</span><!-- <br/> --><span class="java_plain">&nbsp;isMoveDoable</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_type">ScoreDirector</span><!-- <br/> --><span class="java_plain">&nbsp;scoreDirector</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_operator">!</span><span class="java_type">ObjectUtils</span><span class="java_separator">.</span><span class="java_plain">equals</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">.</span><span class="java_plain">getRow</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;toRow</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>Because we won't generate a move which can move a queen outside the board limits, we don't need to check it.
      A move that is currently not doable could become doable on the working <code class="literal">Solution</code> of a later
      step.</p><p>Each move has an <span class="emphasis"><em>undo move</em></span>: a move (normally of the same type) which does the exact
      opposite. In the example above the undo move of <span class="emphasis"><em>C0 to C2</em></span> would be the move <span class="emphasis"><em>C2 to
      C0</em></span>. An undo move is created from a <code class="literal">Move</code>, before the <code class="literal">Move</code> has been
      done on the current solution.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Move</span><!-- <br/> --><span class="java_plain">&nbsp;createUndoMove</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_type">ScoreDirector</span><!-- <br/> --><span class="java_plain">&nbsp;scoreDirector</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">RowChangeMove</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;queen</span><span class="java_separator">.</span><span class="java_plain">getRow</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>Notice that if C0 would have already been moved to C2, the undo move would create the move <span class="emphasis"><em>C2 to
      C2</em></span>, instead of the move <span class="emphasis"><em>C2 to C0</em></span>.</p><p>A solver phase might do and undo the same <code class="literal">Move</code> more than once. In fact, many solver
      phases will iteratively do an undo a number of moves to evaluate them, before selecting one of those and doing
      that move again (without undoing it this time).</p><p>A <code class="literal">Move</code> must implement the <code class="literal">getPlanningEntities()</code> and
      <code class="literal">getPlanningValues()</code> methods. They are used by entity tabu and value tabu respectively. When
      they are called, the <code class="literal">Move</code> has already been done.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">List</span><!-- <br/> --><span class="java_operator">&lt;?</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Object</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;getPlanningEntities</span><!-- <br/> --><span class="java_separator">()</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_type">Collections</span><span class="java_separator">.</span><span class="java_plain">singletonList</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Collection</span><span class="java_operator">&lt;?</span><span class="java_plain">&nbsp;</span><span class="java_keyword">extends</span><span class="java_plain">&nbsp;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getPlanningValues</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_type">Collections</span><span class="java_separator">.</span><span class="java_plain">singletonList</span><span class="java_separator">(</span><span class="java_plain">toRow</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>If your <code class="literal">Move</code> changes multiple planning entities, return all of them in
      <code class="literal">getPlanningEntities()</code> and return all their values (to which they are changing) in
      <code class="literal">getPlanningValues()</code>.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Collection</span><!-- <br/> --><span class="java_operator">&lt;?</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">extends</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Object</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;getPlanningEntities</span><!-- <br/> --><span class="java_separator">()</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_type">Arrays</span><span class="java_separator">.</span><span class="java_plain">asList</span><span class="java_separator">(</span><span class="java_plain">leftCloudProcess</span><span class="java_separator">,</span><span class="java_plain">&nbsp;rightCloudProcess</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">Collection</span><span class="java_operator">&lt;?</span><span class="java_plain">&nbsp;</span><span class="java_keyword">extends</span><span class="java_plain">&nbsp;</span><span class="java_type">Object</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;getPlanningValues</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_type">Arrays</span><span class="java_separator">.</span><span class="java_plain">asList</span><span class="java_separator">(</span><span class="java_plain">leftCloudProcess</span><span class="java_separator">.</span><span class="java_plain">getComputer</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;rightCloudProcess</span><span class="java_separator">.</span><span class="java_plain">getComputer</span><span class="java_separator">());</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>A <code class="literal">Move</code> must implement the <code class="literal">equals()</code> and <code class="literal">hashCode()</code>
      methods. 2 moves which make the same change on a solution, should be equal.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">boolean</span><!-- <br/> --><span class="java_plain">&nbsp;equals</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_type">Object</span><!-- <br/> --><span class="java_plain">&nbsp;o</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_keyword">this</span><span class="java_plain">&nbsp;</span><span class="java_operator">==</span><span class="java_plain">&nbsp;o</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_literal">true</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span><span class="java_plain">&nbsp;</span><span class="java_keyword">else</span><span class="java_plain">&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_plain">o&nbsp;</span><span class="java_keyword">instanceof</span><span class="java_plain">&nbsp;</span><span class="java_type">RowChangeMove</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">RowChangeMove</span><span class="java_plain">&nbsp;other&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">RowChangeMove</span><span class="java_separator">)</span><span class="java_plain">&nbsp;o</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">EqualsBuilder</span><span class="java_separator">()</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;other</span><span class="java_separator">.</span><span class="java_plain">queen</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">toRow</span><span class="java_separator">,</span><span class="java_plain">&nbsp;other</span><span class="java_separator">.</span><span class="java_plain">toRow</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">isEquals</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span><span class="java_plain">&nbsp;</span><span class="java_keyword">else</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_literal">false</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">int</span><span class="java_plain">&nbsp;hashCode</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">HashCodeBuilder</span><span class="java_separator">()</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">append</span><span class="java_separator">(</span><span class="java_plain">toRow</span><span class="java_separator">)</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">.</span><span class="java_plain">toHashCode</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>Notice that it checks if the other move is an instance of the same move type. This
      <code class="literal">instanceof</code> check is important because a move will be compared to a move with another move type
      if you're using more then 1 move type.</p><p>It's also recommended to implement the <code class="literal">toString()</code> method as it allows you to read
      Planner's logging more easily:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">String</span><!-- <br/> --><span class="java_plain">&nbsp;toString</span><!-- <br/> --><span class="java_separator">()</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;queen&nbsp;</span><span class="java_operator">+</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;&nbsp;=&gt;&nbsp;&quot;</span><span class="java_plain">&nbsp;</span><span class="java_operator">+</span><span class="java_plain">&nbsp;toRow</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><p>Now that we can implement a single custom <code class="literal">Move</code>, let's take a look at generating such
      custom moves.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e6967"/>7.7.4. <code class="literal">MoveListFactory</code>: the easy way to generate custom moves</h3></div></div></div><p>The easiest way to generate custom moves is by implementing the interface
      <code class="literal">MoveListFactory</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">MoveListFactory</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Move</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;createMoveList</span><span class="java_separator">(</span><span class="java_type">Solution</span><span class="java_plain">&nbsp;solution</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>For example:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">RowChangeMoveFactory</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">MoveListFactory</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Move</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;createMoveList</span><span class="java_separator">(</span><span class="java_type">Solution</span><span class="java_plain">&nbsp;solution</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">NQueens</span><span class="java_plain">&nbsp;nQueens&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">NQueens</span><span class="java_separator">)</span><span class="java_plain">&nbsp;solution</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">List</span><span class="java_operator">&lt;</span><span class="java_type">Move</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;moveList&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ArrayList</span><span class="java_operator">&lt;</span><span class="java_type">Move</span><span class="java_operator">&gt;</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Queen</span><span class="java_plain">&nbsp;queen&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getQueenList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Row</span><span class="java_plain">&nbsp;toRow&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;nQueens</span><span class="java_separator">.</span><span class="java_plain">getRowList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveList</span><span class="java_separator">.</span><span class="java_plain">add</span><span class="java_separator">(</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">RowChangeMove</span><span class="java_separator">(</span><span class="java_plain">queen</span><span class="java_separator">,</span><span class="java_plain">&nbsp;toRow</span><span class="java_separator">));</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;moveList</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Simple configuration (which can be nested in a <code class="literal">unionMoveSelector</code> just like any other
      <code class="literal">MoveSelector</code>):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveListFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveListFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.solver.move.factory.RowChangeMoveFactory</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveListFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveListFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveListFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;moveSelector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveListFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.solver.move.factory.RowChangeMoveFactory</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveListFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveListFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Because the <code class="literal">MoveListFactory</code> generates all moves at once in a List&lt;Move&gt;, it does
      not support <code class="literal">cacheType</code> <code class="literal">JUST_IN_TIME</code>. Therefore,
      <code class="literal">moveListFactory</code> uses <code class="literal">cacheType</code> <code class="literal">STEP</code> by default and it
      scales badly in memory footprint.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7017"/>7.7.5. <code class="literal">MoveIteratorFactory</code>: generate custom moves just in time</h3></div></div></div><p>Use this advanced form to generate custom moves by implementing the interface
      <code class="literal">MoveIteratorFactory</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">MoveIteratorFactory</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">long</span><span class="java_plain">&nbsp;getSize</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Iterator</span><span class="java_operator">&lt;</span><span class="java_type">Move</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;createOriginalMoveIterator</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Iterator</span><span class="java_operator">&lt;</span><span class="java_type">Move</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;createRandomMoveIterator</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">Random</span><span class="java_plain">&nbsp;workingRandom</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>The method <code class="literal">getSize()</code> must give an estimation of the size. It doesn't need to be correct.
      The method <code class="literal">createOriginalMoveIterator</code> is called if the <code class="literal">selectionOrder is</code>
      <code class="literal">ORIGINAL</code> or if it is cached. The method <code class="literal">createRandomMoveIterator</code> is called
      for <code class="literal">selectionOrder</code> <code class="literal">RANDOM</code> combined with cacheType
      <code class="literal">JUST_IN_TIME</code>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>Don't create a collection (list, array, map, set) of <code class="literal">Move</code>s when creating the
        <code class="literal">Iterator&lt;Move&gt;</code>: the whole purpose of <code class="literal">MoveIteratorFactory</code> over
        <code class="literal">MoveListFactory</code> is giving you the ability to create a <code class="literal">Move</code> just in time in
        the <code class="literal">Iterator</code>'s method <code class="literal">next()</code>.</p></div><p>Simple configuration (which can be nested in a <code class="literal">unionMoveSelector</code> just like any other
      <code class="literal">MoveSelector</code>):</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveIteratorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveIteratorFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveIteratorFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveIteratorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Advanced configuration:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveIteratorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Normal&nbsp;moveSelector&nbsp;properties&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveIteratorFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveIteratorFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveIteratorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7093"/>7.7.6. Move generation through DRL</h3></div></div></div><p>Not yet supported.</p></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="constructionHeuristics"/>Chapter 8. Construction heuristics</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e7101">8.1. Overview</a></span></dt><dt><span class="section"><a href="#firstFit">8.2. First Fit</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7114">8.2.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7130">8.2.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#firstFitDecreasing">8.3. First Fit Decreasing</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7164">8.3.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7186">8.3.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#bestFit">8.4. Best Fit</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7199">8.4.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7218">8.4.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#bestFitDecreasing">8.5. Best Fit Decreasing</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7231">8.5.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7262">8.5.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#cheapestInsertion">8.6. Cheapest insertion</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7275">8.6.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7280">8.6.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#regretInsertion">8.7. Regret insertion</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7288">8.7.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7293">8.7.2. Configuration</a></span></dt></dl></dd></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7101"/>8.1. Overview</h2></div></div></div><p>A construction heuristic builds a pretty good initial solution in a finite length of time. Its solution isn't
    always feasible, but it finds it fast and metaheuristics can finish the job.</p><p>Construction heuristics terminate automatically, so there's usually no need to configure a
    <code class="literal">Termination</code> on the construction heuristic phase specifically.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="firstFit"/>8.2. First Fit</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7114"/>8.2.1. Algorithm description</h3></div></div></div><p>The <span class="emphasis"><em>First Fit</em></span> algorithm cycles through all the planning entities (in default order),
      initializing 1 planning entity at a time. It assigns the planning entity to the best available planning value,
      taking the already initialized planning entities into account. It terminates when all planning entities have been
      initialized. It never changes a planning entity after it has been assigned.</p><div class="mediaobject"><img src="images/Chapter-Construction_heuristics/firstFitNQueens04.png"/></div><p>Notice that it starts with putting <code class="literal">Queen</code> A into row 0 (and never moving it later), which
      makes it impossible to reach the optimal solution. Suffixing this construction heuristic with metaheurstics can
      remedy that.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7130"/>8.2.2. Configuration</h3></div></div></div><p>Configure this <code class="literal">SolverPhase</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_FIT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Speedup&nbsp;that&nbsp;can&nbsp;be&nbsp;applied&nbsp;to&nbsp;most,&nbsp;but&nbsp;not&nbsp;all&nbsp;use&nbsp;cases:&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;&lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt;&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--/forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>The <code class="literal">pickEarlyType</code> of <code class="literal">FIRST_NON_DETERIORATING_SCORE</code>
        is a big speedup: for an entity, it picks the first move for which the score does not deteriorate the last step
        score, ignoring all subsequent moves.
        It should be applied when initializing a planning entity cannot improve the last step score:
        it can only make the score lower or equal. So if:</p><div class="itemizedlist"><ul><li><p>There are no positive constraints.</p></li><li><p>And there is no negative constraint that can stop being broken by adding a planning entity (except if
            another negative constraint gets broken which outweighs the first negative constraint).</p></li></ul></div><p>If that is not the case, then it might still be good to apply it in some cases. Use
        the <code class="literal">Benchmarker</code> to decide.</p></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="firstFitDecreasing"/>8.3. First Fit Decreasing</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7164"/>8.3.1. Algorithm description</h3></div></div></div><p>Like <code class="literal">First Fit</code>, but assigns the more difficult planning entities first, because they are
      less likely to fit in the leftovers. So it sorts the planning entities on decreasing difficulty.</p><p>Requires the model to support <a class="link" href="#planningEntityDifficulty" title="4.3.3.2. Planning entity difficulty">planning entity difficulty
      comparison</a>.</p><div class="mediaobject"><img src="images/Chapter-Construction_heuristics/firstFitDecreasingNQueens04.png"/></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>One would expect that this algorithm always performs better than <code class="literal">First Fit</code>. That's not
        always the case, but usually is.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7186"/>8.3.2. Configuration</h3></div></div></div><p>Configure this <code class="literal">SolverPhase</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_FIT_DECREASING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Speedup&nbsp;that&nbsp;can&nbsp;be&nbsp;applied&nbsp;to&nbsp;most,&nbsp;but&nbsp;not&nbsp;all&nbsp;use&nbsp;cases:&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;&lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt;&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--/forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="bestFit"/>8.4. Best Fit</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7199"/>8.4.1. Algorithm description</h3></div></div></div><p>Like <code class="literal">First Fit</code>, but uses the weaker planning values first, because the strong planning
      values are more likely to be able to accommodate later planning entities. So it sorts the planning values on
      increasing strength.</p><p>Requires the model to support <a class="link" href="#planningValueStrength" title="4.3.5.3. Planning value strength">planning value strength
      comparison</a>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>One would expect that this algorithm always performs better than <code class="literal">First Fit</code>. That's not
        always the case.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7218"/>8.4.2. Configuration</h3></div></div></div><p>Configure this <code class="literal">SolverPhase</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">BEST_FIT</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Speedup&nbsp;that&nbsp;can&nbsp;be&nbsp;applied&nbsp;to&nbsp;most,&nbsp;but&nbsp;not&nbsp;all&nbsp;use&nbsp;cases:&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;&lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt;&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--/forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="bestFitDecreasing"/>8.5. Best Fit Decreasing</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7231"/>8.5.1. Algorithm description</h3></div></div></div><p>Combines <code class="literal">First Fit Decreasing</code> and <code class="literal">Best Fit</code>. So it sorts the planning
      entities on decreasing difficulty and the planning values on increasing strength.</p><p>Requires the model to support <a class="link" href="#planningEntityDifficulty" title="4.3.3.2. Planning entity difficulty">planning entity difficulty
      comparison</a> and <a class="link" href="#planningValueStrength" title="4.3.5.3. Planning value strength">planning value strength comparison</a>.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>One would expect that this algorithm always performs better than <code class="literal">First Fit</code>,
        <code class="literal">First Fit Decreasing</code> and <code class="literal">Best Fit</code>. That's not always the case.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7262"/>8.5.2. Configuration</h3></div></div></div><p>Configure this <code class="literal">SolverPhase</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">BEST_FIT_DECREASING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;Speedup&nbsp;that&nbsp;can&nbsp;be&nbsp;applied&nbsp;to&nbsp;most,&nbsp;but&nbsp;not&nbsp;all&nbsp;use&nbsp;cases:&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&nbsp;&lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt;&nbsp;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--/forager--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="cheapestInsertion"/>8.6. Cheapest insertion</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7275"/>8.6.1. Algorithm description</h3></div></div></div><p>TODO</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7280"/>8.6.2. Configuration</h3></div></div></div><p>TODO Not implemented yet.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="regretInsertion"/>8.7. Regret insertion</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7288"/>8.7.1. Algorithm description</h3></div></div></div><p>TODO</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7293"/>8.7.2. Configuration</h3></div></div></div><p>TODO Not implemented yet.</p></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="localSearch"/>Chapter 9. Local search</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e7301">9.1. Overview</a></span></dt><dt><span class="section"><a href="#hillClimbing">9.2. Hill Climbing (Simple Local Search)</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7315">9.2.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#tabuSearch">9.3. Tabu Search</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7335">9.3.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#simulatedAnnealing">9.4. Simulated Annealing</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7356">9.4.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#lateAcceptance">9.5. Late Acceptance</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7369">9.5.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#lateSimulatedAnnealing">9.6. Late Simulated Annealing (experimental)</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7388">9.6.1. Algorithm description</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e7395">9.7. About neighborhoods, moves and steps</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7398">9.7.1. Move generation tips</a></span></dt><dt><span class="section"><a href="#d0e7407">9.7.2. A step</a></span></dt><dt><span class="section"><a href="#d0e7483">9.7.3. Getting stuck in local optima</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e7506">9.8. Deciding the next step</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7556">9.8.1. Acceptor</a></span></dt><dt><span class="section"><a href="#d0e7687">9.8.2. Forager</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e7758">9.9. Using a custom Termination, MoveSelector, EntitySelector, ValueSelector or Acceptor</a></span></dt></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7301"/>9.1. Overview</h2></div></div></div><p>Local search starts from an initial solution and evolves that single solution into a mostly better and better
    solution. It uses a single search path of solutions, not a search tree. At each solution in this path it evaluates a
    number of moves on the solution and applies the most suitable move to take the step to the next solution. It does
    that for a high number of iterations until it's terminated (usually because its time has run out).</p><p>Local search acts a lot like a human planner: it uses a single search path and moves facts around to find a
    good feasible solution. Therefore it's pretty natural to implement.</p><p><span class="bold"><strong>Local search often needs to start from an initialized solution</strong></span>, therefore
    it's recommended to configure a construction heuristic solver phase before it.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="hillClimbing"/>9.2. Hill Climbing (Simple Local Search)</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7315"/>9.2.1. Algorithm description</h3></div></div></div><p>Hill Climbing tries all selected moves and then takes the best move, which is the move which leads to the
      solution with the highest score. That best move is called the step move. From that new solution, it again tries
      all selected moves and takes the best move and continues like that iteratively. If multiple selected moves tie for
      the best move, one of them is randomly chosen as the best move.</p><div class="mediaobject"><img src="images/Chapter-Local_search/hillClimbingNQueens04.png"/></div><p>Notice that one a queen has moved, it can be moved again later. This is a good thing, because in an
      NP-complete problem it's impossible to predict what will be the optimal final value for a planning
      variable.</p><p>Hill Climbing can easily get stuck in a local optima:</p><div class="mediaobject"><img src="images/Chapter-Local_search/hillClimbingGetsStuckInLocalOptimaNQueens04.png"/></div><p>Improvements upon hill climbing (such as tabu search and simulated annealing) address the problem of being
      stuck in local optima.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="tabuSearch"/>9.3. Tabu Search</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7335"/>9.3.1. Algorithm description</h3></div></div></div><p>Tabu Search works like hill climbing, but it maintains a tabu list to avoid getting stuck in local optima.
      The tabu list holds recently used objects that are <span class="emphasis"><em>taboo</em></span> to use for now. Moves that involve
      an object in the tabu list, are not accepted. The tabu list objects can be anything related to the move, such as
      the planning entity, planning value, move, solution, ... Here's an example with entity tabu for 4 queens, so the
      queens are put in the tabu list:</p><div class="mediaobject"><img src="images/Chapter-Local_search/entityTabuSearch.png"/></div><p>Scientific paper: <span class="emphasis"><em>Tabu Search - Part 1 and Part 2</em></span> by Fred Glover (1989 - 1990)</p><p>See Tabu Search acceptor below.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="simulatedAnnealing"/>9.4. Simulated Annealing</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7356"/>9.4.1. Algorithm description</h3></div></div></div><p>Simulated Annealing evaluates only a few moves per step, so it steps quickly. In the classic implementation,
      the first accepted move is the winning step. A move is accepted if it doesn't decrease the score or - in case it
      does decrease the score - if passes a random check. The chance that a decreasing move passes the random check
      decreases relative to the size of the score decrement and the time the phase has been running (which is
      represented as the temperature).</p><div class="mediaobject"><img src="images/Chapter-Local_search/simulatedAnnealing.png"/></div><p>See Simulated Annealing acceptor below.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="lateAcceptance"/>9.5. Late Acceptance</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7369"/>9.5.1. Algorithm description</h3></div></div></div><p>Late Acceptance (also known as Late Acceptance Hill Climbing) also evaluates only a few moves per step. A
      move is accepted if does not decrease the score, or if it leads to a score that is at least the late score (which
      is the winning score of a fixed number of steps ago).</p><div class="mediaobject"><img src="images/Chapter-Local_search/lateAcceptance.png"/></div><p>Scientific paper: <a class="link" href="www.cs.stir.ac.uk/research/publications/techreps/pdf/TR192.pdf" target=""><span class="emphasis"><em>The Late Acceptance
      Hill-Climbing Heuristic</em></span> by Edmund K. Burke, Yuri Bykov (2012)</a></p><p>See Late Acceptance acceptor below.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="lateSimulatedAnnealing"/>9.6. Late Simulated Annealing (experimental)</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7388"/>9.6.1. Algorithm description</h3></div></div></div><p>Late Simulated Annealing combines the best characteristics of Simulated Annealing and Late Acceptance. A
      move is accepted if does not decrease the score, or if it leads to a score that is at least the late score, or -
      failing those criteria - if it passes a random check. The chance that a decreasing move passes the random check
      decreases relative to the size of the score decrement and the late score.</p><p>See Late Simulated Annealing acceptor below.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7395"/>9.7. About neighborhoods, moves and steps</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7398"/>9.7.1. Move generation tips</h3></div></div></div><p>At each solution, local search will try all possible moves and pick the best move to change to the next
      solution. It's up to you to generate those moves. Let's take a look at all the possible moves on the starting
      solution of 4 queens:</p><p>It's highly recommended that you verify all solutions are connected by your move set. This means that by
      combining a finite number of moves you can reach any solution from any solution. Otherwise you're already
      excluding solutions at the start. Especially if you're using only big moves, you should check it. Just because big
      moves outperform small moves in a short test run, it doesn't mean that they will outperform them in a long test
      run.</p><p>You can mix different move types. Usually you're better off preferring small (fine-grained) moves over big
      (course-grained) moves because the score delta calculation will pay off more. However, as the traveling tournament
      example proves, if you can remove a hard constraint by using a certain set of big moves, you can win performance
      and scalability. A big moves version could evaluate a lot less unfeasible solutions, which enables it to
      outperform and outscale a small moves version.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7407"/>9.7.2. A step</h3></div></div></div><p>A step is the winning move. The local search solver tries every move on the current solution and picks the
      best accepted move as the step:</p><div class="figure"><a id="d0e7412"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Local_search/decideNextStepNQueens04.png" alt="Decide the next step at step 0 (4 queens example)"/></div></div><p class="title"><b>Figure 9.1. Decide the next step at step 0 (4 queens example)</b></p></div><br class="figure-break"/><p>Because the move <span class="emphasis"><em>B0 to B3</em></span> has the highest score (<code class="literal">-3</code>), it is picked
      as the next step. Notice that <span class="emphasis"><em>C0 to C3</em></span> (not shown) could also have been picked because it
      also has the score <code class="literal">-3</code>. If multiple moves have the same highest score, one is picked randomly,
      in this case <span class="emphasis"><em>B0 to B3</em></span>.</p><p>The step is made and from that new solution, the local search solver tries all the possible moves again, to
      decide the next step after that. It continually does this in a loop, and we get something like this:</p><div class="figure"><a id="d0e7437"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Local_search/allStepsNQueens04.png" alt="All steps (4 queens example)"/></div></div><p class="title"><b>Figure 9.2. All steps (4 queens example)</b></p></div><br class="figure-break"/><p>Notice that the local search solver doesn't use a search tree, but a search path. The search path is
      highlighted by the green arrows. At each step it tries all possible moves, but unless it's the step, it doesn't
      investigate that solution further. This is one of the reasons why local search is very scalable.</p><p>As you can see, the local search solver solves the 4 queens problem by starting with the starting solution
      and make the following steps sequentially:</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="orderedlist"><ol><li><p><span class="emphasis"><em>B0 to B3</em></span></p></li><li><p><span class="emphasis"><em>D0 to B2</em></span></p></li><li><p><span class="emphasis"><em>A0 to B1</em></span></p></li></ol></div><p>If we turn on <code class="literal">debug</code> logging for the category <code class="literal">org.optaplanner</code>, then
      those steps are shown into the log:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">INFO  Solving started: time spend (0), score (-6), new best score (-6), random seed (0).
DEBUG     Step index (0), time spend (20), score (-3), new best score (-3), accepted/selected move count (12/12) for picked step (col1@row0 =&gt; row3).
DEBUG     Step index (1), time spend (31), score (-1), new best score (-1), accepted/selected move count (12/12) for picked step (col0@row0 =&gt; row1).
DEBUG     Step index (2), time spend (40), score (0), new best score (0), accepted/selected move count (12/12) for picked step (col3@row0 =&gt; row2).
INFO  Phase (0) localSearch ended: step total (3), time spend (41), best score (0).
INFO  Solving ended: time spend (41), best score (0), average calculate count per second (1780).</pre><p>Notice that the logging uses the <code class="literal">toString()</code> method of our <code class="literal">Move</code>
      implementation: <code class="literal">col1@row0 =&gt; row3</code>.</p><p>The local search solver solves the 4 queens problem in 3 steps, by evaluating only 37 possible solutions (3
      steps with 12 moves each + 1 starting solution), which is only fraction of all 256 possible solutions. It solves
      16 queens in 31 steps, by evaluating only 7441 out of 18446744073709551616 possible solutions. Note: with
      construction heuristics it's even a lot more efficient.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7483"/>9.7.3. Getting stuck in local optima</h3></div></div></div><p>A <span class="emphasis"><em>hill climber</em></span> always takes improving moves. This may seem like a good thing, but it's
      not. It suffers from a number of problems:</p><div class="itemizedlist"><ul><li><p>It can get stuck in a local optimum. For example if it reaches a solution X with a score -1 and there is
          no improving move, it is forced to take a next step that leads to a solution Y with score -2, after that
          however, it's very real that it will pick the step back to solution X with score -1. It will then start
          looping between solution X and Y.</p></li><li><p>It can start walking in its own footsteps, picking the same next step at every step.</p></li></ul></div><p>Of course OptaPlanner implements better local searches, such as <span class="emphasis"><em>tabu search</em></span> and
      <span class="emphasis"><em>simulated annealing</em></span> which can avoid these problems. We recommend to never use hill climbing,
      unless you're absolutely sure there are no local optima in your planning problem.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7506"/>9.8. Deciding the next step</h2></div></div></div><p>The local search solver decides the next step with the aid of 3 configurable components:</p><div class="itemizedlist"><ul><li><p>A <code class="literal">MoveSelector</code> which selects the possible moves of the current solution. See the
        chapter about Move and neighborhood selection.</p></li><li><p>An <span class="emphasis"><em>acceptor</em></span> which filters out unacceptable moves. It can also weigh a move it
        accepts.</p></li><li><p>A <span class="emphasis"><em>forager</em></span> which gathers all accepted moves and picks the next step from them.</p></li></ul></div><div class="figure"><a id="d0e7530"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Local_search/decideNextStepNQueens04.png" alt="Decide the next step at step 0 (4 queens example)"/></div></div><p class="title"><b>Figure 9.3. Decide the next step at step 0 (4 queens example)</b></p></div><br class="figure-break"/><p>In the above example the selector generated the moves shown with the blue lines, the acceptor accepted all of
    them and the forager picked the move <span class="emphasis"><em>B0 to B3</em></span>.</p><p>If we turn on <code class="literal">trace</code> logging for the category <code class="literal">org.optaplanner</code>, then the
    decision making is shown in the log:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="">INFO  Solver started: time spend (0), score (-6), new best score (-6), random seed (0).
TRACE         Move index (0) not doable, ignoring move (col0@row0 =&gt; row0).
TRACE         Move index (1), score (-4), accepted (true) for move (col0@row0 =&gt; row1).
TRACE         Move index (2), score (-4), accepted (true) for move (col0@row0 =&gt; row2).
TRACE         Move index (3), score (-4), accepted (true) for move (col0@row0 =&gt; row3).
...
TRACE         Move index (6), score (-3), accepted (true) for move (col1@row0 =&gt; row3).
...
TRACE         Move index (9), score (-3), accepted (true) for move (col2@row0 =&gt; row3).
...
TRACE         Move index (12), score (-4), accepted (true) for move (col3@row0 =&gt; row3).
DEBUG     Step index (0), time spend (6), score (-3), new best score (-3), accepted/selected move count (12/12) for picked step (col1@row0 =&gt; row3).
...</pre><p>Because the last solution can degrade (especially in tabu search and simulated annealing), the
    <code class="literal">Solver</code> remembers the best solution it has encountered through the entire search path. Each time
    the current solution is better than the last best solution, the current solution is cloned and referenced as the new
    best solution.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7556"/>9.8.1. Acceptor</h3></div></div></div><p>An acceptor is used (together with a forager) to active tabu search, simulated annealing, great deluge, ...
      For each move it checks whether it is accepted or not.</p><p>You can implement your own <code class="literal">Acceptor</code>, although the build-in acceptors should suffice for
      most needs. You can also combine multiple acceptors.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e7566"/>9.8.1.1. Tabu Search acceptor</h4></div></div></div><p>When tabu search takes steps it creates tabu's. It does not accept a move as the next step if that move
        breaks tabu. OptaPlanner implements several tabu types:</p><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Solution tabu</em></span> makes recently visited solutions tabu. It does not accept a move
            that leads to one of those solutions. If you can spare the memory, don't be cheap on the tabu size.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solutionTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1000</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solutionTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><span class="emphasis"><em>Move tabu</em></span> makes recent steps tabu. It does not accept a move equal to one of
            those steps.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">7</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><span class="emphasis"><em>Undo move tabu </em></span>makes the undo move of recent steps tabu.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">undoMoveTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">7</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">undoMoveTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><span class="emphasis"><em>Planning entity tabu</em></span> makes the planning entities of recent steps tabu. For
            example, for N queens it makes the recently moved queens tabu. It's recommended to start with this tabu
            type.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">7</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>To avoid hard coding the tabu size, configure a tabu ratio, relative to the number of entities, for
            example 2%:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuRatio</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">0.02</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuRatio</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><span class="emphasis"><em>Planning value tabu</em></span> makes the planning values of recent steps tabu. For example,
            for N queens it makes the recently moved to rows tabu.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">7</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li></ul></div><p>You can even combine tabu types:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">7</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">3</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>If you pick a too small tabu size, your solver can still get stuck in a local optimum. On the other hand,
        with the exception of solution tabu, if you pick a too large tabu size, your solver can get stuck by bouncing of
        the walls. Use the benchmarker to fine tweak your configuration.</p><p>A tabu search acceptor should be combined with a high <code class="literal">acceptedCountLimit</code>, such as
        <code class="literal">1000</code>.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1000</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e7627"/>9.8.1.2. Simulated Annealing acceptor</h4></div></div></div><p>Simulated Annealing does not always pick the move with the highest score, neither does it evaluate many
        moves per step. At least at first. Instead, it gives non improving moves also a chance to be picked, depending
        on its score and the time gradient of the <code class="literal">Termination</code>. In the end, it gradually turns into a
        hill climber, only accepting improving moves.</p><p>In many use cases, simulated annealing surpasses tabu search. By changing a few lines of configuration,
        you can easily switch from tabu search to simulated annealing and back.</p><p>Start with a <code class="literal">simulatedAnnealingStartingTemperature</code> set to the maximum score delta a
        single move can cause. Use the <code class="literal">Benchmarker</code> to tweak the value.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">simulatedAnnealingStartingTemperature</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">2hard/100soft</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">simulatedAnnealingStartingTemperature</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">4</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>A simulated annealing acceptor should be combined with a low <code class="literal">acceptedCountLimit</code>. The
        classic algorithm uses an <code class="literal">acceptedCountLimit</code> of <code class="literal">1</code>, but often
        <code class="literal">4</code> performs better.</p><p>You can even combine it with a tabu acceptor at the same time. Use a lower tabu size than in a pure tabu
        search configuration.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">simulatedAnnealingStartingTemperature</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">10.0</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">simulatedAnnealingStartingTemperature</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">5</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">4</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>This differs from phasing, another powerful technique, where first simulated annealing is used, followed
        by tabu search.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e7667"/>9.8.1.3. Late Acceptance acceptor</h4></div></div></div><p>Late Acceptance accepts any move that has a score which is higher than the best score of a number of steps
        ago. That number of steps is the <code class="literal">lateAcceptanceSize</code>.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">lateAcceptanceSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">500</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">lateAcceptanceSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">4</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e7677"/>9.8.1.4. Late Simulated Annealing acceptor (experimental)</h4></div></div></div><p>Late Simulated Annealing accepts any move that has a score which is higher than the best score of a number
        of steps ago and has a chance to accept any move below that score too. That number of steps is the
        <code class="literal">lateSimulatedAnnealingSize</code>.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">lateSimulatedAnnealingSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">100</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">lateSimulatedAnnealingSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1000</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7687"/>9.8.2. Forager</h3></div></div></div><p>A forager gathers all accepted moves and picks the move which is the next step. Normally it picks the
      accepted move with the highest score. If several accepted moves have the highest score, one is picked
      randomly.</p><p>You can implement your own <code class="literal">Forager</code>, although the build-in forager should suffice for most
      needs.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e7697"/>9.8.2.1. Accepted count limit</h4></div></div></div><p>When there are many possible moves, it becomes inefficient to evaluate all of them at every step. To
        evaluate only a random subset of all the moves, use:</p><div class="itemizedlist"><ul><li><p>An <code class="literal">acceptedCountLimit</code> integer, which specifies how many accepted moves should be
            evaluated during each step. By default, all accepted moves are evaluated at every step.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">1000</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li></ul></div><p>Unlike the n queens problem, real world problems require the use of <code class="literal">acceptedCountLimit</code>.
        Start from an <code class="literal">acceptedCountLimit</code> that takes a step in less then 2 seconds. Turn on INFO
        logging to see the step times. Use the <code class="literal">Benchmarker</code> to tweak the value.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="important"><h2>Important</h2><p>With a low <code class="literal">acceptedCountLimit</code> it is recommended to avoid using
          <code class="literal">selectionOrder</code> SHUFFLED because the shuffling generates a random number for every element
          in the selector, taking up a lot of time, but only a few are actually selected.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e7731"/>9.8.2.2. Pick early type</h4></div></div></div><p>A forager can pick a move early during a step, ignoring subsequent selected moves. There are 3 pick early
        types:</p><div class="itemizedlist"><ul><li><p><code class="literal">NEVER</code>: A move is never picked early: all accepted moves are evaluated that the
            selection allows. This is the default.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">NEVER</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><code class="literal">FIRST_BEST_SCORE_IMPROVING</code>: Pick the first accepted move that improves the best
            score. If none improve the best score, it behaves exactly like the pickEarlyType NEVER.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_BEST_SCORE_IMPROVING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p><code class="literal">FIRST_LAST_STEP_SCORE_IMPROVING</code>: Pick the first accepted move that improves the
            last step score. If none improve the last step score, it behaves exactly like the pickEarlyType
            NEVER.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_LAST_STEP_SCORE_IMPROVING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li></ul></div></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7758"/>9.9. Using a custom Termination, MoveSelector, EntitySelector, ValueSelector or Acceptor</h2></div></div></div><p>You can plug in a custom <code class="literal">Termination</code>, <code class="literal">MoveSelector</code>,
    <code class="literal">EntitySelector</code>, <code class="literal">ValueSelector</code> or <code class="literal">Acceptor</code> by extending the
    abstract class and also the related <code class="literal">*Config</code> class.</p><p>For example, to use a custom <code class="literal">MoveSelector</code>, extend the
    <code class="literal">AbstractMoveSelector</code> class, extend the <code class="literal">MoveSelectorConfig</code> class and configure
    it in the solver configuration.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>It's not possible to directly inject a <code class="literal">Termination</code>, ... instance, instead of also extend
      a <code class="literal">Config</code> class because:</p><div class="itemizedlist"><ul><li><p>A <code class="literal">SolverFactory</code> can build multiple <code class="literal">Solver</code> instances, which each
          require a distinct <code class="literal">Termination</code>, ... instance.</p></li><li><p>A solver configuration needs to be serializable to and from XML. This makes benchmarking with
          <code class="literal">PlannerBenchmark</code> particularly easy because you can configure different
          <code class="literal">Solver</code> variants in XML.</p></li><li><p>A <code class="literal">Config</code> class is often easier and clearer to configure. For example:
          <code class="literal">TerminationConfig</code> translates <code class="literal">maximumMinutesSpend</code> and
          <code class="literal">maximumSecondsSpend</code> into <code class="literal">maximumTimeMillisSpend</code>.</p></li></ul></div></div><p>If you build a better implementation that's not domain specific, consider contributing it back as a pull
    request on github and we'll optimize it and take it along in future refactors.</p></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="evolutionaryAlgorithms"/>Chapter 10. Evolutionary algorithms</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e7846">10.1. Overview</a></span></dt><dt><span class="section"><a href="#evolutionaryStrategies">10.2. Evolutionary Strategies</a></span></dt><dt><span class="section"><a href="#geneticAlgorithms">10.3. Genetic algorithms</a></span></dt></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7846"/>10.1. Overview</h2></div></div></div><p>Evolutionary algorithms work on a population of solutions and evolve that population.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="evolutionaryStrategies"/>10.2. Evolutionary Strategies</h2></div></div></div><p>This algorithm has not been implemented yet.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="geneticAlgorithms"/>10.3. Genetic algorithms</h2></div></div></div><p>This algorithm has not been implemented yet.</p></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="hyperheuristics"/>Chapter 11. Hyperheuristics</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e7864">11.1. Overview</a></span></dt></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7864"/>11.1. Overview</h2></div></div></div><p>A hyperheuristic automates the decision which heuristic(s) to use on a specific data set.</p><p>A future version of Planner will have native support for hyperheuristics. Meanwhile, it's pretty easy to
    implement it yourself: Based on the size or difficulty of a data set (which is a criterion), use a different Solver
    configuration (or adjust the default configuration using the Solver configuration API). The benchmark report can
    help to identify such criteria.</p></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="exactMethods"/>Chapter 12. Exact methods</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e7874">12.1. Overview</a></span></dt><dt><span class="section"><a href="#bruteForce">12.2. Brute Force</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7882">12.2.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7901">12.2.2. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#depthFirstSearch">12.3. Depth-first search</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7911">12.3.1. Algorithm description</a></span></dt><dt><span class="section"><a href="#d0e7931">12.3.2. Configuration</a></span></dt></dl></dd></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7874"/>12.1. Overview</h2></div></div></div><p>Exact methods will always find the global optimum and recognize it too. That being said, they don't scale (not
    even beyond toy data sets) and are therefore mostly useless.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="bruteForce"/>12.2. Brute Force</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7882"/>12.2.1. Algorithm description</h3></div></div></div><p>The Brute Force algorithm creates and evaluates every possible solution.</p><div class="mediaobject"><img src="images/Chapter-Exact_methods/bruteForceNQueens04.png"/></div><p>Notice that it creates a search tree that explodes as the problem size increases. <span class="bold"><strong>Brute Force is mostly unusable for a real-world problem due to time limitations</strong></span>,
      as proven by these scalability graphs from the benchmarker:</p><div class="mediaobject"><img src="images/Chapter-Exact_methods/bruteForceScalabilityNQueens.png"/></div><div class="mediaobject"><img src="images/Chapter-Exact_methods/bruteForceScalabilityCloudBalance.png"/></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7901"/>12.2.2. Configuration</h3></div></div></div><p>Using the brute force algorithm is easy:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">bruteForce</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">bruteForce</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="depthFirstSearch"/>12.3. Depth-first search</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7911"/>12.3.1. Algorithm description</h3></div></div></div><p>Depth-First Search is an improvement over Brute Force, as it regularly prunes away an entire subset of
      solutions which cannot have a better solution than the best solution already found at that point. for example: at
      index 15, it can prune away all unvisited solutions with queen A on row 0, because none will be better than the
      solution of index 14 with a score of <code class="literal">-1</code>.</p><div class="mediaobject"><img src="images/Chapter-Exact_methods/backtrackingDepthFirstSearchNQueens04.png"/></div><p>Notice that it (much like Brute Force) creates a search tree that explodes as the problem size increases.
      <span class="bold"><strong>Depth-First Search is mostly unusable for a real-world NP-complete problem due to time
      limitations.</strong></span></p><p>Technically, this Backtracking Depth-First Search with pruning is a form of <span class="emphasis"><em>Branch And
      Bound</em></span>, although Branch and Bound is often more flexible in its pruning.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7931"/>12.3.2. Configuration</h3></div></div></div><p>Depth-first search is not yet implemented. Patches welcome.</p></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="benchmarkingAndTweaking"/>Chapter 13. Benchmarking and tweaking</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e7939">13.1. Finding the best Solver configuration</a></span></dt><dt><span class="section"><a href="#d0e7952">13.2. Doing a benchmark</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e7955">13.2.1. Adding a dependency on optaplanner-benchmark</a></span></dt><dt><span class="section"><a href="#d0e7983">13.2.2. Building and running a PlannerBenchmark</a></span></dt><dt><span class="section"><a href="#problemIO">13.2.3. ProblemIO: input and output of Solution files</a></span></dt><dt><span class="section"><a href="#writingTheOutputSolutionOfTheBenchmarkRuns">13.2.4. Writing the output solution of the benchmark runs</a></span></dt><dt><span class="section"><a href="#d0e8160">13.2.5. Warming up the HotSpot compiler</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e8171">13.3. Benchmark report</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e8174">13.3.1. HTML report</a></span></dt><dt><span class="section"><a href="#d0e8207">13.3.2. Summary statistics</a></span></dt><dt><span class="section"><a href="#d0e8290">13.3.3. Statistic per data set (graph and CSV)</a></span></dt><dt><span class="section"><a href="#d0e8428">13.3.4. Ranking the Solvers</a></span></dt></dl></dd><dt><span class="section"><a href="#d0e8487">13.4. Advanced benchmarking</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e8490">13.4.1. Benchmarking performance tricks</a></span></dt><dt><span class="section"><a href="#d0e8552">13.4.2. Template based benchmarking and matrix benchmarking</a></span></dt></dl></dd></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7939"/>13.1. Finding the best <code class="literal">Solver</code> configuration</h2></div></div></div><p>OptaPlanner supports several optimization algorithms, but you're probably wondering which is the best one?
    Although some optimization algorithms generally perform better than others, it really depends on your problem
    domain. Most solver phases have parameters which can be tweaked. Those parameters can influence the results a lot,
    even though most solver phases work pretty well out-of-the-box.</p><p>Luckily, OptaPlanner includes a benchmarker, which allows you to play out different solver phases with
    different settings against each other, so you can pick the best configuration for your planning problem.</p><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/benchmarkOverview.png"/></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e7952"/>13.2. Doing a benchmark</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7955"/>13.2.1. Adding a dependency on optaplanner-benchmark</h3></div></div></div><p>The benchmarker is in a separate artifact called <code class="literal">optaplanner-benchmark</code>.</p><p>If you use Maven, add a dependency in your <code class="filename">pom.xml</code> file:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">groupId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">optaplanner-benchmark</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">artifactId</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">dependency</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>This is similar for Gradle, Ivy and Buildr. The version must be exactly the same as the
      <code class="literal">optaplanner-core</code> version used (which is automatically the case if you import
      <code class="literal">optaplanner-bom</code>).</p><p>If you use ANT, you've probably already copied the required jars from the download zip's
      <code class="filename">binaries</code> directory.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e7983"/>13.2.2. Building and running a <code class="literal">PlannerBenchmark</code></h3></div></div></div><p>You can build a <code class="literal">PlannerBenchmark</code> instance with the
      <code class="literal">XmlPlannerBenchmarkFactory</code>. Configure it with a benchmark configuration xml file:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">PlannerBenchmarkFactory</span><!-- <br/> --><span class="java_plain">&nbsp;plannerBenchmarkFactory&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">new</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">XmlPlannerBenchmarkFactory</span><!-- <br/> --><span class="java_separator">(</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_literal">&quot;/org/optaplanner/examples/nqueens/benchmark/nqueensBenchmarkConfig.xml&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">PlannerBenchmark</span><span class="java_plain">&nbsp;plannerBenchmark&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;benchmarkFactory</span><span class="java_separator">.</span><span class="java_plain">buildPlannerBenchmark</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plannerBenchmark</span><span class="java_separator">.</span><span class="java_plain">benchmark</span><span class="java_separator">();</span></pre><p>A basic benchmark configuration file looks something like this:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_processing_instruction">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">benchmarkDirectory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">local/data/nqueens</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">benchmarkDirectory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_comment">&lt;!--&lt;parallelBenchmarkCount&gt;AUTO&lt;/parallelBenchmarkCount&gt;--&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">warmUpSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">30</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">warmUpSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">inheritedSolverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">xstreamAnnotatedClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.domain.NQueens</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">xstreamAnnotatedClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">data/nqueens/unsolved/32queens.xml</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">data/nqueens/unsolved/64queens.xml</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">BEST_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.domain.NQueens</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solutionClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.domain.Queen</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">planningEntityClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">SIMPLE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDefinitionType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">/org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDrl</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">scoreDirectorFactory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">20</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">maximumSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">termination</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_FIT_DECREASING</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristicType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">FIRST_NON_DETERIORATING_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">constructionHeuristic</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">inheritedSolverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">Entity&nbsp;tabu</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">ORIGINAL</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">5</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">NEVER</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">Value&nbsp;tabu</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">ORIGINAL</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">valueTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">5</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">valueTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">NEVER</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">Move&nbsp;tabu</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">ORIGINAL</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">selectionOrder</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">moveTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">5</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">moveTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">NEVER</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">pickEarlyType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>This <code class="literal">PlannerBenchmark</code> will try 3 configurations (1 move tabu, 1 entity tabu and 1 value
      tabu) on 2 data sets (32 and 64 queens), so it will run 6 solvers.</p><p>Every <code class="literal">solverBenchmark</code> element contains a solver configuration (for example with a local
      search solver phase) and one or more <code class="literal">inputSolutionFile</code> elements. It will run the solver
      configuration on each of those unsolved solution files. The element <code class="literal">name</code> is optional, because
      it is generated if absent. The inputSolutionFile is read by a <a class="link" href="#problemIO" title="13.2.3. ProblemIO: input and output of Solution files">ProblemIO</a>.</p><p>To lower verbosity, the common part of multiple <code class="literal">solverBenchmark</code> entities can be extracted
      to the <code class="literal">inheritedSolverBenchmark</code> element. Yet, every element can still be overwritten per
      <code class="literal">solverBenchmark</code> element. Note that inherited solver phases such as
      <code class="literal">&lt;constructionHeuristic&gt;</code> or <code class="literal">&lt;localSearch&gt;</code> are not overwritten but
      instead are added to the tail of the solver phases list.</p><p>You need to specify a <code class="literal">benchmarkDirectory</code> (relative to the working directory). A benchmark
      report will be written in that directory.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>It's recommended that the <code class="literal">benchmarkDirectory</code> is a directory ignored for source control
        and not cleaned by your build system. This way the generated files are not bloating your source control and they
        aren't lost when doing a build. Usually that directory is called <code class="literal">local</code>.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="problemIO"/>13.2.3. ProblemIO: input and output of Solution files</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8055"/>13.2.3.1. <code class="literal">ProblemIO</code> interface</h4></div></div></div><p>The benchmarker needs to be able to read the input files to contain a <code class="literal">Solution</code> write
        the best <code class="literal">Solution</code> of each benchmark to an output file. For that it uses a class that
        implements the <code class="literal">ProblemIO</code> interface:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">ProblemIO</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">String</span><span class="java_plain">&nbsp;getFileExtension</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">Solution</span><span class="java_plain">&nbsp;read</span><span class="java_separator">(</span><span class="java_type">File</span><span class="java_plain">&nbsp;inputSolutionFile</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;write</span><span class="java_separator">(</span><span class="java_type">Solution</span><span class="java_plain">&nbsp;solution</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">File</span><span class="java_plain">&nbsp;outputSolutionFile</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Your input files need to have been written with the same <code class="literal">ProblemIO</code> class as they are
          being read by the benchmarker.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8079"/>13.2.3.2. <code class="literal">XStreamProblemIO</code>: the default <code class="literal">ProblemIO</code></h4></div></div></div><p>By default, a benchmarker uses a <code class="literal">XStreamProblemIO</code> instance to read and write
        solutions.</p><p>You need to tell the benchmarker about your <code class="literal">Solution</code> class which is annotated with
        XStream annotations:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">xstreamAnnotatedClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.nqueens.domain.NQueens</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">xstreamAnnotatedClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">data/nqueens/unsolved/32queens.xml</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Your input files need to have been written with a <code class="literal">XStreamProblemIO</code> instance, not just
        any <code class="literal">XStream</code> instance, because the <code class="literal">XStreamProblemIO</code> uses a customized
        <code class="literal">XStream</code> instance.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>XStream (and XML in general) is a very verbose format. Reading or writing large datasets in this format
          can cause an <code class="literal">OutOfMemoryError</code> and performance degradation.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8118"/>13.2.3.3. Custom <code class="literal">ProblemIO</code></h4></div></div></div><p>Alternatively, you can implement your own <code class="literal">ProblemIO</code> implementation and configure it
        with the <code class="literal">problemIOClass</code> element:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemIOClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">org.optaplanner.examples.machinereassignment.persistence.MachineReassignmentProblemIO</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemIOClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">data/machinereassignment/import/model_a1_1.txt</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">inputSolutionFile</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>A <code class="literal">ProblemIO</code> implementation must be thread-safe.</p></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="writingTheOutputSolutionOfTheBenchmarkRuns"/>13.2.4. Writing the output solution of the benchmark runs</h3></div></div></div><p>The best solution of each benchmark run can be written to the in the <code class="literal">benchmarkDirectory</code>.
      By default, this is disabled, because the files are rarely used and considered bloat. Also, on large datasets,
      writing the best solution of each single benchmark can take quite some time and memory (causing an
      <code class="literal">OutOfMemoryError</code>), especially in a verbose format like XStream.</p><p>You can enable to write the output solution in the <code class="literal">benchmarkDirectory</code> with
      <code class="literal">writeOutputSolutionEnabled</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">writeOutputSolutionEnabled</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">true</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">writeOutputSolutionEnabled</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8160"/>13.2.5. Warming up the HotSpot compiler</h3></div></div></div><p><span class="bold"><strong>Without a warm up, the results of the first (or first few) benchmarks are not
      reliable</strong></span>, because they will have lost CPU time on HotSpot JIT compilation (and possibly DRL compilation
      too).</p><p>The avoid that distortion, the benchmarker can run some of the benchmarks for a specified amount of time,
      before running the real benchmarks. Generally, a warm up of 30 seconds suffices:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">warmUpSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">30</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">warmUpSecondsSpend</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e8171"/>13.3. Benchmark report</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8174"/>13.3.1. HTML report</h3></div></div></div><p>After the running a benchmark, a HTML report will be written in the <code class="literal">benchmarkDirectory</code>
      with the filename <code class="filename">index.html</code>. Open it in your browser. It has a nice overview of your
      benchmark including:</p><div class="itemizedlist"><ul><li><p>Summary statistics: graphs and tables</p></li><li><p>Problem statistics per <code class="literal">inputSolutionFile</code></p></li><li><p>Each solver configuration (ranked): easy to copy and paste.</p></li><li><p>Benchmark information</p></li></ul></div><p>The HTML report will use your default locale to format numbers. If you need to share the benchmark report
      with people from another country, you might want to overwrite the <code class="literal">benchmarkReportLocale</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">benchmarkReportLocale</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">en_US</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">benchmarkReportLocale</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8207"/>13.3.2. Summary statistics</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8210"/>13.3.2.1. Best score summary (graph and table)</h4></div></div></div><p>Shows the best score per <code class="literal">inputSolutionFile</code> for each solver configuration.</p><p>Useful for visualizing the best solver configuration.</p><div class="figure"><a id="d0e8220"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/summaryStatistic.png" alt="Best score summary statistic"/></div></div><p class="title"><b>Figure 13.1. Best score summary statistic</b></p></div><br class="figure-break"/></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8226"/>13.3.2.2. Best score scalability summary (graph)</h4></div></div></div><p>Shows the best score per problem scale for each solver configuration.</p><p>Useful for visualizing the scalability of each solver configuration.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8233"/>13.3.2.3. Winning score difference summary (graph and table)</h4></div></div></div><p>Shows the winning score difference score per <code class="literal">inputSolutionFile</code> for each solver
        configuration. The winning score difference is the score difference with the score of the winning solver
        configuration for that particular <code class="literal">inputSolutionFile</code>.</p><p>Useful for zooming in on the results of the best score summary.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8246"/>13.3.2.4. Worst score difference percentage (ROI) summary (graph and table)</h4></div></div></div><p>Shows the return on investment (ROI) per <code class="literal">inputSolutionFile</code> for each solver
        configuration if you'd upgrade from the worst solver configuration for that particular
        <code class="literal">inputSolutionFile</code>.</p><p>Useful for visualizing the return on investment (ROI) to decision makers.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8259"/>13.3.2.5. Average calculation count summary (graph and table)</h4></div></div></div><p>Shows the score calculation speed: the average calculation count per second per problem scale for each
        solver configuration.</p><p>Useful for comparing different score calculators and/or score rule implementations (presuming that the
        solver configurations do not differ otherwise). Also useful to measure the scalability cost of an extra
        constraint.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8266"/>13.3.2.6. Time spend summary (graph and table)</h4></div></div></div><p>Shows the time spend per <code class="literal">inputSolutionFile</code> for each solver configuration. This is
        pointless if it's benchmarking against a fixed time limit.</p><p>Useful for visualizing the performance of construction heuristics (presuming that no other solver phases
        are configured).</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8276"/>13.3.2.7. Time spend scalability summary (graph)</h4></div></div></div><p>Shows the time spend per problem scale for each solver configuration. This is pointless if it's
        benchmarking against a fixed time limit.</p><p>Useful for extrapolating the scalability of construction heuristics (presuming that no other solver phases
        are configured).</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8283"/>13.3.2.8. Best score per time spend summary (graph)</h4></div></div></div><p>Shows the best score per time spend for each solver configuration. This is pointless if it's benchmarking
        against a fixed time limit.</p><p>Useful for visualizing trade-off between the best score versus the time spend for construction heuristics
        (presuming that no other solver phases are configured).</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8290"/>13.3.3. Statistic per data set (graph and CSV)</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8293"/>13.3.3.1. Enabling a problem statistic</h4></div></div></div><p>The benchmarker supports outputting problem statistics as graphs and CSV (comma separated values) files to
        the <code class="literal">benchmarkDirectory</code>.</p><p>To configure graph and CSV output of a statistic, just add a <code class="literal">problemStatisticType</code>
        line:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">benchmarkDirectory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">local/data/nqueens/solved</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">benchmarkDirectory</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">inheritedSolverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">BEST_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">CALCULATE_COUNT_PER_SECOND</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">inheritedSolverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Multiple <code class="literal">problemStatisticType</code> elements are allowed. Some statistic types might
        influence performance and benchmark results noticeably.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>These statistic per data set can slow down the solver noticeably, which can affect the benchmark
          results. That's why they are optional and not enabled by default.</p><p>The non-optional summary statistics cannot slow down the solver noticeably.</p></div><p>The following types are supported:</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8320"/>13.3.3.2. Best score over time statistic (graph and CSV)</h4></div></div></div><p>To see how the best score evolves over time, add:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">BEST_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div class="figure"><a id="d0e8327"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/bestScoreStatistic.png" alt="Best score over time statistic"/></div></div><p class="title"><b>Figure 13.2. Best score over time statistic</b></p></div><br class="figure-break"/><p><span class="bold"><strong>The best score over time statistic is very useful to detect abnormalities, such as a
        potential <a class="link" href="#scoreTrap" title="5.4.8. Score trap">score trap</a>.</strong></span></p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>A time gradient based algorithm (such as Simulated Annealing) will have a different statistic if it's
          run with a different time limit configuration. That's because this Simulated Annealing implementation
          automatically determines its velocity based on the amount of time that can be spend. On the other hand, for
          the Tabu Search and Late Annealing, what you see is what you'd get.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8342"/>13.3.3.3. Step score over time statistic (graph and CSV)</h4></div></div></div><p>To see how the step score evolves over time, add:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">STEP_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div class="figure"><a id="d0e8349"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/stepScoreStatistic.png" alt="Step score over time statistic"/></div></div><p class="title"><b>Figure 13.3. Step score over time statistic</b></p></div><br class="figure-break"/><p>Compare the step score statistic with the best score statistic (especially on parts for which the best
        score flatlines). If it hits a local optima, the solver should take deteriorating steps to escape it. But it
        shouldn't deteriorate too much either.</p><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>The step score statistic has been seen to slow down the solver noticeably due to GC stress, especially
          for fast stepping algorithms (such as Simulated Annealing and Late Acceptance).</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8360"/>13.3.3.4. Calculate count per second statistic (graph and CSV)</h4></div></div></div><p>To see how fast the scores are calculated, add:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">CALCULATE_COUNT_PER_SECOND</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div class="figure"><a id="d0e8367"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/calculateCountPerSecondStatistic.png" alt="Calculate count per second statistic"/></div></div><p class="title"><b>Figure 13.4. Calculate count per second statistic</b></p></div><br class="figure-break"/><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>The initial high calculate count is typical during solution initialization: it's far easier to calculate
          the score of a solution if only a handful planning entities have been initialized, than when all the planning
          entities are initialized.</p><p>After those few seconds of initialization, the calculate count is relatively stable, apart from an
          occasional stop-the-world garbage collector disruption.</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8378"/>13.3.3.5. Best solution mutation over time statistic (graph and CSV)</h4></div></div></div><p>To see how much each new best solution differs from the <span class="emphasis"><em>previous best solution</em></span>, by
        counting the number of planning variables which have a different value (not including the variables that have
        changed multiple times but still end up with the same value), add:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">BEST_SOLUTION_MUTATION</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div class="figure"><a id="d0e8388"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/bestSolutionMutationStatistic.png" alt="Best solution mutation over time statistic"/></div></div><p class="title"><b>Figure 13.5. Best solution mutation over time statistic</b></p></div><br class="figure-break"/><p>Use Tabu Search - an algorithm that behaves like a human - to get an estimation on how difficult it would
        be for a human to improve the previous best solution to that new best solution.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8396"/>13.3.3.6. Move count per step statistic (graph and CSV)</h4></div></div></div><p>To see how the selected and accepted move count per step evolves over time, add:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">MOVE_COUNT_PER_STEP</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div class="figure"><a id="d0e8403"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/moveCountPerStepStatistic.png" alt="Move count per step statistic"/></div></div><p class="title"><b>Figure 13.6. Move count per step statistic</b></p></div><br class="figure-break"/><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>This statistic has been seen to slow down the solver noticeably due to GC stress, especially for fast
          stepping algorithms (such as Simulated Annealing and Late Acceptance).</p></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8412"/>13.3.3.7. Memory use statistic (graph and CSV)</h4></div></div></div><p>To see how much memory is used, add:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">MEMORY_USE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemStatisticType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">problemBenchmarks</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div class="figure"><a id="d0e8419"/><div class="figure-contents"><div class="mediaobject"><img src="images/Chapter-Benchmarking_and_tweaking/memoryUseStatistic.png" alt="Memory use statistic"/></div></div><p class="title"><b>Figure 13.7. Memory use statistic</b></p></div><br class="figure-break"/><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>The memory use statistic has been seen to affect the solver noticeably.</p></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8428"/>13.3.4. Ranking the <code class="literal">Solver</code>s</h3></div></div></div><p>The benchmark report automatically ranks the solvers. The <code class="literal">Solver</code> with rank
      <code class="literal">0</code> is called the favorite <code class="literal">Solver</code>: it performs best overall, but it might not
      be the best on every problem. It's recommended to use that favorite <code class="literal">Solver</code> in
      production.</p><p>However, there are different ways of ranking the solvers. Configure it like this:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solverBenchmarkRankingType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">TOTAL_SCORE</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solverBenchmarkRankingType</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>The following <code class="literal">solverBenchmarkRankingType</code>s are supported:</p><div class="itemizedlist"><ul><li><p><code class="literal">TOTAL_SCORE</code> (default): Maximize the overall score, so minimize the overall cost if
          all solutions would be executed.</p></li><li><p><code class="literal">WORST_SCORE</code>: Minimize the worst case scenario.</p></li><li><p><code class="literal">TOTAL_RANKING</code>: Maximize the overall ranking. Use this if your datasets differ greatly
          in size or difficulty, producing a difference in <code class="literal">Score</code> magnitude.</p></li></ul></div><p>You can also use a custom ranking, by implementing a <code class="literal">Comparator</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solverBenchmarkRankingComparatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...TotalScoreSolverBenchmarkRankingComparator</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solverBenchmarkRankingComparatorClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>Or a weight factory:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solverBenchmarkRankingWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">...TotalRankSolverBenchmarkRankingWeightFactory</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solverBenchmarkRankingWeightFactoryClass</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e8487"/>13.4. Advanced benchmarking</h2></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8490"/>13.4.1. Benchmarking performance tricks</h3></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h4 class="title"><a id="d0e8493"/>13.4.1.1. Parallel benchmarking on multiple threads</h4></div></div></div><p>If you have multiple processors available on your computer, you can run multiple benchmarks in parallel on
        multiple threads to get your benchmarks results faster:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">parallelBenchmarkCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">AUTO</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">parallelBenchmarkCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Running too many benchmarks in parallel will affect the results of benchmarks negatively. Leave some
          processors unused for garbage collection and other processes.</p><p>We tweak <code class="literal">parallelBenchmarkCount</code> <code class="literal">AUTO</code> to maximize the reliability
          and efficiency of the benchmark results.</p></div><p>The following <code class="literal">parallelBenchmarkCount</code>s are supported:</p><div class="itemizedlist"><ul><li><p><code class="literal">1</code> (default): Run all benchmarks sequentially.</p></li><li><p><code class="literal">AUTO</code>: Let Planner decide how many benchmarks to run in parallel. This formula is
            based on experience. It's recommended to prefer this over the other parallel enabling options.</p></li><li><p>Static number: The number of benchmarks to run in parallel.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">parallelBenchmarkCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">2</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">parallelBenchmarkCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li><li><p>JavaScript formula: Formula for the number of benchmarks to run in parallel. It can use the variable
            <code class="literal">availableProcessorCount</code>. For example:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">parallelBenchmarkCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">(availableProcessorCount&nbsp;/&nbsp;2)&nbsp;+&nbsp;1</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">parallelBenchmarkCount</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre></li></ul></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>The <code class="literal">parallelBenchmarkCount</code> is always limited to the number of available processors.
          If it's higher, it will be automatically decreased.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>In the future, we will also support multi-JVM benchmarking. This feature is independent of <a class="link" href="https://issues.jboss.org/browse/PLANNER-76" target="">multi-threaded solving</a> or multi-JVM
          solving.</p></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8552"/>13.4.2. Template based benchmarking and matrix benchmarking</h3></div></div></div><p>Matrix benchmarking is benchmarking a combination of value sets. For example: benchmark 4
      <code class="literal">entityTabuSize</code> values (<code class="literal">5</code>, <code class="literal">7</code>, <code class="literal">11</code> and
      <code class="literal">13</code>) combined with 3 <code class="literal">acceptedCountLimit</code> values (<code class="literal">500</code>,
      <code class="literal">1000</code> and <code class="literal">2000</code>), resulting in 12 solver configurations.</p><p>To reduce the verbosity of such a benchmark configuration, you can use a <a class="link" href="http://freemarker.sourceforge.net/" target="">Freemarker</a> template for the benchmark configuration
      instead:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="XML"><!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) -->
<span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;...</span><br />
<span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">inheritedSolverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;...</span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">inheritedSolverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;</span><span class="xml_plain">#</span><span class="xml_attribute_name">list</span><span class="xml_plain">&nbsp;[5,&nbsp;7,&nbsp;11,&nbsp;13]&nbsp;</span><span class="xml_attribute_name">as</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;</span><span class="xml_plain">#</span><span class="xml_attribute_name">list</span><span class="xml_plain">&nbsp;[500,&nbsp;1000,&nbsp;2000]&nbsp;</span><span class="xml_attribute_name">as</span><span class="xml_plain">&nbsp;</span><span class="xml_attribute_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">entityTabuSize&nbsp;${entityTabuSize}&nbsp;acceptedCountLimit&nbsp;${acceptedCountLimit}</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">name</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">changeMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">swapMoveSelector</span><span class="xml_tag_symbols">/&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">unionMoveSelector</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">${entityTabuSize}</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">entityTabuSize</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptor</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain">${acceptedCountLimit}</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">acceptedCountLimit</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">forager</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">localSearch</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solver</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_plain">&nbsp;&nbsp;</span><span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">solverBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_plain">#</span><span class="xml_attribute_name">list</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_plain">#</span><span class="xml_attribute_name">list</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
<span class="xml_tag_symbols">&lt;/</span><span class="xml_tag_name">plannerBenchmark</span><span class="xml_tag_symbols">&gt;</span><span class="xml_plain"></span><br />
</pre><p>And build it with the class <code class="literal">FreemarkerXmlPlannerBenchmarkFactory</code>:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_type">PlannerBenchmarkFactory</span><!-- <br/> --><span class="java_plain">&nbsp;plannerBenchmarkFactory&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">new</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">FreemarkerXmlPlannerBenchmarkFactory</span><!-- <br/> --><span class="java_separator">(</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_literal">&quot;/org/optaplanner/examples/cloudbalancing/benchmark/cloudBalancingBenchmarkConfigTemplate.xml.ftl&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">PlannerBenchmark</span><span class="java_plain">&nbsp;plannerBenchmark&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;benchmarkFactory</span><span class="java_separator">.</span><span class="java_plain">buildPlannerBenchmark</span><span class="java_separator">();</span></pre></div></div></div><div class="chapter" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="repeatedPlanning"/>Chapter 14. Repeated planning</h2></div></div></div><div class="toc"><dl><dt><span class="section"><a href="#d0e8601">14.1. Introduction to repeated planning</a></span></dt><dt><span class="section"><a href="#backupPlanning">14.2. Backup planning</a></span></dt><dt><span class="section"><a href="#continuousPlanning">14.3. Continuous planning (windowed planning)</a></span></dt><dd><dl><dt><span class="section"><a href="#d0e8661">14.3.1. Immovable planning entities</a></span></dt></dl></dd><dt><span class="section"><a href="#realTimePlanning">14.4. Real-time planning (event based planning)</a></span></dt></dl></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="d0e8601"/>14.1. Introduction to repeated planning</h2></div></div></div><p>The world constantly changes. The planning facts used to create a solution, might change before or during the
    execution of that solution. There are 3 types of situations:</p><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><p>Waiting to start planning - to lower the risk of planning facts changing - usually isn't a good way to deal
    with that. More CPU time means a better planning solution. An incomplete plan is better than no plan.</p><p>Luckily, the optimization algorithms support planning a solution that's already (partially) planned, known
    as repeated planning.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="backupPlanning"/>14.2. Backup planning</h2></div></div></div><p>Backup planning is the technique of adding extra score constraints to create space in the planning for when
    things go wrong. That creates a backup plan in the plan. For example: try to assign an employee as the spare
    employee (1 for every 10 shifts at the same time), keep 1 hospital bed open in each department, ...</p><p>Then, when things go wrong (one of the employees calls in sick), change the planning facts on the original
    solution (delete the sick employee leave his/her shifts unassigned) and just restart the planning, starting from
    that solution, which has a different score now. The construction heuristics will fill in the newly created gaps
    (probably with the spare employee) and the metaheuristics will even improve it further.</p></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="continuousPlanning"/>14.3. Continuous planning (windowed planning)</h2></div></div></div><p>Continuous planning is the technique of planning one or more upcoming planning windows at the same time and
    repeating that process monthly, weekly, daily or hourly. Because time is infinite, there are infinite future
    windows, so planning all future windows is impossible. Instead, plan only a fixed number of upcoming planning
    windows.</p><p>Past planning windows are immutable. The first upcoming planning window is considered stable (unlikely to
    change), while later upcoming planning windows are considered draft (likely to change during the next planning
    effort). Distant future planning windows are not planned at all.</p><p>Past planning windows have only <span class="emphasis"><em>immovable</em></span> planning entities: the planning entities can no
    longer be changed (they are unable to move), but some of them are still needed in the score calculation, as they
    might affect some of the score constraints that apply on the upcoming planning entities. For example: when an
    employee should not work more than 5 days in a row, he shouldn't work today and tomorrow if he worked the past 4
    days already.</p><p>Sometimes some planning entities are semi-immovable: they can be changed, but occur a certain score penalty if
    they differ from their original place. For example: avoid rescheduling hospital beds less than 2 days before the
    patient arrives (unless it's really worth it), avoid changing the airplane gate during the 2 hours before boarding
    (unless there is no alternative), ...</p><div class="mediaobject"><img src="images/Chapter-Repeated_planning/continuousPlanningPatientAdmissionSchedule.png"/></div><p>Notice the difference between the original planning of November 1th and the new planning of November 5th: some
    planning facts (F, H, I, J, K) changed, which results in unrelated planning entities (G) changing too.</p><div class="section" lang="en-US"><div class="titlepage"><div><div><h3 class="title"><a id="d0e8661"/>14.3.1. Immovable planning entities</h3></div></div></div><p>To make some planning entities immovable, simply add an entity <code class="literal">SelectionFilter</code> that
      returns <code class="literal">true</code> if an entity is movable and <code class="literal">false</code> if it is immovable.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">MovableShiftAssignmentSelectionFilter</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">implements</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">SelectionFilter</span><!-- <br/> --><span class="java_operator">&lt;</span><!-- <br/> --><span class="java_type">ShiftAssignment</span><!-- <br/> --><span class="java_operator">&gt;</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;accept</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_type">ShiftAssignment</span><span class="java_plain">&nbsp;shiftAssignment</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">ShiftDate</span><span class="java_plain">&nbsp;shiftDate&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;shiftAssignment</span><span class="java_separator">.</span><span class="java_plain">getShift</span><span class="java_separator">().</span><span class="java_plain">getShiftDate</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">NurseRoster</span><span class="java_plain">&nbsp;nurseRoster&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">NurseRoster</span><span class="java_separator">)</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">getWorkingSolution</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">return</span><span class="java_plain">&nbsp;nurseRoster</span><span class="java_separator">.</span><span class="java_plain">getNurseRosterInfo</span><span class="java_separator">().</span><span class="java_plain">isInPlanningWindow</span><span class="java_separator">(</span><span class="java_plain">shiftDate</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>And configure it like this:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">@</span><!-- <br/> --><span class="java_type">PlanningEntity</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_plain">movableEntitySelectionFilter&nbsp;</span><!-- <br/> --><span class="java_operator">=</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">MovableShiftAssignmentSelectionFilter</span><!-- <br/> --><span class="java_separator">.</span><!-- <br/> --><span class="java_keyword">class</span><!-- <br/> --><span class="java_separator">)</span>
<!--  --><br/><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_keyword">class</span><span class="java_plain">&nbsp;</span><span class="java_type">ShiftAssignment</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
<!--  --><br/><span class="java_separator">}</span></pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Custom <code class="literal">MoveListFactory</code> and <code class="literal">MoveIteratorFactory</code> implementations must
        make sure that they don't move immovable entities.</p></div></div></div><div class="section" lang="en-US"><div class="titlepage"><div><div><h2 class="title"><a id="realTimePlanning"/>14.4. Real-time planning (event based planning)</h2></div></div></div><p>To do real-time planning, first combine backup planning and continuous planning with short planning windows to
    lower the burden of real-time planning.</p><div class="mediaobject"><img src="images/Chapter-Repeated_planning/realTimePlanningVehicleRouting.png"/></div><p>While the <code class="literal">Solver</code> is solving, an outside event might want to change one of the problem
    facts, for example an airplane is delayed and needs the runway at a later time. Do not change the problem fact
    instances used by the <code class="literal">Solver</code> while it is solving, as that will corrupt it. Instead, add a
    <code class="literal">ProblemFactChange</code> to the <code class="literal">Solver</code> which it will execute in the solver thread as
    soon as possible.</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">Solver</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;addProblemFactChange</span><span class="java_separator">(</span><span class="java_type">ProblemFactChange</span><span class="java_plain">&nbsp;problemFactChange</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">boolean</span><span class="java_plain">&nbsp;isEveryProblemFactChangeProcessed</span><span class="java_separator">();</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">...</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_keyword">interface</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">ProblemFactChange</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;doChange</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">);</span>
</span>
<!--  --><br/><span class="java_separator">}</span></pre><p>Here's an example:</p><pre xmlns="" xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="JAVA"><!-- <br/> --><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><!-- <br/> --><span class="java_keyword">public</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">void</span><!-- <br/> --><span class="java_plain">&nbsp;deleteComputer</span><!-- <br/> --><span class="java_separator">(</span><!-- <br/> --><span class="java_keyword">final</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_type">CloudComputer</span><!-- <br/> --><span class="java_plain">&nbsp;computer</span><!-- <br/> --><span class="java_separator">)</span><!-- <br/> --><span class="java_plain">&nbsp;</span><!-- <br/> --><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solver</span><span class="java_separator">.</span><span class="java_plain">addProblemFactChange</span><span class="java_separator">(</span><span class="java_keyword">new</span><span class="java_plain">&nbsp;</span><span class="java_type">ProblemFactChange</span><span class="java_separator">()</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">public</span><span class="java_plain">&nbsp;</span><span class="java_type">void</span><span class="java_plain">&nbsp;doChange</span><span class="java_separator">(</span><span class="java_type">ScoreDirector</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">CloudBalance</span><span class="java_plain">&nbsp;cloudBalance&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">CloudBalance</span><span class="java_separator">)</span><span class="java_plain">&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">getWorkingSolution</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">First</span><span class="java_plain">&nbsp;remove&nbsp;the&nbsp;planning&nbsp;fact&nbsp;from&nbsp;all&nbsp;planning&nbsp;entities&nbsp;that&nbsp;use&nbsp;it</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">CloudProcess</span><span class="java_plain">&nbsp;process&nbsp;</span><span class="java_operator">:</span><span class="java_plain">&nbsp;cloudBalance</span><span class="java_separator">.</span><span class="java_plain">getProcessList</span><span class="java_separator">())</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">ObjectUtils</span><span class="java_separator">.</span><span class="java_plain">equals</span><span class="java_separator">(</span><span class="java_plain">process</span><span class="java_separator">.</span><span class="java_plain">getComputer</span><span class="java_separator">(),</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">))</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">beforeVariableChanged</span><span class="java_separator">(</span><span class="java_plain">process</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;computer&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process</span><span class="java_separator">.</span><span class="java_plain">setComputer</span><span class="java_separator">(</span><span class="java_literal">null</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">afterVariableChanged</span><span class="java_separator">(</span><span class="java_plain">process</span><span class="java_separator">,</span><span class="java_plain">&nbsp;</span><span class="java_literal">&quot;computer&quot;</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;</span><span class="java_type">Next</span><span class="java_plain">&nbsp;remove&nbsp;it&nbsp;the&nbsp;planning&nbsp;fact&nbsp;itself</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">for</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">Iterator</span><span class="java_operator">&lt;</span><span class="java_type">CloudComputer</span><span class="java_operator">&gt;</span><span class="java_plain">&nbsp;it&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;cloudBalance</span><span class="java_separator">.</span><span class="java_plain">getComputerList</span><span class="java_separator">().</span><span class="java_plain">iterator</span><span class="java_separator">();</span><span class="java_plain">&nbsp;it</span><span class="java_separator">.</span><span class="java_plain">hasNext</span><span class="java_separator">();</span><span class="java_plain">&nbsp;</span><span class="java_separator">)</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_type">CloudComputer</span><span class="java_plain">&nbsp;workingComputer&nbsp;</span><span class="java_operator">=</span><span class="java_plain">&nbsp;it</span><span class="java_separator">.</span><span class="java_plain">next</span><span class="java_separator">();</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">if</span><span class="java_plain">&nbsp;</span><span class="java_separator">(</span><span class="java_type">ObjectUtils</span><span class="java_separator">.</span><span class="java_plain">equals</span><span class="java_separator">(</span><span class="java_plain">workingComputer</span><span class="java_separator">,</span><span class="java_plain">&nbsp;computer</span><span class="java_separator">))</span><span class="java_plain">&nbsp;</span><span class="java_separator">{</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">beforeProblemFactRemoved</span><span class="java_separator">(</span><span class="java_plain">workingComputer</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it</span><span class="java_separator">.</span><span class="java_plain">remove</span><span class="java_separator">();</span><span class="java_plain">&nbsp;</span><span class="java_operator">//</span><span class="java_plain">&nbsp;remove&nbsp;from&nbsp;list</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scoreDirector</span><span class="java_separator">.</span><span class="java_plain">beforeProblemFactRemoved</span><span class="java_separator">(</span><span class="java_plain">workingComputer</span><span class="java_separator">);</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_keyword">break</span><span class="java_separator">;</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">});</span>
<!--  --><br/><span class="java_plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="java_separator">}</span></pre><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Any change on the problem facts or planning entities in a <code class="literal">ProblemFactChange</code> must be done
      on the instances of the <code class="literal">Solution</code> of <code class="literal">scoreDirector.getWorkingSolution()</code>. Note
      that these are not the same entity instances as in the bestSolution (or therefore your user interface): they are
      clones.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="warning"><h2>Warning</h2><p>Any change on the problem facts or planning entities in a <code class="literal">ProblemFactChange</code> must be told
      to the <code class="literal">ScoreDirector</code>.</p></div><div xmlns:d="http://docbook.org/ns/docbook" xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note"><h2>Note</h2><p>Many types of changes can leave a planning entity uninitialized, resulting in a partially initialized
      solution. That's fine, as long as the first solver phase can handle it. All construction heuristics solver phases
      can handle that, so it's recommended to configure such a <code class="literal">SolverPhase</code> as the first phase.</p></div><p>In essence, the <code class="literal">Solver</code> will stop, run the <code class="literal">ProblemFactChange</code> and restart.
    Each <code class="literal">SolverPhase</code> will run again. Each configured <code class="literal">Termination</code> (except
    <code class="literal">terminateEarly</code>) will reset. This means the construction heuristic will run again, but because
    little or no planning variables will be uninitialized (unless you have a <a class="link" href="#nullablePlanningVariable" title="4.3.4.2. Nullable planning variable">nullable planning variable</a>), this won't take long.</p><p>Normally, you won't configure any <code class="literal">Termination</code>, just call
    <code class="literal">Solver.terminateEarly()</code> when the results are needed. Alternatively, you can subscribe to the
    <code class="literal">BestSolutionChangedEvent</code>. A <code class="literal">BestSolutionChangedEvent</code> doesn't guarantee that
    every <code class="literal">ProblemFactChange</code> has been processed already, so check
    <code class="literal">Solver.isEveryProblemFactChangeProcessed()</code> and ignore any
    <code class="literal">BestSolutionChangedEvent</code> fired while that method returns <code class="literal">false</code>.</p></div></div></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div><div class="itemizedlist"><ul><li><p><span class="emphasis"><em>Unforeseen fact changes</em></span>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <span class="bold"><strong>backup planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Unknown long term future facts</em></span>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <span class="bold"><strong>continuous planning</strong></span>.</p></li><li><p><span class="emphasis"><em>Constantly changing planning facts</em></span>: Use <span class="bold"><strong>real-time
        planning</strong></span>.</p></li></ul></div></body></html>